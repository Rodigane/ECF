import {
  MuiPickersAdapterContext
} from "./chunk-URKKW2TZ.js";
import {
  ButtonBase_default,
  Button_default,
  CSSTransition_default,
  DialogActions_default,
  DialogContent_default,
  Dialog_default,
  Fade_default,
  Grid_default,
  Grow_default,
  IconButton_default,
  InputAdornment_default,
  Paper_default,
  Popper_default,
  TransitionGroup_default,
  Typography_default,
  dialogClasses_default,
  useMediaQuery,
  useTheme
} from "./chunk-FBGHYB6W.js";
import {
  init_utils,
  ownerDocument_default,
  useControlled_default,
  useEventCallback_default,
  useForkRef_default
} from "./chunk-LJYBDIDL.js";
import {
  capitalize_default,
  createSvgIcon,
  styled_default
} from "./chunk-JB5SRUYK.js";
import {
  useThemeProps
} from "./chunk-BMK6CSFX.js";
import {
  Unstable_TrapFocus_default,
  createPopper,
  init_Unstable_TrapFocus,
  init_lib
} from "./chunk-T5JQZH4H.js";
import {
  alpha
} from "./chunk-2ED5T7NI.js";
import {
  HTMLElementType,
  capitalize,
  chainPropTypes,
  clsx_m_default,
  createChainedFunction,
  debounce,
  elementAcceptingRef_default,
  exactProp,
  getScrollbarSize,
  init_clsx_m,
  init_esm,
  ownerDocument,
  ownerWindow,
  refType_default,
  setRef,
  useControlled,
  useEnhancedEffect_default,
  useEventCallback,
  useForkRef,
  useId,
  useIsFocusVisible,
  usePreviousProps_default,
  visuallyHidden_default
} from "./chunk-PX3HVLZL.js";
import {
  require_jsx_runtime
} from "./chunk-BY7XYYGR.js";
import {
  require_react_dom
} from "./chunk-OL5CZT52.js";
import "./chunk-6DQJHPAT.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose,
  require_react_is
} from "./chunk-NVHRJOTF.js";
import {
  require_prop_types
} from "./chunk-ENEB4WZC.js";
import {
  _extends,
  init_extends
} from "./chunk-P5ON7D5I.js";
import {
  require_react
} from "./chunk-PLFUABTW.js";
import {
  __toESM
} from "./chunk-QOVRSCHT.js";

// node_modules/@mui/lab/DateRangePicker/DateRangePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var import_prop_types33 = __toESM(require_prop_types());
var React91 = __toESM(require_react());

// node_modules/@mui/lab/internal/pickers/wrappers/ResponsiveWrapper.js
init_extends();
init_objectWithoutPropertiesLoose();
var React6 = __toESM(require_react());

// node_modules/@mui/lab/internal/pickers/wrappers/MobileWrapper.js
init_extends();
init_objectWithoutPropertiesLoose();
var React3 = __toESM(require_react());

// node_modules/@mui/lab/internal/pickers/wrappers/WrapperVariantContext.js
var React = __toESM(require_react());
var WrapperVariantContext = React.createContext(null);
var IsStaticVariantContext = React.createContext(false);

// node_modules/@mui/lab/internal/pickers/PickersModalDialog.js
init_extends();
var React2 = __toESM(require_react());

// node_modules/@mui/lab/internal/pickers/constants/dimensions.js
var DAY_SIZE = 36;
var DAY_MARGIN = 2;
var DIALOG_WIDTH = 320;
var VIEW_HEIGHT = 358;

// node_modules/@mui/lab/internal/pickers/PickersModalDialog.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var PickersModalDialogRoot = styled_default(Dialog_default)({
  [`& .${dialogClasses_default.container}`]: {
    outline: 0
  },
  [`& .${dialogClasses_default.paper}`]: {
    outline: 0,
    minWidth: DIALOG_WIDTH
  }
});
var PickersModalDialogContent = styled_default(DialogContent_default)({
  "&:first-of-type": {
    padding: 0
  }
});
var PickersModalDialogActions = styled_default(DialogActions_default)(({
  ownerState
}) => _extends({}, (ownerState.clearable || ownerState.showTodayButton) && {
  justifyContent: "flex-start",
  "& > *:first-of-type": {
    marginRight: "auto"
  }
}));
var PickersModalDialog = (props) => {
  const {
    cancelText = "Cancel",
    children,
    clearable = false,
    clearText = "Clear",
    DialogProps = {},
    okText = "OK",
    onAccept,
    onClear,
    onDismiss,
    onSetToday,
    open,
    showTodayButton = false,
    todayText = "Today"
  } = props;
  const ownerState = props;
  return (0, import_jsx_runtime2.jsxs)(PickersModalDialogRoot, _extends({
    open,
    onClose: onDismiss
  }, DialogProps, {
    children: [(0, import_jsx_runtime.jsx)(PickersModalDialogContent, {
      children
    }), (0, import_jsx_runtime2.jsxs)(PickersModalDialogActions, {
      ownerState,
      children: [clearable && (0, import_jsx_runtime.jsx)(Button_default, {
        onClick: onClear,
        children: clearText
      }), showTodayButton && (0, import_jsx_runtime.jsx)(Button_default, {
        onClick: onSetToday,
        children: todayText
      }), cancelText && (0, import_jsx_runtime.jsx)(Button_default, {
        onClick: onDismiss,
        children: cancelText
      }), okText && (0, import_jsx_runtime.jsx)(Button_default, {
        onClick: onAccept,
        children: okText
      })]
    })]
  }));
};
var PickersModalDialog_default = PickersModalDialog;

// node_modules/@mui/lab/internal/pickers/wrappers/MobileWrapper.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _excluded = ["cancelText", "children", "clearable", "clearText", "DateInputProps", "DialogProps", "okText", "onAccept", "onClear", "onDismiss", "onSetToday", "open", "PureDateInputComponent", "showTodayButton", "todayText"];
function MobileWrapper(props) {
  const {
    cancelText,
    children,
    clearable,
    clearText,
    DateInputProps,
    DialogProps,
    okText,
    onAccept,
    onClear,
    onDismiss,
    onSetToday,
    open,
    PureDateInputComponent: PureDateInputComponent2,
    showTodayButton,
    todayText
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  return (0, import_jsx_runtime4.jsxs)(WrapperVariantContext.Provider, {
    value: "mobile",
    children: [(0, import_jsx_runtime3.jsx)(PureDateInputComponent2, _extends({}, other, DateInputProps)), (0, import_jsx_runtime3.jsx)(PickersModalDialog_default, {
      cancelText,
      clearable,
      clearText,
      DialogProps,
      okText,
      onAccept,
      onClear,
      onDismiss,
      onSetToday,
      open,
      showTodayButton,
      todayText,
      children
    })]
  });
}
var MobileWrapper_default = MobileWrapper;

// node_modules/@mui/lab/internal/pickers/wrappers/DesktopTooltipWrapper.js
init_extends();
var React5 = __toESM(require_react());
init_utils();

// node_modules/@mui/lab/internal/pickers/utils.js
function arrayIncludes(array, itemOrItems) {
  if (Array.isArray(itemOrItems)) {
    return itemOrItems.every((item) => array.indexOf(item) !== -1);
  }
  return array.indexOf(itemOrItems) !== -1;
}
var onSpaceOrEnter = (innerFn, onFocus) => (event) => {
  if (event.key === "Enter" || event.key === " ") {
    innerFn();
    event.preventDefault();
    event.stopPropagation();
  }
  if (onFocus) {
    onFocus(event);
  }
};
var pipe = (...fns) => fns.reduceRight((prevFn, nextFn) => (...args) => nextFn(prevFn(...args)), (value) => value);
var executeInTheNextEventLoopTick = (fn) => {
  setTimeout(fn, 0);
};
function createDelegatedEventHandler(fn, onEvent) {
  return (event) => {
    fn(event);
    if (onEvent) {
      onEvent(event);
    }
  };
}
var doNothing = () => {
};

// node_modules/@mui/lab/internal/pickers/PickersPopper.js
init_objectWithoutPropertiesLoose();
init_extends();
var React4 = __toESM(require_react());

// node_modules/@mui/material/Unstable_TrapFocus/index.js
init_Unstable_TrapFocus();

// node_modules/@mui/lab/internal/pickers/PickersPopper.js
init_utils();
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var _excluded2 = ["onClick", "onTouchStart"];
var PickersPopperRoot = styled_default(Popper_default)(({
  theme
}) => ({
  zIndex: theme.zIndex.modal
}));
var PickersPopperPaper = styled_default(Paper_default)(({
  ownerState
}) => _extends({
  transformOrigin: "top center",
  outline: 0
}, ownerState.placement === "top" && {
  transformOrigin: "bottom center"
}));
var PickersPopperAction = styled_default(DialogActions_default)(({
  ownerState
}) => _extends({}, ownerState.clearable ? {
  justifyContent: "flex-start",
  "& > *:first-of-type": {
    marginRight: "auto"
  }
} : {
  padding: 0
}));
function clickedRootScrollbar(event, doc) {
  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
function useClickAwayListener(active, onClickAway) {
  const movedRef = React4.useRef(false);
  const syntheticEventRef = React4.useRef(false);
  const nodeRef = React4.useRef(null);
  const activatedRef = React4.useRef(false);
  React4.useEffect(() => {
    if (!active) {
      return void 0;
    }
    function armClickAwayListener() {
      activatedRef.current = true;
    }
    document.addEventListener("mousedown", armClickAwayListener, true);
    document.addEventListener("touchstart", armClickAwayListener, true);
    return () => {
      document.removeEventListener("mousedown", armClickAwayListener, true);
      document.removeEventListener("touchstart", armClickAwayListener, true);
      activatedRef.current = false;
    };
  }, [active]);
  const handleClickAway = useEventCallback_default((event) => {
    if (!activatedRef.current) {
      return;
    }
    const insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    const doc = ownerDocument_default(nodeRef.current);
    if (!nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    let insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
    }
    if (!insideDOM && !insideReactTree) {
      onClickAway(event);
    }
  });
  const handleSynthetic = () => {
    syntheticEventRef.current = true;
  };
  React4.useEffect(() => {
    if (active) {
      const doc = ownerDocument_default(nodeRef.current);
      const handleTouchMove = () => {
        movedRef.current = true;
      };
      doc.addEventListener("touchstart", handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return () => {
        doc.removeEventListener("touchstart", handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  React4.useEffect(() => {
    if (active) {
      const doc = ownerDocument_default(nodeRef.current);
      doc.addEventListener("click", handleClickAway);
      return () => {
        doc.removeEventListener("click", handleClickAway);
        syntheticEventRef.current = false;
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  return [nodeRef, handleSynthetic, handleSynthetic];
}
var PickersPopper = (props) => {
  var _Button;
  const {
    anchorEl,
    children,
    containerRef = null,
    onClose,
    onClear,
    clearable = false,
    clearText = "Clear",
    open,
    PopperProps,
    role,
    TransitionComponent = Grow_default,
    TrapFocusProps,
    PaperProps = {}
  } = props;
  React4.useEffect(() => {
    function handleKeyDown2(nativeEvent) {
      if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
        onClose();
      }
    }
    document.addEventListener("keydown", handleKeyDown2);
    return () => {
      document.removeEventListener("keydown", handleKeyDown2);
    };
  }, [onClose]);
  const lastFocusedElementRef = React4.useRef(null);
  React4.useEffect(() => {
    if (role === "tooltip") {
      return;
    }
    if (open) {
      lastFocusedElementRef.current = document.activeElement;
    } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
      lastFocusedElementRef.current.focus();
    }
  }, [open, role]);
  const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onClose);
  const paperRef = React4.useRef(null);
  const handleRef = useForkRef_default(paperRef, containerRef);
  const handlePaperRef = useForkRef_default(handleRef, clickAwayRef);
  const ownerState = props;
  const {
    onClick: onPaperClickProp,
    onTouchStart: onPaperTouchStartProp
  } = PaperProps, otherPaperProps = _objectWithoutPropertiesLoose(PaperProps, _excluded2);
  return (0, import_jsx_runtime5.jsx)(PickersPopperRoot, _extends({
    transition: true,
    role,
    open,
    anchorEl,
    ownerState
  }, PopperProps, {
    children: ({
      TransitionProps,
      placement
    }) => (0, import_jsx_runtime5.jsx)(Unstable_TrapFocus_default, _extends({
      open,
      disableAutoFocus: true,
      disableEnforceFocus: role === "tooltip",
      isEnabled: () => true
    }, TrapFocusProps, {
      children: (0, import_jsx_runtime5.jsx)(TransitionComponent, _extends({}, TransitionProps, {
        children: (0, import_jsx_runtime6.jsxs)(PickersPopperPaper, _extends({
          tabIndex: -1,
          elevation: 8,
          ref: handlePaperRef,
          onClick: (event) => {
            onPaperClick(event);
            if (onPaperClickProp) {
              onPaperClickProp(event);
            }
          },
          onTouchStart: (event) => {
            onPaperTouchStart(event);
            if (onPaperTouchStartProp) {
              onPaperTouchStartProp(event);
            }
          },
          ownerState: _extends({}, ownerState, {
            placement
          })
        }, otherPaperProps, {
          children: [children, (0, import_jsx_runtime5.jsx)(PickersPopperAction, {
            ownerState,
            children: clearable && (_Button || (_Button = (0, import_jsx_runtime5.jsx)(Button_default, {
              onClick: onClear,
              children: clearText
            })))
          })]
        }))
      }))
    }))
  }));
};
var PickersPopper_default = PickersPopper;

// node_modules/@mui/lab/internal/pickers/wrappers/DesktopTooltipWrapper.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
function DesktopTooltipWrapper(props) {
  const {
    children,
    DateInputProps,
    KeyboardDateInputComponent: KeyboardDateInputComponent2,
    onDismiss,
    open,
    PopperProps,
    TransitionComponent
  } = props;
  const inputContainerRef = React5.useRef(null);
  const popperRef = React5.useRef(null);
  const handleBlur2 = () => {
    executeInTheNextEventLoopTick(() => {
      var _inputContainerRef$cu, _popperRef$current;
      if ((_inputContainerRef$cu = inputContainerRef.current) != null && _inputContainerRef$cu.contains(document.activeElement) || (_popperRef$current = popperRef.current) != null && _popperRef$current.contains(document.activeElement)) {
        return;
      }
      onDismiss();
    });
  };
  const inputComponentRef = useForkRef_default(DateInputProps.ref, inputContainerRef);
  return (0, import_jsx_runtime8.jsxs)(WrapperVariantContext.Provider, {
    value: "desktop",
    children: [(0, import_jsx_runtime7.jsx)(KeyboardDateInputComponent2, _extends({}, DateInputProps, {
      ref: inputComponentRef,
      onBlur: handleBlur2
    })), (0, import_jsx_runtime7.jsx)(PickersPopper_default, {
      role: "tooltip",
      open,
      containerRef: popperRef,
      anchorEl: inputContainerRef.current,
      TransitionComponent,
      PopperProps,
      onBlur: handleBlur2,
      onClose: onDismiss,
      children
    })]
  });
}
var DesktopTooltipWrapper_default = DesktopTooltipWrapper;

// node_modules/@mui/lab/internal/pickers/wrappers/ResponsiveWrapper.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var _excluded3 = ["cancelText", "clearable", "clearText", "DateInputProps", "desktopModeMediaQuery", "DialogProps", "KeyboardDateInputComponent", "okText", "PopperProps", "PureDateInputComponent", "showTodayButton", "todayText", "TransitionComponent"];
function ResponsiveTooltipWrapper(props) {
  const {
    cancelText,
    clearable,
    clearText,
    DateInputProps,
    desktopModeMediaQuery = "@media (pointer: fine)",
    DialogProps,
    KeyboardDateInputComponent: KeyboardDateInputComponent2,
    okText,
    PopperProps,
    PureDateInputComponent: PureDateInputComponent2,
    showTodayButton,
    todayText,
    TransitionComponent
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const isDesktop = useMediaQuery(desktopModeMediaQuery);
  return isDesktop ? (0, import_jsx_runtime9.jsx)(DesktopTooltipWrapper_default, _extends({
    DateInputProps,
    KeyboardDateInputComponent: KeyboardDateInputComponent2,
    PopperProps,
    TransitionComponent
  }, other)) : (0, import_jsx_runtime9.jsx)(MobileWrapper_default, _extends({
    cancelText,
    clearable,
    clearText,
    DateInputProps,
    DialogProps,
    okText,
    PureDateInputComponent: PureDateInputComponent2,
    showTodayButton,
    todayText
  }, other));
}

// node_modules/@mui/lab/internal/pickers/hooks/useUtils.js
init_esm();
var React7 = __toESM(require_react());
function useLocalizationContext() {
  const localization = React7.useContext(MuiPickersAdapterContext);
  if (localization === null) {
    throw new Error(true ? `Can not find utils in context. It looks like you forgot to wrap your component in LocalizationProvider, or pass dateAdapter prop directly.` : formatMuiErrorMessage(13));
  }
  return localization;
}
function useUtils() {
  return useLocalizationContext().utils;
}
function useDefaultDates() {
  return useLocalizationContext().defaultDates;
}
function useNow() {
  const utils = useUtils();
  const now = React7.useRef(utils.date());
  return now.current;
}

// node_modules/@mui/lab/internal/pickers/hooks/useValidation.js
var React8 = __toESM(require_react());

// node_modules/@mui/lab/internal/pickers/date-utils.js
var findClosestEnabledDate = ({
  date,
  disableFuture,
  disablePast,
  maxDate,
  minDate,
  shouldDisableDate,
  utils
}) => {
  const today = utils.startOfDay(utils.date());
  if (disablePast && utils.isBefore(minDate, today)) {
    minDate = today;
  }
  if (disableFuture && utils.isAfter(maxDate, today)) {
    maxDate = today;
  }
  let forward = date;
  let backward = date;
  if (utils.isBefore(date, minDate)) {
    forward = utils.date(minDate);
    backward = null;
  }
  if (utils.isAfter(date, maxDate)) {
    if (backward) {
      backward = utils.date(maxDate);
    }
    forward = null;
  }
  while (forward || backward) {
    if (forward && utils.isAfter(forward, maxDate)) {
      forward = null;
    }
    if (backward && utils.isBefore(backward, minDate)) {
      backward = null;
    }
    if (forward) {
      if (!shouldDisableDate(forward)) {
        return forward;
      }
      forward = utils.addDays(forward, 1);
    }
    if (backward) {
      if (!shouldDisableDate(backward)) {
        return backward;
      }
      backward = utils.addDays(backward, -1);
    }
  }
  return today;
};
function parseRangeInputValue(utils, value = [null, null]) {
  return value.map((date) => !utils.isValid(date) || date === null ? null : utils.startOfDay(utils.date(date)));
}
var isRangeValid = (utils, range) => {
  return Boolean(range && range[0] && range[1] && !utils.isBefore(range[1], range[0]));
};
var isWithinRange = (utils, day, range) => {
  return isRangeValid(utils, range) && utils.isWithinRange(day, range);
};
var isStartOfRange = (utils, day, range) => {
  return isRangeValid(utils, range) && utils.isSameDay(day, range[0]);
};
var isEndOfRange = (utils, day, range) => {
  return isRangeValid(utils, range) && utils.isSameDay(day, range[1]);
};
var validateDate = (utils, value, {
  disablePast,
  disableFuture,
  minDate,
  maxDate,
  shouldDisableDate
}) => {
  const now = utils.date();
  const date = utils.date(value);
  if (date === null) {
    return null;
  }
  switch (true) {
    case !utils.isValid(value):
      return "invalidDate";
    case Boolean(shouldDisableDate && shouldDisableDate(date)):
      return "shouldDisableDate";
    case Boolean(disableFuture && utils.isAfterDay(date, now)):
      return "disableFuture";
    case Boolean(disablePast && utils.isBeforeDay(date, now)):
      return "disablePast";
    case Boolean(minDate && utils.isBeforeDay(date, minDate)):
      return "minDate";
    case Boolean(maxDate && utils.isAfterDay(date, maxDate)):
      return "maxDate";
    default:
      return null;
  }
};
var validateDateRange = (utils, value, dateValidationProps) => {
  const [start, end] = value;
  if (start === null || end === null) {
    return [null, null];
  }
  const dateValidations = [validateDate(utils, start, dateValidationProps), validateDate(utils, end, dateValidationProps)];
  if (dateValidations[0] || dateValidations[1]) {
    return dateValidations;
  }
  if (!isRangeValid(utils, [utils.date(start), utils.date(end)])) {
    return ["invalidRange", "invalidRange"];
  }
  return [null, null];
};

// node_modules/@mui/lab/internal/pickers/date-time-utils.js
init_objectWithoutPropertiesLoose();

// node_modules/@mui/lab/internal/pickers/time-utils.js
var getMeridiem = (date, utils) => {
  if (!date) {
    return null;
  }
  return utils.getHours(date) >= 12 ? "pm" : "am";
};
var convertValueToMeridiem = (value, meridiem, ampm) => {
  if (ampm) {
    const currentMeridiem = value >= 12 ? "pm" : "am";
    if (currentMeridiem !== meridiem) {
      return meridiem === "am" ? value - 12 : value + 12;
    }
  }
  return value;
};
var convertToMeridiem = (time, meridiem, ampm, utils) => {
  const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);
  return utils.setHours(time, newHoursAmount);
};
function getSecondsInDay(date, utils) {
  return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);
}
var createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation, utils) => (dateLeft, dateRight) => {
  if (disableIgnoringDatePartForTimeValidation) {
    return utils.isAfter(dateLeft, dateRight);
  }
  return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);
};

// node_modules/@mui/lab/internal/pickers/hooks/useValidation.js
function isSameDateOrTimeError(a, b) {
  return a === b;
}
function isSameDateRangeError(a, b) {
  return b !== null && a[1] === b[1] && a[0] === b[0];
}
function useValidation(props, validate, isSameError = isSameDateOrTimeError) {
  const {
    value,
    onError
  } = props;
  const utils = useUtils();
  const previousValidationErrorRef = React8.useRef(null);
  const validationError = validate(utils, value, props);
  React8.useEffect(() => {
    if (onError && !isSameError(validationError, previousValidationErrorRef.current)) {
      onError(validationError, value);
    }
    previousValidationErrorRef.current = validationError;
  }, [isSameError, onError, previousValidationErrorRef, validationError, value]);
  return validationError;
}
function useDateRangeValidation(props) {
  return useValidation(props, validateDateRange, isSameDateRangeError);
}

// node_modules/@mui/lab/internal/pickers/hooks/usePickerState.js
init_extends();
var React10 = __toESM(require_react());

// node_modules/@mui/lab/internal/pickers/hooks/useOpenState.js
var React9 = __toESM(require_react());
function useOpenState({
  open,
  onOpen,
  onClose
}) {
  const isControllingOpenProp = React9.useRef(typeof open === "boolean").current;
  const [openState, setIsOpenState] = React9.useState(false);
  React9.useEffect(() => {
    if (isControllingOpenProp) {
      if (typeof open !== "boolean") {
        throw new Error("You must not mix controlling and uncontrolled mode for `open` prop");
      }
      setIsOpenState(open);
    }
  }, [isControllingOpenProp, open]);
  const setIsOpen = React9.useCallback((newIsOpen) => {
    if (!isControllingOpenProp) {
      setIsOpenState(newIsOpen);
    }
    if (newIsOpen && onOpen) {
      onOpen();
    }
    if (!newIsOpen && onClose) {
      onClose();
    }
  }, [isControllingOpenProp, onOpen, onClose]);
  return {
    isOpen: openState,
    setIsOpen
  };
}

// node_modules/@mui/lab/internal/pickers/hooks/usePickerState.js
function usePickerState(props, valueManager) {
  const {
    disableCloseOnSelect,
    onAccept,
    onChange,
    value
  } = props;
  const utils = useUtils();
  const {
    isOpen,
    setIsOpen
  } = useOpenState(props);
  function initDraftableDate(date) {
    return {
      committed: date,
      draft: date
    };
  }
  const parsedDateValue = valueManager.parseInput(utils, value);
  const [draftState, dispatch] = React10.useReducer((state, action) => {
    switch (action.type) {
      case "reset":
        return initDraftableDate(action.payload);
      case "update":
        return _extends({}, state, {
          draft: action.payload
        });
      default:
        return state;
    }
  }, parsedDateValue, initDraftableDate);
  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {
    dispatch({
      type: "reset",
      payload: parsedDateValue
    });
  }
  const [initialDate, setInitialDate] = React10.useState(draftState.committed);
  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React10.useState(false);
  const acceptDate = React10.useCallback((acceptedDate, needClosePicker) => {
    onChange(acceptedDate);
    if (needClosePicker) {
      setIsOpen(false);
      setInitialDate(acceptedDate);
      if (onAccept) {
        onAccept(acceptedDate);
      }
    }
  }, [onAccept, onChange, setIsOpen]);
  const wrapperProps = React10.useMemo(() => ({
    open: isOpen,
    onClear: () => acceptDate(valueManager.emptyValue, true),
    onAccept: () => acceptDate(draftState.draft, true),
    onDismiss: () => acceptDate(initialDate, true),
    onSetToday: () => {
      const now = utils.date();
      dispatch({
        type: "update",
        payload: now
      });
      acceptDate(now, !disableCloseOnSelect);
    }
  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);
  const pickerProps = React10.useMemo(() => ({
    date: draftState.draft,
    isMobileKeyboardViewOpen,
    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),
    onDateChange: (newDate, wrapperVariant, selectionState = "partial") => {
      dispatch({
        type: "update",
        payload: newDate
      });
      if (selectionState === "partial") {
        acceptDate(newDate, false);
      }
      if (selectionState === "finish") {
        const shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === "mobile");
        acceptDate(newDate, shouldCloseOnSelect);
      }
    }
  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);
  const inputProps = React10.useMemo(() => ({
    onChange,
    open: isOpen,
    rawValue: value,
    openPicker: () => setIsOpen(true)
  }), [onChange, isOpen, value, setIsOpen]);
  const pickerState = {
    pickerProps,
    inputProps,
    wrapperProps
  };
  React10.useDebugValue(pickerState, () => ({
    MuiPickerState: {
      pickerDraft: draftState,
      other: pickerState
    }
  }));
  return pickerState;
}

// node_modules/@mui/lab/DateRangePicker/DateRangePickerView.js
init_extends();
init_objectWithoutPropertiesLoose();
var React90 = __toESM(require_react());
var import_prop_types32 = __toESM(require_prop_types());

// node_modules/@mui/lab/DateRangePicker/date-range-manager.js
function calculateRangeChange({
  utils,
  range,
  newDate: selectedDate,
  currentlySelectingRangeEnd
}) {
  const [start, end] = range;
  if (currentlySelectingRangeEnd === "start") {
    return Boolean(end) && utils.isAfter(selectedDate, end) ? {
      nextSelection: "end",
      newRange: [selectedDate, null]
    } : {
      nextSelection: "end",
      newRange: [selectedDate, end]
    };
  }
  return Boolean(start) && utils.isBefore(selectedDate, start) ? {
    nextSelection: "end",
    newRange: [selectedDate, null]
  } : {
    nextSelection: "start",
    newRange: [start, selectedDate]
  };
}
function calculateRangePreview(options) {
  if (!options.newDate) {
    return [null, null];
  }
  const [start, end] = options.range;
  const {
    newRange
  } = calculateRangeChange(options);
  if (!start || !end) {
    return newRange;
  }
  const [previewStart, previewEnd] = newRange;
  return options.currentlySelectingRangeEnd === "end" ? [end, previewEnd] : [previewStart, start];
}

// node_modules/@mui/lab/DateRangePicker/DateRangePickerToolbar.js
var React59 = __toESM(require_react());

// node_modules/@mui/lab/node_modules/@mui/base/utils/appendOwnerState.js
init_extends();

// node_modules/@mui/lab/node_modules/@mui/base/utils/isHostComponent.js
function isHostComponent(element) {
  return typeof element === "string";
}
var isHostComponent_default = isHostComponent;

// node_modules/@mui/lab/node_modules/@mui/base/utils/appendOwnerState.js
function appendOwnerState(elementType, existingProps = {}, ownerState) {
  if (isHostComponent_default(elementType)) {
    return existingProps;
  }
  return _extends({}, existingProps, {
    ownerState: _extends({}, existingProps.ownerState, ownerState)
  });
}

// node_modules/@mui/lab/node_modules/@mui/base/utils/areArraysEqual.js
function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
  return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));
}

// node_modules/@mui/lab/node_modules/@mui/base/utils/extractEventHandlers.js
function extractEventHandlers(object, excludeKeys = []) {
  if (object === void 0) {
    return {};
  }
  const result = {};
  Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
    result[prop] = object[prop];
  });
  return result;
}

// node_modules/@mui/lab/node_modules/@mui/base/AutocompleteUnstyled/useAutocomplete.js
init_extends();
var React11 = __toESM(require_react());
init_esm();
function stripDiacritics(string) {
  return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
}
function createFilterOptions(config = {}) {
  const {
    ignoreAccents = true,
    ignoreCase = true,
    limit,
    matchFrom = "any",
    stringify,
    trim = false
  } = config;
  return (options, {
    inputValue,
    getOptionLabel
  }) => {
    let input = trim ? inputValue.trim() : inputValue;
    if (ignoreCase) {
      input = input.toLowerCase();
    }
    if (ignoreAccents) {
      input = stripDiacritics(input);
    }
    const filteredOptions = options.filter((option) => {
      let candidate = (stringify || getOptionLabel)(option);
      if (ignoreCase) {
        candidate = candidate.toLowerCase();
      }
      if (ignoreAccents) {
        candidate = stripDiacritics(candidate);
      }
      return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
    });
    return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
  };
}
var defaultFilterOptions = createFilterOptions();

// node_modules/@mui/lab/node_modules/@mui/base/BadgeUnstyled/BadgeUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React12 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/lab/node_modules/@mui/base/composeClasses/composeClasses.js
function composeClasses(slots, getUtilityClass, classes8) {
  const output = {};
  Object.keys(slots).forEach((slot) => {
    output[slot] = slots[slot].reduce((acc, key) => {
      if (key) {
        if (classes8 && classes8[key]) {
          acc.push(classes8[key]);
        }
        acc.push(getUtilityClass(key));
      }
      return acc;
    }, []).join(" ");
  });
  return output;
}

// node_modules/@mui/lab/node_modules/@mui/base/BadgeUnstyled/useBadge.js
init_esm();
function useBadge(props) {
  const {
    anchorOrigin: anchorOriginProp = {
      vertical: "top",
      horizontal: "right"
    },
    badgeContent: badgeContentProp,
    invisible: invisibleProp = false,
    max: maxProp = 99,
    showZero = false,
    variant: variantProp = "standard"
  } = props;
  const prevProps = usePreviousProps_default({
    anchorOrigin: anchorOriginProp,
    badgeContent: badgeContentProp,
    max: maxProp,
    variant: variantProp
  });
  let invisible = invisibleProp;
  if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== "dot")) {
    invisible = true;
  }
  const {
    anchorOrigin = anchorOriginProp,
    badgeContent,
    max = maxProp,
    variant = variantProp
  } = invisible ? prevProps : props;
  let displayValue = "";
  if (variant !== "dot") {
    displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
  }
  return {
    anchorOrigin,
    badgeContent,
    invisible,
    max,
    variant,
    displayValue
  };
}

// node_modules/@mui/lab/node_modules/@mui/base/className/ClassNameGenerator.js
var defaultGenerator = (componentName) => componentName;
var createClassNameGenerator = () => {
  let generate = defaultGenerator;
  return {
    configure(generator) {
      generate = generator;
    },
    generate(componentName) {
      return generate(componentName);
    },
    reset() {
      generate = defaultGenerator;
    }
  };
};
var ClassNameGenerator = createClassNameGenerator();
var ClassNameGenerator_default = ClassNameGenerator;

// node_modules/@mui/lab/node_modules/@mui/base/generateUtilityClass/generateUtilityClass.js
var globalStateClassesMapping = {
  active: "Mui-active",
  checked: "Mui-checked",
  completed: "Mui-completed",
  disabled: "Mui-disabled",
  error: "Mui-error",
  expanded: "Mui-expanded",
  focused: "Mui-focused",
  focusVisible: "Mui-focusVisible",
  required: "Mui-required",
  selected: "Mui-selected"
};
function generateUtilityClass(componentName, slot) {
  const globalStateClass = globalStateClassesMapping[slot];
  return globalStateClass || `${ClassNameGenerator_default.generate(componentName)}-${slot}`;
}

// node_modules/@mui/lab/node_modules/@mui/base/generateUtilityClasses/generateUtilityClasses.js
function generateUtilityClasses(componentName, slots) {
  const result = {};
  slots.forEach((slot) => {
    result[slot] = generateUtilityClass(componentName, slot);
  });
  return result;
}

// node_modules/@mui/lab/node_modules/@mui/base/BadgeUnstyled/badgeUnstyledClasses.js
function getBadgeUtilityClass(slot) {
  return generateUtilityClass("MuiBadge", slot);
}
var badgeUnstyledClasses = generateUtilityClasses("MuiBadge", ["root", "badge", "dot", "standard", "anchorOriginTopLeft", "anchorOriginTopRight", "anchorOriginBottomLeft", "anchorOriginBottomRight", "invisible"]);

// node_modules/@mui/lab/node_modules/@mui/base/BadgeUnstyled/BadgeUnstyled.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var _excluded4 = ["anchorOrigin", "classes", "badgeContent", "component", "children", "className", "components", "componentsProps", "invisible", "max", "showZero", "variant"];
var useUtilityClasses = (ownerState) => {
  const {
    variant,
    anchorOrigin,
    invisible,
    classes: classes8
  } = ownerState;
  const slots = {
    root: ["root"],
    badge: ["badge", variant, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, invisible && "invisible"]
  };
  return composeClasses(slots, getBadgeUtilityClass, classes8);
};
var BadgeUnstyled = React12.forwardRef(function BadgeUnstyled2(props, ref) {
  const {
    anchorOrigin: anchorOriginProp = {
      vertical: "top",
      horizontal: "right"
    },
    classes: classesProp,
    component,
    children,
    className,
    components = {},
    componentsProps = {},
    max: maxProp = 99,
    showZero = false,
    variant: variantProp = "standard"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const {
    anchorOrigin,
    badgeContent,
    max,
    variant,
    displayValue,
    invisible
  } = useBadge(_extends({}, props, {
    anchorOrigin: anchorOriginProp,
    max: maxProp,
    variant: variantProp
  }));
  const ownerState = _extends({}, props, {
    anchorOrigin,
    badgeContent,
    classes: classesProp,
    invisible,
    max,
    variant,
    showZero
  });
  const classes8 = useUtilityClasses(ownerState);
  const Root = component || components.Root || "span";
  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);
  const Badge = components.Badge || "span";
  const badgeProps = appendOwnerState(Badge, componentsProps.badge, ownerState);
  return (0, import_jsx_runtime11.jsxs)(Root, _extends({}, rootProps, {
    ref
  }, other, {
    className: clsx_m_default(classes8.root, rootProps.className, className),
    children: [children, (0, import_jsx_runtime10.jsx)(Badge, _extends({}, badgeProps, {
      className: clsx_m_default(classes8.badge, badgeProps.className),
      children: displayValue
    }))]
  }));
});
true ? BadgeUnstyled.propTypes = {
  anchorOrigin: import_prop_types.default.shape({
    horizontal: import_prop_types.default.oneOf(["left", "right"]).isRequired,
    vertical: import_prop_types.default.oneOf(["bottom", "top"]).isRequired
  }),
  badgeContent: import_prop_types.default.node,
  children: import_prop_types.default.node,
  classes: import_prop_types.default.object,
  className: import_prop_types.default.string,
  component: import_prop_types.default.elementType,
  components: import_prop_types.default.shape({
    Badge: import_prop_types.default.elementType,
    Root: import_prop_types.default.elementType
  }),
  componentsProps: import_prop_types.default.shape({
    badge: import_prop_types.default.object,
    root: import_prop_types.default.object
  }),
  invisible: import_prop_types.default.bool,
  max: import_prop_types.default.number,
  showZero: import_prop_types.default.bool,
  variant: import_prop_types.default.string
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/ButtonUnstyled/ButtonUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React14 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/lab/node_modules/@mui/base/ButtonUnstyled/buttonUnstyledClasses.js
function getButtonUnstyledUtilityClass(slot) {
  return generateUtilityClass("ButtonUnstyled", slot);
}
var buttonUnstyledClasses = generateUtilityClasses("ButtonUnstyled", ["root", "active", "disabled", "focusVisible"]);

// node_modules/@mui/lab/node_modules/@mui/base/ButtonUnstyled/useButton.js
init_extends();
var React13 = __toESM(require_react());
init_esm();
function useButton(parameters) {
  const {
    component = "button",
    disabled = false,
    href,
    ref,
    tabIndex = 0,
    to,
    type
  } = parameters;
  const buttonRef = React13.useRef();
  const [active, setActive] = React13.useState(false);
  const {
    isFocusVisibleRef,
    onFocus: handleFocusVisible,
    onBlur: handleBlurVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [focusVisible, setFocusVisible] = React13.useState(false);
  if (disabled && focusVisible) {
    setFocusVisible(false);
  }
  React13.useEffect(() => {
    isFocusVisibleRef.current = focusVisible;
  }, [focusVisible, isFocusVisibleRef]);
  const createHandleMouseLeave = (otherHandlers) => (event) => {
    var _otherHandlers$onMous;
    if (focusVisible) {
      event.preventDefault();
    }
    (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
  };
  const createHandleBlur = (otherHandlers) => (event) => {
    var _otherHandlers$onBlur;
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(false);
    }
    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
  };
  const createHandleFocus = (otherHandlers) => (event) => {
    var _otherHandlers$onFocu2;
    if (!buttonRef.current) {
      buttonRef.current = event.currentTarget;
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      var _otherHandlers$onFocu;
      setFocusVisible(true);
      (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
    }
    (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu2.call(otherHandlers, event);
  };
  const isNonNativeButton = () => {
    const button = buttonRef.current;
    return component !== "button" && !((button == null ? void 0 : button.tagName) === "A" && button != null && button.href);
  };
  const createHandleClick = (otherHandlers) => (event) => {
    if (!disabled) {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
    }
  };
  const createHandleMouseDown = (otherHandlers) => (event) => {
    var _otherHandlers$onMous2;
    if (event.target === event.currentTarget && !disabled) {
      setActive(true);
    }
    (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
  };
  const createHandleMouseUp = (otherHandlers) => (event) => {
    var _otherHandlers$onMous3;
    if (event.target === event.currentTarget) {
      setActive(false);
    }
    (_otherHandlers$onMous3 = otherHandlers.onMouseUp) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
  };
  const createHandleKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
    if (event.defaultPrevented) {
      return;
    }
    if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
      event.preventDefault();
    }
    if (event.target === event.currentTarget && event.key === " " && !disabled) {
      setActive(true);
    }
    if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
      var _otherHandlers$onClic2;
      (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
      event.preventDefault();
    }
  };
  const createHandleKeyUp = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyU;
    if (event.target === event.currentTarget) {
      setActive(false);
    }
    (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);
    if (event.target === event.currentTarget && isNonNativeButton() && !disabled && event.key === " " && !event.defaultPrevented) {
      var _otherHandlers$onClic3;
      (_otherHandlers$onClic3 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic3.call(otherHandlers, event);
    }
  };
  const handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
  const handleRef = useForkRef(ref, handleOwnRef);
  const [hostElementName, setHostElementName] = React13.useState("");
  const updateRef = (instance) => {
    var _instance$tagName;
    setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : "");
    setRef(handleRef, instance);
  };
  const buttonProps = {};
  if (hostElementName === "BUTTON") {
    buttonProps.type = type != null ? type : "button";
    buttonProps.disabled = disabled;
  } else if (hostElementName !== "") {
    if (!href && !to) {
      buttonProps.role = "button";
    }
    if (disabled) {
      buttonProps["aria-disabled"] = disabled;
    }
  }
  const getRootProps = (otherHandlers = {}) => {
    const propsEventHandlers = extractEventHandlers(parameters);
    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
    delete externalEventHandlers.onFocusVisible;
    return _extends({
      tabIndex: disabled ? -1 : tabIndex,
      type
    }, externalEventHandlers, buttonProps, {
      onBlur: createHandleBlur(externalEventHandlers),
      onClick: createHandleClick(externalEventHandlers),
      onFocus: createHandleFocus(externalEventHandlers),
      onKeyDown: createHandleKeyDown(externalEventHandlers),
      onKeyUp: createHandleKeyUp(externalEventHandlers),
      onMouseDown: createHandleMouseDown(externalEventHandlers),
      onMouseLeave: createHandleMouseLeave(externalEventHandlers),
      onMouseUp: createHandleMouseUp(externalEventHandlers),
      ref: updateRef
    });
  };
  return {
    getRootProps,
    focusVisible,
    setFocusVisible,
    disabled,
    active
  };
}

// node_modules/@mui/lab/node_modules/@mui/base/ButtonUnstyled/ButtonUnstyled.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var _excluded5 = ["className", "component", "components", "componentsProps", "children", "disabled", "action", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseLeave"];
var useUtilityClasses2 = (ownerState) => {
  const {
    active,
    disabled,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active"]
  };
  return composeClasses(slots, getButtonUnstyledUtilityClass, {});
};
var ButtonUnstyled = React14.forwardRef(function ButtonUnstyled2(props, forwardedRef) {
  var _ref, _componentsProps$root;
  const {
    className,
    component,
    components = {},
    componentsProps = {},
    children,
    action
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const buttonRef = React14.useRef();
  const handleRef = useForkRef(buttonRef, forwardedRef);
  const ButtonRoot = (_ref = component != null ? component : components.Root) != null ? _ref : "button";
  const {
    active,
    focusVisible,
    setFocusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    component: ButtonRoot,
    ref: handleRef
  }));
  React14.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      buttonRef.current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    active,
    focusVisible
  });
  const classes8 = useUtilityClasses2(ownerState);
  const buttonRootProps = appendOwnerState(ButtonRoot, _extends({}, getRootProps(), other, componentsProps.root, {
    className: clsx_m_default(classes8.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
  }), ownerState);
  return (0, import_jsx_runtime12.jsx)(ButtonRoot, _extends({}, buttonRootProps, {
    children
  }));
});
true ? ButtonUnstyled.propTypes = {
  action: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.shape({
    current: import_prop_types2.default.shape({
      focusVisible: import_prop_types2.default.func.isRequired
    })
  })]),
  children: import_prop_types2.default.node,
  className: import_prop_types2.default.string,
  component: import_prop_types2.default.elementType,
  components: import_prop_types2.default.shape({
    Root: import_prop_types2.default.elementType
  }),
  componentsProps: import_prop_types2.default.shape({
    root: import_prop_types2.default.object
  }),
  disabled: import_prop_types2.default.bool,
  onFocusVisible: import_prop_types2.default.func
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js
var React15 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
init_esm();
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
function mapEventPropToEvent(eventProp) {
  return eventProp.substring(2).toLowerCase();
}
function clickedRootScrollbar2(event, doc) {
  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
function ClickAwayListener(props) {
  const {
    children,
    disableReactTree = false,
    mouseEvent = "onClick",
    onClickAway,
    touchEvent = "onTouchEnd"
  } = props;
  const movedRef = React15.useRef(false);
  const nodeRef = React15.useRef(null);
  const activatedRef = React15.useRef(false);
  const syntheticEventRef = React15.useRef(false);
  React15.useEffect(() => {
    setTimeout(() => {
      activatedRef.current = true;
    }, 0);
    return () => {
      activatedRef.current = false;
    };
  }, []);
  const handleRef = useForkRef(children.ref, nodeRef);
  const handleClickAway = useEventCallback((event) => {
    const insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    const doc = ownerDocument(nodeRef.current);
    if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar2(event, doc)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    let insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
    }
    if (!insideDOM && (disableReactTree || !insideReactTree)) {
      onClickAway(event);
    }
  });
  const createHandleSynthetic = (handlerName) => (event) => {
    syntheticEventRef.current = true;
    const childrenPropsHandler = children.props[handlerName];
    if (childrenPropsHandler) {
      childrenPropsHandler(event);
    }
  };
  const childrenProps = {
    ref: handleRef
  };
  if (touchEvent !== false) {
    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
  }
  React15.useEffect(() => {
    if (touchEvent !== false) {
      const mappedTouchEvent = mapEventPropToEvent(touchEvent);
      const doc = ownerDocument(nodeRef.current);
      const handleTouchMove = () => {
        movedRef.current = true;
      };
      doc.addEventListener(mappedTouchEvent, handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return () => {
        doc.removeEventListener(mappedTouchEvent, handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [handleClickAway, touchEvent]);
  if (mouseEvent !== false) {
    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
  }
  React15.useEffect(() => {
    if (mouseEvent !== false) {
      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
      const doc = ownerDocument(nodeRef.current);
      doc.addEventListener(mappedMouseEvent, handleClickAway);
      return () => {
        doc.removeEventListener(mappedMouseEvent, handleClickAway);
      };
    }
    return void 0;
  }, [handleClickAway, mouseEvent]);
  return (0, import_jsx_runtime13.jsx)(React15.Fragment, {
    children: React15.cloneElement(children, childrenProps)
  });
}
true ? ClickAwayListener.propTypes = {
  children: elementAcceptingRef_default.isRequired,
  disableReactTree: import_prop_types3.default.bool,
  mouseEvent: import_prop_types3.default.oneOf(["onClick", "onMouseDown", "onMouseUp", false]),
  onClickAway: import_prop_types3.default.func.isRequired,
  touchEvent: import_prop_types3.default.oneOf(["onTouchEnd", "onTouchStart", false])
} : void 0;
if (true) {
  ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
}

// node_modules/@mui/lab/node_modules/@mui/base/FormControlUnstyled/FormControlUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React17 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/lab/node_modules/@mui/base/FormControlUnstyled/FormControlContext.js
var React16 = __toESM(require_react());
var FormControlUnstyledContext = React16.createContext(void 0);
if (true) {
  FormControlUnstyledContext.displayName = "FormControlUnstyledContext";
}
var FormControlContext_default = FormControlUnstyledContext;

// node_modules/@mui/lab/node_modules/@mui/base/FormControlUnstyled/formControlUnstyledClasses.js
var formControlUnstyledClasses = generateUtilityClasses("MuiFormControl", ["root", "disabled"]);
var formControlUnstyledClasses_default = formControlUnstyledClasses;

// node_modules/@mui/lab/node_modules/@mui/base/FormControlUnstyled/FormControlUnstyled.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var _excluded6 = ["defaultValue", "children", "className", "component", "components", "componentsProps", "disabled", "error", "focused", "onChange", "required", "value"];
function hasValue(value) {
  return value != null && !(Array.isArray(value) && value.length === 0) && value !== "";
}
var FormControlUnstyled = React17.forwardRef(function FormControlUnstyled2(props, ref) {
  var _ref;
  const {
    defaultValue,
    children,
    className,
    component,
    components = {},
    componentsProps = {},
    disabled = false,
    error = false,
    focused: visuallyFocused,
    onChange,
    required = false,
    value: incomingValue
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const [value, setValue] = useControlled({
    controlled: incomingValue,
    default: defaultValue,
    name: "FormControl",
    state: "value"
  });
  const filled = hasValue(value);
  const [focusedState, setFocused] = React17.useState(false);
  if (disabled && focusedState) {
    setFocused(false);
  }
  const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
  const ownerState = _extends({}, props, {
    disabled,
    error,
    filled,
    focused,
    required
  });
  let registerEffect = () => {
  };
  if (true) {
    const registeredInput = React17.useRef(false);
    registerEffect = () => {
      if (registeredInput.current) {
        console.error(["MUI: There are multiple `Input` components inside a FormControl.", "This creates visual inconsistencies, only use one `Input`."].join("\n"));
      }
      registeredInput.current = true;
      return () => {
        registeredInput.current = false;
      };
    };
  }
  const handleChange = (event) => {
    setValue(event.target.value);
    onChange == null ? void 0 : onChange(event);
  };
  const childContext = {
    disabled,
    error,
    filled,
    focused,
    onBlur: () => {
      setFocused(false);
    },
    onChange: handleChange,
    onFocus: () => {
      setFocused(true);
    },
    registerEffect,
    required,
    value: value != null ? value : ""
  };
  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);
  return (0, import_jsx_runtime14.jsx)(FormControlContext_default.Provider, {
    value: childContext,
    children: (0, import_jsx_runtime14.jsx)(Root, _extends({
      ref
    }, rootProps, {
      className: clsx_m_default(formControlUnstyledClasses_default.root, className, rootProps == null ? void 0 : rootProps.className, disabled && formControlUnstyledClasses_default.disabled),
      children
    }))
  });
});
true ? FormControlUnstyled.propTypes = {
  children: import_prop_types4.default.node,
  className: import_prop_types4.default.string,
  component: import_prop_types4.default.elementType,
  components: import_prop_types4.default.shape({
    Root: import_prop_types4.default.elementType
  }),
  componentsProps: import_prop_types4.default.shape({
    root: import_prop_types4.default.object
  }),
  defaultValue: import_prop_types4.default.any,
  disabled: import_prop_types4.default.bool,
  error: import_prop_types4.default.bool,
  focused: import_prop_types4.default.bool,
  onChange: import_prop_types4.default.func,
  required: import_prop_types4.default.bool,
  value: import_prop_types4.default.any
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/FormControlUnstyled/useFormControl.js
var React18 = __toESM(require_react());
function useFormControlUnstyled() {
  return React18.useContext(FormControlContext_default);
}

// node_modules/@mui/lab/node_modules/@mui/base/InputUnstyled/InputUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React20 = __toESM(require_react());
init_clsx_m();
var import_prop_types5 = __toESM(require_prop_types());

// node_modules/@mui/lab/node_modules/@mui/base/InputUnstyled/inputUnstyledClasses.js
var inputBaseClasses = generateUtilityClasses("MuiInput", ["root", "formControl", "focused", "disabled", "error", "multiline", "input", "inputMultiline", "inputTypeSearch", "adornedStart", "adornedEnd"]);
var inputUnstyledClasses_default = inputBaseClasses;

// node_modules/@mui/lab/node_modules/@mui/base/InputUnstyled/useInput.js
init_extends();
init_esm();
var React19 = __toESM(require_react());
init_esm();
function useInput(props, inputRef) {
  const {
    defaultValue,
    disabled: disabledProp = false,
    error: errorProp = false,
    onBlur,
    onChange,
    onFocus,
    required: requiredProp = false,
    value: valueProp
  } = props;
  const formControlContext = useFormControlUnstyled();
  let value;
  let required;
  let disabled;
  let error;
  if (formControlContext) {
    var _formControlContext$d, _formControlContext$r, _formControlContext$e;
    value = formControlContext.value;
    disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
    required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
    error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
  } else {
    value = valueProp;
    disabled = disabledProp;
    required = requiredProp;
    error = errorProp;
  }
  const {
    current: isControlled
  } = React19.useRef(value != null);
  const handleInputRefWarning = React19.useCallback((instance) => {
    if (true) {
      if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
        console.error(["MUI: You have provided a `components.Input` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
      }
    }
  }, []);
  const internalInputRef = React19.useRef(null);
  const handleIncomingRef = useForkRef(inputRef, handleInputRefWarning);
  const handleInputRef = useForkRef(internalInputRef, handleIncomingRef);
  const [focused, setFocused] = React19.useState(false);
  React19.useEffect(() => {
    if (!formControlContext && disabled && focused) {
      setFocused(false);
      onBlur == null ? void 0 : onBlur();
    }
  }, [formControlContext, disabled, focused, onBlur]);
  const handleFocus = (otherHandlers) => (event) => {
    var _otherHandlers$onFocu;
    if (formControlContext != null && formControlContext.disabled) {
      event.stopPropagation();
      return;
    }
    (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
    if (formControlContext && formControlContext.onFocus) {
      var _formControlContext$o;
      formControlContext == null ? void 0 : (_formControlContext$o = formControlContext.onFocus) == null ? void 0 : _formControlContext$o.call(formControlContext);
    } else {
      setFocused(true);
    }
  };
  const handleBlur2 = (otherHandlers) => (event) => {
    var _otherHandlers$onBlur;
    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
    if (formControlContext && formControlContext.onBlur) {
      formControlContext.onBlur();
    } else {
      setFocused(false);
    }
  };
  const handleChange = (otherHandlers) => (event, ...args) => {
    var _formControlContext$o2, _otherHandlers$onChan;
    if (!isControlled) {
      const element = event.target || internalInputRef.current;
      if (element == null) {
        throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`components.Input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(17));
      }
    }
    formControlContext == null ? void 0 : (_formControlContext$o2 = formControlContext.onChange) == null ? void 0 : _formControlContext$o2.call(formControlContext, event);
    (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event, ...args);
  };
  const handleClick = (otherHandlers) => (event) => {
    var _otherHandlers$onClic;
    if (internalInputRef.current && event.currentTarget === event.target) {
      internalInputRef.current.focus();
    }
    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
  };
  const getRootProps = (externalProps) => {
    const propsEventHandlers = extractEventHandlers(props, ["onBlur", "onChange", "onFocus"]);
    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));
    return _extends({}, externalProps, externalEventHandlers, {
      onClick: handleClick(externalEventHandlers)
    });
  };
  const getInputProps = (externalProps) => {
    const propsEventHandlers = {
      onBlur,
      onChange,
      onFocus
    };
    const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));
    const mergedEventHandlers = _extends({}, externalProps, externalEventHandlers, {
      onBlur: handleBlur2(externalEventHandlers),
      onChange: handleChange(externalEventHandlers),
      onFocus: handleFocus(externalEventHandlers)
    });
    return _extends({}, mergedEventHandlers, {
      "aria-invalid": error || void 0,
      defaultValue,
      ref: handleInputRef,
      value,
      required,
      disabled
    });
  };
  return {
    disabled,
    error,
    focused,
    formControlContext,
    getInputProps,
    getRootProps,
    required,
    value
  };
}

// node_modules/@mui/lab/node_modules/@mui/base/InputUnstyled/InputUnstyled.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var _excluded7 = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "component", "components", "componentsProps", "defaultValue", "disabled", "endAdornment", "error", "id", "maxRows", "minRows", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "rows", "type", "startAdornment", "value"];
var InputUnstyled = React20.forwardRef(function InputUnstyled2(props, ref) {
  var _componentsProps$inpu, _ref, _componentsProps$root, _components$Input, _componentsProps$inpu2;
  const {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoComplete,
    autoFocus,
    className,
    component,
    components = {},
    componentsProps = {},
    defaultValue,
    disabled,
    endAdornment,
    error,
    id,
    maxRows,
    minRows,
    multiline = false,
    name,
    onClick,
    onChange,
    onKeyDown,
    onKeyUp,
    onFocus,
    onBlur,
    placeholder,
    readOnly,
    required,
    rows,
    type = "text",
    startAdornment,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const {
    getRootProps,
    getInputProps,
    focused,
    formControlContext,
    error: errorState,
    disabled: disabledState
  } = useInput({
    disabled,
    defaultValue,
    error,
    onBlur,
    onClick,
    onChange,
    onFocus,
    required,
    value
  }, (_componentsProps$inpu = componentsProps.input) == null ? void 0 : _componentsProps$inpu.ref);
  const ownerState = _extends({}, props, {
    disabled: disabledState,
    error: errorState,
    focused,
    formControlContext,
    multiline,
    type
  });
  const rootStateClasses = clsx_m_default(disabledState && inputUnstyledClasses_default.disabled, errorState && inputUnstyledClasses_default.error, focused && inputUnstyledClasses_default.focused, Boolean(formControlContext) && inputUnstyledClasses_default.formControl, multiline && inputUnstyledClasses_default.multiline, Boolean(startAdornment) && inputUnstyledClasses_default.adornedStart, Boolean(endAdornment) && inputUnstyledClasses_default.adornedEnd);
  const inputStateClasses = clsx_m_default(disabledState && inputUnstyledClasses_default.disabled, multiline && inputUnstyledClasses_default.multiline);
  const propsToForward = {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoComplete,
    autoFocus,
    id,
    onKeyDown,
    onKeyUp,
    name,
    placeholder,
    readOnly,
    type
  };
  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
  const rootProps = appendOwnerState(Root, _extends({}, getRootProps(_extends({}, other, componentsProps.root)), {
    className: clsx_m_default(inputUnstyledClasses_default.root, rootStateClasses, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
  }), ownerState);
  let Input = (_components$Input = components.Input) != null ? _components$Input : "input";
  let inputProps = appendOwnerState(Input, _extends({}, getInputProps(_extends({}, componentsProps.input, propsToForward)), {
    className: clsx_m_default(inputUnstyledClasses_default.input, inputStateClasses, (_componentsProps$inpu2 = componentsProps.input) == null ? void 0 : _componentsProps$inpu2.className)
  }), ownerState);
  if (multiline) {
    var _components$Textarea, _components$Textarea2;
    const hasHostTexarea = isHostComponent_default((_components$Textarea = components.Textarea) != null ? _components$Textarea : "textarea");
    if (rows) {
      if (true) {
        if (minRows || maxRows) {
          console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
        }
      }
      inputProps = _extends({
        type: void 0,
        minRows: hasHostTexarea ? void 0 : rows,
        maxRows: hasHostTexarea ? void 0 : rows
      }, inputProps, hasHostTexarea && {
        ownerState: void 0
      });
    } else {
      inputProps = _extends({
        type: void 0,
        maxRows: hasHostTexarea ? void 0 : maxRows,
        minRows: hasHostTexarea ? void 0 : minRows
      }, inputProps, hasHostTexarea && {
        ownerState: void 0
      });
    }
    Input = (_components$Textarea2 = components.Textarea) != null ? _components$Textarea2 : "textarea";
  }
  return (0, import_jsx_runtime16.jsxs)(Root, _extends({}, rootProps, {
    ref,
    children: [startAdornment, (0, import_jsx_runtime15.jsx)(Input, _extends({}, inputProps)), endAdornment]
  }));
});
true ? InputUnstyled.propTypes = {
  "aria-describedby": import_prop_types5.default.string,
  "aria-label": import_prop_types5.default.string,
  "aria-labelledby": import_prop_types5.default.string,
  autoComplete: import_prop_types5.default.string,
  autoFocus: import_prop_types5.default.bool,
  children: import_prop_types5.default.node,
  className: import_prop_types5.default.string,
  component: import_prop_types5.default.elementType,
  components: import_prop_types5.default.shape({
    Input: import_prop_types5.default.elementType,
    Root: import_prop_types5.default.elementType,
    Textarea: import_prop_types5.default.elementType
  }),
  componentsProps: import_prop_types5.default.shape({
    input: import_prop_types5.default.object,
    root: import_prop_types5.default.object
  }),
  defaultValue: import_prop_types5.default.any,
  disabled: import_prop_types5.default.bool,
  endAdornment: import_prop_types5.default.node,
  error: import_prop_types5.default.bool,
  id: import_prop_types5.default.string,
  maxRows: import_prop_types5.default.number,
  minRows: import_prop_types5.default.number,
  multiline: import_prop_types5.default.bool,
  name: import_prop_types5.default.string,
  onBlur: import_prop_types5.default.func,
  onChange: import_prop_types5.default.func,
  onClick: import_prop_types5.default.func,
  onFocus: import_prop_types5.default.func,
  onKeyDown: import_prop_types5.default.func,
  onKeyUp: import_prop_types5.default.func,
  placeholder: import_prop_types5.default.string,
  readOnly: import_prop_types5.default.bool,
  required: import_prop_types5.default.bool,
  rows: import_prop_types5.default.number,
  startAdornment: import_prop_types5.default.node,
  type: import_prop_types5.default.string,
  value: import_prop_types5.default.any
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/ListboxUnstyled/useListbox.js
init_extends();
var React22 = __toESM(require_react());
init_esm();

// node_modules/@mui/lab/node_modules/@mui/base/ListboxUnstyled/useListbox.types.js
var ActionTypes;
(function(ActionTypes2) {
  ActionTypes2["blur"] = "blur";
  ActionTypes2["focus"] = "focus";
  ActionTypes2["keyDown"] = "keyDown";
  ActionTypes2["optionClick"] = "optionClick";
  ActionTypes2["optionHover"] = "optionHover";
  ActionTypes2["optionsChange"] = "optionsChange";
  ActionTypes2["setValue"] = "setValue";
  ActionTypes2["setHighlight"] = "setHighlight";
})(ActionTypes || (ActionTypes = {}));

// node_modules/@mui/lab/node_modules/@mui/base/ListboxUnstyled/defaultListboxReducer.js
init_extends();
var pageSize = 5;
function findValidOptionToHighlight(index, lookupDirection, options, focusDisabled, isOptionDisabled, wrapAround) {
  if (options.length === 0 || options.every((o, i) => isOptionDisabled(o, i))) {
    return -1;
  }
  let nextFocus = index;
  for (; ; ) {
    if (!wrapAround && lookupDirection === "next" && nextFocus === options.length || !wrapAround && lookupDirection === "previous" && nextFocus === -1) {
      return -1;
    }
    const nextFocusDisabled = focusDisabled ? false : isOptionDisabled(options[nextFocus], nextFocus);
    if (nextFocusDisabled) {
      nextFocus += lookupDirection === "next" ? 1 : -1;
      if (wrapAround) {
        nextFocus = (nextFocus + options.length) % options.length;
      }
    } else {
      return nextFocus;
    }
  }
}
function getNewHighlightedOption(options, previouslyHighlightedOption, diff, lookupDirection, highlightDisabled, isOptionDisabled, wrapAround, optionComparer) {
  var _options$nextIndex;
  const maxIndex = options.length - 1;
  const defaultHighlightedIndex = -1;
  let nextIndexCandidate;
  const previouslyHighlightedIndex = previouslyHighlightedOption == null ? -1 : options.findIndex((option) => optionComparer(option, previouslyHighlightedOption));
  if (diff === "reset") {
    var _options$defaultHighl;
    return defaultHighlightedIndex === -1 ? null : (_options$defaultHighl = options[defaultHighlightedIndex]) != null ? _options$defaultHighl : null;
  }
  if (diff === "start") {
    nextIndexCandidate = 0;
  } else if (diff === "end") {
    nextIndexCandidate = maxIndex;
  } else {
    const newIndex = previouslyHighlightedIndex + diff;
    if (newIndex < 0) {
      if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(diff) > 1) {
        nextIndexCandidate = 0;
      } else {
        nextIndexCandidate = maxIndex;
      }
    } else if (newIndex > maxIndex) {
      if (!wrapAround || Math.abs(diff) > 1) {
        nextIndexCandidate = maxIndex;
      } else {
        nextIndexCandidate = 0;
      }
    } else {
      nextIndexCandidate = newIndex;
    }
  }
  const nextIndex = findValidOptionToHighlight(nextIndexCandidate, lookupDirection, options, highlightDisabled, isOptionDisabled, wrapAround);
  return (_options$nextIndex = options[nextIndex]) != null ? _options$nextIndex : null;
}
function handleOptionSelection(option, state, props) {
  const {
    multiple,
    optionComparer = (o, v) => o === v,
    isOptionDisabled = () => false
  } = props;
  const {
    selectedValue
  } = state;
  const optionIndex = props.options.indexOf(option);
  if (isOptionDisabled(option, optionIndex)) {
    return state;
  }
  if (multiple) {
    var _ref, _ref2;
    const selectedValues = (_ref = selectedValue) != null ? _ref : [];
    const newSelectedValues = selectedValues.some((sv) => optionComparer(sv, option)) ? selectedValue.filter((v) => !optionComparer(v, option)) : [...(_ref2 = selectedValue) != null ? _ref2 : [], option];
    return {
      selectedValue: newSelectedValues,
      highlightedValue: option
    };
  }
  if (selectedValue != null && optionComparer(option, selectedValue)) {
    return state;
  }
  return {
    selectedValue: option,
    highlightedValue: option
  };
}
function handleKeyDown(event, state, props) {
  const {
    options,
    isOptionDisabled,
    disableListWrap,
    disabledItemsFocusable,
    optionComparer
  } = props;
  const moveHighlight = (diff, direction, wrapAround) => {
    return getNewHighlightedOption(options, state.highlightedValue, diff, direction, disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, wrapAround, optionComparer);
  };
  switch (event.key) {
    case "Home":
      return _extends({}, state, {
        highlightedValue: moveHighlight("start", "next", false)
      });
    case "End":
      return _extends({}, state, {
        highlightedValue: moveHighlight("end", "previous", false)
      });
    case "PageUp":
      return _extends({}, state, {
        highlightedValue: moveHighlight(-pageSize, "previous", false)
      });
    case "PageDown":
      return _extends({}, state, {
        highlightedValue: moveHighlight(pageSize, "next", false)
      });
    case "ArrowUp":
      return _extends({}, state, {
        highlightedValue: moveHighlight(-1, "previous", !(disableListWrap != null ? disableListWrap : false))
      });
    case "ArrowDown":
      return _extends({}, state, {
        highlightedValue: moveHighlight(1, "next", !(disableListWrap != null ? disableListWrap : false))
      });
    case "Enter":
    case " ":
      if (state.highlightedValue === null) {
        return state;
      }
      return handleOptionSelection(state.highlightedValue, state, props);
    default:
      break;
  }
  return state;
}
function handleBlur(state) {
  return _extends({}, state, {
    highlightedValue: null
  });
}
function handleOptionsChange(options, previousOptions, state, props) {
  var _options$find, _options$find2;
  const {
    multiple,
    optionComparer
  } = props;
  const newHighlightedOption = state.highlightedValue == null ? null : (_options$find = options.find((option) => optionComparer(option, state.highlightedValue))) != null ? _options$find : null;
  if (multiple) {
    var _ref3;
    const selectedValues = (_ref3 = state.selectedValue) != null ? _ref3 : [];
    const newSelectedValues = selectedValues.filter((selectedValue) => options.some((option) => optionComparer(option, selectedValue)));
    return {
      highlightedValue: newHighlightedOption,
      selectedValue: newSelectedValues
    };
  }
  const newSelectedValue = (_options$find2 = options.find((option) => optionComparer(option, state.selectedValue))) != null ? _options$find2 : null;
  return {
    highlightedValue: newHighlightedOption,
    selectedValue: newSelectedValue
  };
}
function defaultListboxReducer(state, action) {
  const {
    type
  } = action;
  switch (type) {
    case ActionTypes.keyDown:
      return handleKeyDown(action.event, state, action.props);
    case ActionTypes.optionClick:
      return handleOptionSelection(action.option, state, action.props);
    case ActionTypes.blur:
      return handleBlur(state);
    case ActionTypes.setValue:
      return _extends({}, state, {
        selectedValue: action.value
      });
    case ActionTypes.setHighlight:
      return _extends({}, state, {
        highlightedValue: action.highlight
      });
    case ActionTypes.optionsChange:
      return handleOptionsChange(action.options, action.previousOptions, state, action.props);
    default:
      return state;
  }
}

// node_modules/@mui/lab/node_modules/@mui/base/ListboxUnstyled/useControllableReducer.js
var React21 = __toESM(require_react());
init_esm();
function useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {
  const valueRef = React21.useRef(value);
  valueRef.current = value;
  const onValueChangeRef = React21.useRef(onValueChange);
  React21.useEffect(() => {
    onValueChangeRef.current = onValueChange;
  }, [onValueChange]);
  const onHighlightChangeRef = React21.useRef(onHighlightChange);
  React21.useEffect(() => {
    onHighlightChangeRef.current = onHighlightChange;
  }, [onHighlightChange]);
  React21.useEffect(() => {
    if (Array.isArray(state.selectedValue)) {
      if (areArraysEqual(state.selectedValue, valueRef.current)) {
        return;
      }
    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {
      return;
    }
    setValueState(state.selectedValue);
    if (state.selectedValue != null) {
      var _onValueChangeRef$cur;
      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);
    }
  }, [state.selectedValue, setValueState, optionComparer]);
  React21.useEffect(() => {
    var _onHighlightChangeRef;
    (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, state.highlightedValue);
  }, [state.highlightedValue]);
}
function useControllableReducer(internalReducer, externalReducer, props) {
  const {
    value: controlledValue,
    defaultValue,
    onChange: onValueChange,
    onHighlightChange,
    options,
    optionComparer
  } = props;
  const propsRef = React21.useRef(props);
  propsRef.current = props;
  const [value, setValueState] = useControlled({
    controlled: controlledValue,
    default: defaultValue,
    name: "useListbox"
  });
  const previousValueRef = React21.useRef(null);
  const [state, dispatch] = React21.useReducer(externalReducer != null ? externalReducer : internalReducer, {
    highlightedValue: null,
    selectedValue: value
  });
  const optionComparerRef = React21.useRef(optionComparer);
  optionComparerRef.current = optionComparer;
  React21.useEffect(() => {
    if (controlledValue === void 0) {
      return;
    }
    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && areArraysEqual(previousValueRef.current, controlledValue, optionComparerRef.current)) {
      return;
    }
    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {
      return;
    }
    previousValueRef.current = controlledValue;
    dispatch({
      type: ActionTypes.setValue,
      value: controlledValue
    });
  }, [controlledValue]);
  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);
  return [state, dispatch];
}

// node_modules/@mui/lab/node_modules/@mui/base/ListboxUnstyled/useListbox.js
var defaultOptionComparer = (optionA, optionB) => optionA === optionB;
var defaultIsOptionDisabled = () => false;
function useListbox(props) {
  var _props$optionIdGenera, _options$highlightedI;
  const {
    disabledItemsFocusable = false,
    disableListWrap = false,
    focusManagement = "activeDescendant",
    id: idProp,
    isOptionDisabled = defaultIsOptionDisabled,
    listboxRef: externalListboxRef,
    multiple = false,
    optionComparer = defaultOptionComparer,
    options,
    stateReducer: externalReducer
  } = props;
  const id = useId(idProp);
  function defaultIdGenerator(_, index) {
    return `${id}-option-${index}`;
  }
  const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;
  const propsWithDefaults = _extends({}, props, {
    disabledItemsFocusable,
    disableListWrap,
    focusManagement,
    isOptionDisabled,
    multiple,
    optionComparer
  });
  const listboxRef = React22.useRef(null);
  const handleRef = useForkRef(externalListboxRef, listboxRef);
  const [{
    highlightedValue,
    selectedValue
  }, dispatch] = useControllableReducer(defaultListboxReducer, externalReducer, propsWithDefaults);
  const highlightedIndex = React22.useMemo(() => {
    return highlightedValue == null ? -1 : options.findIndex((option) => optionComparer(option, highlightedValue));
  }, [highlightedValue, options, optionComparer]);
  const previousOptions = React22.useRef([]);
  React22.useEffect(() => {
    if (areArraysEqual(previousOptions.current, options, optionComparer)) {
      return;
    }
    dispatch({
      type: ActionTypes.optionsChange,
      options,
      previousOptions: previousOptions.current,
      props: propsWithDefaults
    });
    previousOptions.current = options;
  }, [options, optionComparer, dispatch]);
  const setSelectedValue = React22.useCallback((option) => {
    dispatch({
      type: ActionTypes.setValue,
      value: option
    });
  }, [dispatch]);
  const setHighlightedValue = React22.useCallback((option) => {
    dispatch({
      type: ActionTypes.setHighlight,
      highlight: option
    });
  }, [dispatch]);
  const createHandleOptionClick = (option, other) => (event) => {
    var _other$onClick;
    (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);
    if (event.defaultPrevented) {
      return;
    }
    event.preventDefault();
    dispatch({
      type: ActionTypes.optionClick,
      option,
      event,
      props: propsWithDefaults
    });
  };
  const createHandleOptionMouseOver = (option, other) => (event) => {
    var _other$onMouseOver;
    (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);
    if (event.defaultPrevented) {
      return;
    }
    dispatch({
      type: ActionTypes.optionHover,
      option,
      event,
      props: propsWithDefaults
    });
  };
  const createHandleKeyDown = (other) => (event) => {
    var _other$onKeyDown;
    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);
    if (event.defaultPrevented) {
      return;
    }
    const keysToPreventDefault = [" ", "Enter", "ArrowUp", "ArrowDown", "Home", "End", "PageUp", "PageDown"];
    if (keysToPreventDefault.includes(event.key)) {
      event.preventDefault();
    }
    dispatch({
      type: ActionTypes.keyDown,
      event,
      props: propsWithDefaults
    });
  };
  const createHandleBlur = (other) => (event) => {
    var _other$onBlur, _listboxRef$current;
    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);
    if (event.defaultPrevented) {
      return;
    }
    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {
      return;
    }
    dispatch({
      type: ActionTypes.blur,
      event,
      props: propsWithDefaults
    });
  };
  const getRootProps = (otherHandlers = {}) => {
    return _extends({}, otherHandlers, {
      "aria-activedescendant": focusManagement === "activeDescendant" && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : void 0,
      id,
      onBlur: createHandleBlur(otherHandlers),
      onKeyDown: createHandleKeyDown(otherHandlers),
      role: "listbox",
      tabIndex: focusManagement === "DOM" ? -1 : 0,
      ref: handleRef
    });
  };
  const getOptionState = (option) => {
    let selected;
    const index = options.findIndex((opt) => optionComparer(opt, option));
    if (multiple) {
      var _ref;
      selected = ((_ref = selectedValue) != null ? _ref : []).some((value) => value != null && optionComparer(option, value));
    } else {
      selected = optionComparer(option, selectedValue);
    }
    const disabled = isOptionDisabled(option, index);
    return {
      selected,
      disabled,
      highlighted: highlightedIndex === index
    };
  };
  const getOptionTabIndex = (optionState) => {
    if (focusManagement === "activeDescendant") {
      return void 0;
    }
    if (!optionState.highlighted) {
      return -1;
    }
    if (optionState.disabled && !disabledItemsFocusable) {
      return -1;
    }
    return 0;
  };
  const getOptionProps = (option, otherHandlers = {}) => {
    const optionState = getOptionState(option);
    const index = options.findIndex((opt) => optionComparer(opt, option));
    return _extends({}, otherHandlers, {
      "aria-disabled": optionState.disabled || void 0,
      "aria-selected": optionState.selected,
      tabIndex: getOptionTabIndex(optionState),
      id: optionIdGenerator(option, index),
      onClick: createHandleOptionClick(option, otherHandlers),
      onMouseOver: createHandleOptionMouseOver(option, otherHandlers),
      role: "option"
    });
  };
  React22.useDebugValue({
    highlightedOption: options[highlightedIndex],
    selectedOption: selectedValue
  });
  return {
    getRootProps,
    getOptionProps,
    getOptionState,
    highlightedOption: (_options$highlightedI = options[highlightedIndex]) != null ? _options$highlightedI : null,
    selectedOption: selectedValue,
    setSelectedValue,
    setHighlightedValue
  };
}

// node_modules/@mui/lab/node_modules/@mui/base/MenuUnstyled/MenuUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React27 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/lab/node_modules/@mui/base/MenuUnstyled/MenuUnstyledContext.js
var React23 = __toESM(require_react());
var MenuUnstyledContext = React23.createContext(null);
MenuUnstyledContext.displayName = "MenuUnstyledContext";
var MenuUnstyledContext_default = MenuUnstyledContext;

// node_modules/@mui/lab/node_modules/@mui/base/MenuUnstyled/menuUnstyledClasses.js
function getMenuUnstyledUtilityClass(slot) {
  return generateUtilityClass("MuiMenuUnstyled", slot);
}
var menuUnstyledClasses = generateUtilityClasses("MuiMenuUnstyled", ["root", "listbox", "expanded"]);

// node_modules/@mui/lab/node_modules/@mui/base/MenuUnstyled/useMenu.js
init_extends();
var React24 = __toESM(require_react());
init_esm();
function stateReducer(state, action) {
  if (action.type === ActionTypes.blur || action.type === ActionTypes.optionHover || action.type === ActionTypes.setValue) {
    return state;
  }
  const newState = defaultListboxReducer(state, action);
  if (action.type !== ActionTypes.setHighlight && newState.highlightedValue === null && action.props.options.length > 0) {
    return _extends({}, newState, {
      highlightedValue: action.props.options[0]
    });
  }
  return newState;
}
function useMenu(parameters) {
  const {
    listboxRef: listboxRefProp,
    open = false,
    onClose,
    listboxId
  } = parameters;
  const [menuItems, setMenuItems] = React24.useState({});
  const listboxRef = React24.useRef(null);
  const handleRef = useForkRef(listboxRef, listboxRefProp);
  const registerItem = React24.useCallback((id, metadata) => {
    setMenuItems((previousState) => {
      const newState = _extends({}, previousState);
      newState[id] = metadata;
      return newState;
    });
  }, []);
  const unregisterItem = React24.useCallback((id) => {
    setMenuItems((previousState) => {
      const newState = _extends({}, previousState);
      delete newState[id];
      return newState;
    });
  }, []);
  const {
    getOptionState,
    getOptionProps,
    getRootProps,
    highlightedOption,
    setHighlightedValue: setListboxHighlight
  } = useListbox({
    options: Object.keys(menuItems),
    isOptionDisabled: (id) => {
      var _menuItems$id;
      return (menuItems == null ? void 0 : (_menuItems$id = menuItems[id]) == null ? void 0 : _menuItems$id.disabled) || false;
    },
    listboxRef: handleRef,
    focusManagement: "DOM",
    id: listboxId,
    stateReducer,
    disabledItemsFocusable: true
  });
  const highlightFirstItem = React24.useCallback(() => {
    if (Object.keys(menuItems).length > 0) {
      setListboxHighlight(menuItems[Object.keys(menuItems)[0]].id);
    }
  }, [menuItems, setListboxHighlight]);
  const highlightLastItem = React24.useCallback(() => {
    if (Object.keys(menuItems).length > 0) {
      setListboxHighlight(menuItems[Object.keys(menuItems)[Object.keys(menuItems).length - 1]].id);
    }
  }, [menuItems, setListboxHighlight]);
  React24.useEffect(() => {
    if (!open) {
      highlightFirstItem();
    }
  }, [open, highlightFirstItem]);
  const createHandleKeyDown = (otherHandlers) => (e) => {
    var _otherHandlers$onKeyD;
    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, e);
    if (e.defaultPrevented) {
      return;
    }
    if (e.key === "Escape" && open) {
      onClose == null ? void 0 : onClose();
    }
  };
  const createHandleBlur = (otherHandlers) => (e) => {
    var _listboxRef$current;
    otherHandlers == null ? void 0 : otherHandlers.onBlur(e);
    if (!((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(e.relatedTarget))) {
      onClose == null ? void 0 : onClose();
    }
  };
  React24.useEffect(() => {
    var _listboxRef$current2;
    if ((_listboxRef$current2 = listboxRef.current) != null && _listboxRef$current2.contains(document.activeElement) && highlightedOption !== null) {
      var _menuItems$highlighte, _menuItems$highlighte2;
      menuItems == null ? void 0 : (_menuItems$highlighte = menuItems[highlightedOption]) == null ? void 0 : (_menuItems$highlighte2 = _menuItems$highlighte.ref.current) == null ? void 0 : _menuItems$highlighte2.focus();
    }
  }, [highlightedOption, menuItems]);
  const getListboxProps = (otherHandlers) => _extends({}, otherHandlers, getRootProps(_extends({}, otherHandlers, {
    onBlur: createHandleBlur(otherHandlers),
    onKeyDown: createHandleKeyDown(otherHandlers)
  })), {
    role: "menu"
  });
  const getItemState = (id) => {
    const {
      disabled,
      highlighted
    } = getOptionState(id);
    return {
      disabled,
      highlighted
    };
  };
  React24.useDebugValue({
    menuItems,
    highlightedOption
  });
  return {
    registerItem,
    unregisterItem,
    menuItems,
    getListboxProps,
    getItemState,
    getItemProps: getOptionProps,
    highlightedOption,
    highlightFirstItem,
    highlightLastItem
  };
}

// node_modules/@mui/lab/node_modules/@mui/base/PopperUnstyled/PopperUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
init_esm();
init_lib();
var import_prop_types7 = __toESM(require_prop_types());
var React26 = __toESM(require_react());

// node_modules/@mui/lab/node_modules/@mui/base/Portal/Portal.js
var React25 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());
var import_prop_types6 = __toESM(require_prop_types());
init_esm();
function getContainer(container) {
  return typeof container === "function" ? container() : container;
}
var Portal = React25.forwardRef(function Portal2(props, ref) {
  const {
    children,
    container,
    disablePortal = false
  } = props;
  const [mountNode, setMountNode] = React25.useState(null);
  const handleRef = useForkRef(React25.isValidElement(children) ? children.ref : null, ref);
  useEnhancedEffect_default(() => {
    if (!disablePortal) {
      setMountNode(getContainer(container) || document.body);
    }
  }, [container, disablePortal]);
  useEnhancedEffect_default(() => {
    if (mountNode && !disablePortal) {
      setRef(ref, mountNode);
      return () => {
        setRef(ref, null);
      };
    }
    return void 0;
  }, [ref, mountNode, disablePortal]);
  if (disablePortal) {
    if (React25.isValidElement(children)) {
      return React25.cloneElement(children, {
        ref: handleRef
      });
    }
    return children;
  }
  return mountNode ? ReactDOM.createPortal(children, mountNode) : mountNode;
});
true ? Portal.propTypes = {
  children: import_prop_types6.default.node,
  container: import_prop_types6.default.oneOfType([HTMLElementType, import_prop_types6.default.func]),
  disablePortal: import_prop_types6.default.bool
} : void 0;
if (true) {
  Portal["propTypes"] = exactProp(Portal.propTypes);
}
var Portal_default = Portal;

// node_modules/@mui/lab/node_modules/@mui/base/PopperUnstyled/PopperUnstyled.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var _excluded8 = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "ownerState", "placement", "popperOptions", "popperRef", "TransitionProps"];
var _excluded22 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"];
function flipPlacement(placement, direction) {
  if (direction === "ltr") {
    return placement;
  }
  switch (placement) {
    case "bottom-end":
      return "bottom-start";
    case "bottom-start":
      return "bottom-end";
    case "top-end":
      return "top-start";
    case "top-start":
      return "top-end";
    default:
      return placement;
  }
}
function resolveAnchorEl(anchorEl) {
  return typeof anchorEl === "function" ? anchorEl() : anchorEl;
}
var defaultPopperOptions = {};
var PopperTooltip = React26.forwardRef(function PopperTooltip2(props, ref) {
  const {
    anchorEl,
    children,
    direction,
    disablePortal,
    modifiers,
    open,
    placement: initialPlacement,
    popperOptions,
    popperRef: popperRefProp,
    TransitionProps
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  const tooltipRef = React26.useRef(null);
  const ownRef = useForkRef(tooltipRef, ref);
  const popperRef = React26.useRef(null);
  const handlePopperRef = useForkRef(popperRef, popperRefProp);
  const handlePopperRefRef = React26.useRef(handlePopperRef);
  useEnhancedEffect_default(() => {
    handlePopperRefRef.current = handlePopperRef;
  }, [handlePopperRef]);
  React26.useImperativeHandle(popperRefProp, () => popperRef.current, []);
  const rtlPlacement = flipPlacement(initialPlacement, direction);
  const [placement, setPlacement] = React26.useState(rtlPlacement);
  React26.useEffect(() => {
    if (popperRef.current) {
      popperRef.current.forceUpdate();
    }
  });
  useEnhancedEffect_default(() => {
    if (!anchorEl || !open) {
      return void 0;
    }
    const handlePopperUpdate = (data) => {
      setPlacement(data.placement);
    };
    const resolvedAnchorEl = resolveAnchorEl(anchorEl);
    if (true) {
      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
        const box = resolvedAnchorEl.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
    }
    let popperModifiers = [{
      name: "preventOverflow",
      options: {
        altBoundary: disablePortal
      }
    }, {
      name: "flip",
      options: {
        altBoundary: disablePortal
      }
    }, {
      name: "onUpdate",
      enabled: true,
      phase: "afterWrite",
      fn: ({
        state
      }) => {
        handlePopperUpdate(state);
      }
    }];
    if (modifiers != null) {
      popperModifiers = popperModifiers.concat(modifiers);
    }
    if (popperOptions && popperOptions.modifiers != null) {
      popperModifiers = popperModifiers.concat(popperOptions.modifiers);
    }
    const popper = createPopper(resolveAnchorEl(anchorEl), tooltipRef.current, _extends({
      placement: rtlPlacement
    }, popperOptions, {
      modifiers: popperModifiers
    }));
    handlePopperRefRef.current(popper);
    return () => {
      popper.destroy();
      handlePopperRefRef.current(null);
    };
  }, [anchorEl, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
  const childProps = {
    placement
  };
  if (TransitionProps !== null) {
    childProps.TransitionProps = TransitionProps;
  }
  return (0, import_jsx_runtime17.jsx)("div", _extends({
    ref: ownRef,
    role: "tooltip"
  }, other, {
    children: typeof children === "function" ? children(childProps) : children
  }));
});
var PopperUnstyled = React26.forwardRef(function PopperUnstyled2(props, ref) {
  const {
    anchorEl,
    children,
    container: containerProp,
    direction = "ltr",
    disablePortal = false,
    keepMounted = false,
    modifiers,
    open,
    placement = "bottom",
    popperOptions = defaultPopperOptions,
    popperRef,
    style,
    transition = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded22);
  const [exited, setExited] = React26.useState(true);
  const handleEnter = () => {
    setExited(false);
  };
  const handleExited = () => {
    setExited(true);
  };
  if (!keepMounted && !open && (!transition || exited)) {
    return null;
  }
  const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : void 0);
  return (0, import_jsx_runtime17.jsx)(Portal_default, {
    disablePortal,
    container,
    children: (0, import_jsx_runtime17.jsx)(PopperTooltip, _extends({
      anchorEl,
      direction,
      disablePortal,
      modifiers,
      ref,
      open: transition ? !exited : open,
      placement,
      popperOptions,
      popperRef
    }, other, {
      style: _extends({
        position: "fixed",
        top: 0,
        left: 0,
        display: !open && keepMounted && (!transition || exited) ? "none" : null
      }, style),
      TransitionProps: transition ? {
        in: open,
        onEnter: handleEnter,
        onExited: handleExited
      } : null,
      children
    }))
  });
});
true ? PopperUnstyled.propTypes = {
  anchorEl: chainPropTypes(import_prop_types7.default.oneOfType([HTMLElementType, import_prop_types7.default.object, import_prop_types7.default.func]), (props) => {
    if (props.open) {
      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
        const box = resolvedAnchorEl.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
      }
    }
    return null;
  }),
  children: import_prop_types7.default.oneOfType([import_prop_types7.default.node, import_prop_types7.default.func]),
  container: import_prop_types7.default.oneOfType([HTMLElementType, import_prop_types7.default.func]),
  direction: import_prop_types7.default.oneOf(["ltr", "rtl"]),
  disablePortal: import_prop_types7.default.bool,
  keepMounted: import_prop_types7.default.bool,
  modifiers: import_prop_types7.default.arrayOf(import_prop_types7.default.shape({
    data: import_prop_types7.default.object,
    effect: import_prop_types7.default.func,
    enabled: import_prop_types7.default.bool,
    fn: import_prop_types7.default.func,
    name: import_prop_types7.default.any,
    options: import_prop_types7.default.object,
    phase: import_prop_types7.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: import_prop_types7.default.arrayOf(import_prop_types7.default.string),
    requiresIfExists: import_prop_types7.default.arrayOf(import_prop_types7.default.string)
  })),
  open: import_prop_types7.default.bool.isRequired,
  placement: import_prop_types7.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  popperOptions: import_prop_types7.default.shape({
    modifiers: import_prop_types7.default.array,
    onFirstUpdate: import_prop_types7.default.func,
    placement: import_prop_types7.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: import_prop_types7.default.oneOf(["absolute", "fixed"])
  }),
  popperRef: refType_default,
  style: import_prop_types7.default.object,
  transition: import_prop_types7.default.bool
} : void 0;
var PopperUnstyled_default = PopperUnstyled;

// node_modules/@mui/lab/node_modules/@mui/base/MenuUnstyled/MenuUnstyled.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var _excluded9 = ["actions", "anchorEl", "children", "className", "component", "components", "componentsProps", "onClose", "open"];
function getUtilityClasses(ownerState) {
  const {
    open
  } = ownerState;
  const slots = {
    root: ["root", open && "expanded"],
    listbox: ["listbox", open && "expanded"]
  };
  return composeClasses(slots, getMenuUnstyledUtilityClass, {});
}
var MenuUnstyled = React27.forwardRef(function MenuUnstyled2(props, forwardedRef) {
  var _componentsProps$list, _componentsProps$list2, _ref, _componentsProps$root, _components$Listbox, _componentsProps$list3;
  const {
    actions,
    anchorEl,
    children,
    className,
    component,
    components = {},
    componentsProps = {},
    onClose,
    open = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
  const {
    registerItem,
    unregisterItem,
    getListboxProps,
    getItemProps,
    getItemState,
    highlightFirstItem,
    highlightLastItem
  } = useMenu({
    open,
    onClose,
    listboxRef: (_componentsProps$list = componentsProps.listbox) == null ? void 0 : _componentsProps$list.ref,
    listboxId: (_componentsProps$list2 = componentsProps.listbox) == null ? void 0 : _componentsProps$list2.id
  });
  React27.useImperativeHandle(actions, () => ({
    highlightFirstItem,
    highlightLastItem
  }), [highlightFirstItem, highlightLastItem]);
  const ownerState = _extends({}, props, {
    open
  });
  const classes8 = getUtilityClasses(ownerState);
  const Popper = (_ref = component != null ? component : components.Root) != null ? _ref : PopperUnstyled_default;
  const popperProps = appendOwnerState(Popper, _extends({}, other, {
    anchorEl,
    open,
    keepMounted: true,
    role: void 0
  }, componentsProps.root, {
    className: clsx_m_default(classes8.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
  }), ownerState);
  const Listbox = (_components$Listbox = components.Listbox) != null ? _components$Listbox : "ul";
  const listboxProps = appendOwnerState(Listbox, _extends({}, componentsProps.listbox, getListboxProps(), {
    className: clsx_m_default(classes8.listbox, (_componentsProps$list3 = componentsProps.listbox) == null ? void 0 : _componentsProps$list3.className)
  }), ownerState);
  const contextValue = {
    registerItem,
    unregisterItem,
    getItemState,
    getItemProps,
    open
  };
  return (0, import_jsx_runtime18.jsx)(Popper, _extends({}, popperProps, {
    ref: forwardedRef,
    children: (0, import_jsx_runtime18.jsx)(Listbox, _extends({}, listboxProps, {
      children: (0, import_jsx_runtime18.jsx)(MenuUnstyledContext_default.Provider, {
        value: contextValue,
        children
      })
    }))
  }));
});
true ? MenuUnstyled.propTypes = {
  actions: refType_default,
  anchorEl: import_prop_types8.default.oneOfType([HTMLElementType, import_prop_types8.default.object, import_prop_types8.default.func]),
  children: import_prop_types8.default.node,
  className: import_prop_types8.default.string,
  component: import_prop_types8.default.elementType,
  components: import_prop_types8.default.shape({
    Listbox: import_prop_types8.default.elementType,
    Root: import_prop_types8.default.elementType
  }),
  componentsProps: import_prop_types8.default.shape({
    listbox: import_prop_types8.default.object,
    root: import_prop_types8.default.object
  }),
  onClose: import_prop_types8.default.func,
  open: import_prop_types8.default.bool
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/MenuItemUnstyled/MenuItemUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React29 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/lab/node_modules/@mui/base/MenuItemUnstyled/menuItemUnstyledClasses.js
function getMenuItemUnstyledUtilityClass(slot) {
  return generateUtilityClass("MuiMenuItemUnstyled", slot);
}
var menuItemUnstyledClasses = generateUtilityClasses("MuiMenuItemUnstyled", ["root", "disabled", "focusVisible"]);

// node_modules/@mui/lab/node_modules/@mui/base/MenuItemUnstyled/useMenuItem.js
init_extends();
var React28 = __toESM(require_react());
init_esm();
function useMenuItem(props) {
  const {
    component,
    disabled = false,
    ref
  } = props;
  const id = useId();
  const menuContext = React28.useContext(MenuUnstyledContext_default);
  const itemRef = React28.useRef(null);
  const handleRef = useForkRef(itemRef, ref);
  if (menuContext === null) {
    throw new Error("MenuItemUnstyled must be used within a MenuUnstyled");
  }
  const {
    registerItem,
    unregisterItem,
    open
  } = menuContext;
  React28.useEffect(() => {
    if (id === void 0) {
      return void 0;
    }
    registerItem(id, {
      disabled,
      id,
      ref: itemRef
    });
    return () => unregisterItem(id);
  }, [id, registerItem, unregisterItem, disabled, ref]);
  const {
    getRootProps: getButtonProps,
    focusVisible
  } = useButton({
    component,
    ref: handleRef,
    disabled
  });
  const [focusRequested, requestFocus] = React28.useState(false);
  const focusIfRequested = React28.useCallback(() => {
    if (focusRequested && itemRef.current != null) {
      itemRef.current.focus();
      requestFocus(false);
    }
  }, [focusRequested]);
  React28.useEffect(() => {
    focusIfRequested();
  });
  React28.useDebugValue({
    id,
    disabled
  });
  const itemState = menuContext.getItemState(id != null ? id : "");
  const {
    highlighted
  } = itemState != null ? itemState : {
    highlighted: false
  };
  React28.useEffect(() => {
    requestFocus(highlighted && open);
  }, [highlighted, open]);
  if (id === void 0) {
    return {
      getRootProps: (other) => _extends({}, other, getButtonProps(other), {
        role: "menuitem"
      }),
      itemState: null,
      focusVisible
    };
  }
  return {
    getRootProps: (other) => {
      const optionProps = menuContext.getItemProps(id, other);
      return _extends({}, other, getButtonProps(other), {
        tabIndex: optionProps.tabIndex,
        id: optionProps.id,
        role: "menuitem"
      });
    },
    itemState,
    focusVisible
  };
}

// node_modules/@mui/lab/node_modules/@mui/base/MenuItemUnstyled/MenuItemUnstyled.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var _excluded10 = ["children", "className", "disabled", "component", "components", "componentsProps"];
function getUtilityClasses2(ownerState) {
  const {
    disabled,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
  };
  return composeClasses(slots, getMenuItemUnstyledUtilityClass, {});
}
var MenuItemUnstyled = React29.forwardRef(function MenuItemUnstyled2(props, ref) {
  var _ref, _componentsProps$root;
  const {
    children,
    className,
    disabled = false,
    component,
    components = {},
    componentsProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : "li";
  const {
    getRootProps,
    itemState,
    focusVisible
  } = useMenuItem({
    component: Root,
    disabled,
    ref
  });
  if (itemState == null) {
    return null;
  }
  const ownerState = _extends({}, props, itemState, {
    focusVisible
  });
  const classes8 = getUtilityClasses2(ownerState);
  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root, getRootProps(other), {
    className: clsx_m_default(classes8.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
  }), ownerState);
  return (0, import_jsx_runtime19.jsx)(Root, _extends({}, rootProps, {
    children
  }));
});
true ? MenuItemUnstyled.propTypes = {
  children: import_prop_types9.default.node,
  className: import_prop_types9.default.string,
  component: import_prop_types9.default.elementType,
  components: import_prop_types9.default.shape({
    Root: import_prop_types9.default.elementType
  }),
  componentsProps: import_prop_types9.default.shape({
    root: import_prop_types9.default.object
  }),
  disabled: import_prop_types9.default.bool
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/ModalUnstyled/ModalUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React31 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/lab/node_modules/@mui/base/ModalUnstyled/ModalManager.js
init_esm();
function isOverflowing(container) {
  const doc = ownerDocument(container);
  if (doc.body === container) {
    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
  }
  return container.scrollHeight > container.clientHeight;
}
function ariaHidden(element, show) {
  if (show) {
    element.setAttribute("aria-hidden", "true");
  } else {
    element.removeAttribute("aria-hidden");
  }
}
function getPaddingRight(element) {
  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
}
function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude = [], show) {
  const blacklist = [mountElement, currentElement, ...elementsToExclude];
  const blacklistTagNames = ["TEMPLATE", "SCRIPT", "STYLE"];
  [].forEach.call(container.children, (element) => {
    if (blacklist.indexOf(element) === -1 && blacklistTagNames.indexOf(element.tagName) === -1) {
      ariaHidden(element, show);
    }
  });
}
function findIndexOf(items, callback) {
  let idx = -1;
  items.some((item, index) => {
    if (callback(item)) {
      idx = index;
      return true;
    }
    return false;
  });
  return idx;
}
function handleContainer(containerInfo, props) {
  const restoreStyle = [];
  const container = containerInfo.container;
  if (!props.disableScrollLock) {
    if (isOverflowing(container)) {
      const scrollbarSize = getScrollbarSize(ownerDocument(container));
      restoreStyle.push({
        value: container.style.paddingRight,
        property: "padding-right",
        el: container
      });
      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
      const fixedElements = ownerDocument(container).querySelectorAll(".mui-fixed");
      [].forEach.call(fixedElements, (element) => {
        restoreStyle.push({
          value: element.style.paddingRight,
          property: "padding-right",
          el: element
        });
        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
      });
    }
    const parent = container.parentElement;
    const containerWindow = ownerWindow(container);
    const scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
    restoreStyle.push({
      value: scrollContainer.style.overflow,
      property: "overflow",
      el: scrollContainer
    }, {
      value: scrollContainer.style.overflowX,
      property: "overflow-x",
      el: scrollContainer
    }, {
      value: scrollContainer.style.overflowY,
      property: "overflow-y",
      el: scrollContainer
    });
    scrollContainer.style.overflow = "hidden";
  }
  const restore = () => {
    restoreStyle.forEach(({
      value,
      el,
      property
    }) => {
      if (value) {
        el.style.setProperty(property, value);
      } else {
        el.style.removeProperty(property);
      }
    });
  };
  return restore;
}
function getHiddenSiblings(container) {
  const hiddenSiblings = [];
  [].forEach.call(container.children, (element) => {
    if (element.getAttribute("aria-hidden") === "true") {
      hiddenSiblings.push(element);
    }
  });
  return hiddenSiblings;
}
var ModalManager = class {
  constructor() {
    this.containers = void 0;
    this.modals = void 0;
    this.modals = [];
    this.containers = [];
  }
  add(modal, container) {
    let modalIndex = this.modals.indexOf(modal);
    if (modalIndex !== -1) {
      return modalIndex;
    }
    modalIndex = this.modals.length;
    this.modals.push(modal);
    if (modal.modalRef) {
      ariaHidden(modal.modalRef, false);
    }
    const hiddenSiblings = getHiddenSiblings(container);
    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
    const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
    if (containerIndex !== -1) {
      this.containers[containerIndex].modals.push(modal);
      return modalIndex;
    }
    this.containers.push({
      modals: [modal],
      container,
      restore: null,
      hiddenSiblings
    });
    return modalIndex;
  }
  mount(modal, props) {
    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
    const containerInfo = this.containers[containerIndex];
    if (!containerInfo.restore) {
      containerInfo.restore = handleContainer(containerInfo, props);
    }
  }
  remove(modal) {
    const modalIndex = this.modals.indexOf(modal);
    if (modalIndex === -1) {
      return modalIndex;
    }
    const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
    const containerInfo = this.containers[containerIndex];
    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
    this.modals.splice(modalIndex, 1);
    if (containerInfo.modals.length === 0) {
      if (containerInfo.restore) {
        containerInfo.restore();
      }
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, true);
      }
      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
      this.containers.splice(containerIndex, 1);
    } else {
      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
      if (nextTop.modalRef) {
        ariaHidden(nextTop.modalRef, false);
      }
    }
    return modalIndex;
  }
  isTopModal(modal) {
    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
  }
};

// node_modules/@mui/lab/node_modules/@mui/base/TrapFocus/TrapFocus.js
var React30 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());
init_esm();
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
function getTabIndex(node) {
  const tabindexAttr = parseInt(node.getAttribute("tabindex"), 10);
  if (!Number.isNaN(tabindexAttr)) {
    return tabindexAttr;
  }
  if (node.contentEditable === "true" || (node.nodeName === "AUDIO" || node.nodeName === "VIDEO" || node.nodeName === "DETAILS") && node.getAttribute("tabindex") === null) {
    return 0;
  }
  return node.tabIndex;
}
function isNonTabbableRadio(node) {
  if (node.tagName !== "INPUT" || node.type !== "radio") {
    return false;
  }
  if (!node.name) {
    return false;
  }
  const getRadio = (selector) => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
  let roving = getRadio(`[name="${node.name}"]:checked`);
  if (!roving) {
    roving = getRadio(`[name="${node.name}"]`);
  }
  return roving !== node;
}
function isNodeMatchingSelectorFocusable(node) {
  if (node.disabled || node.tagName === "INPUT" && node.type === "hidden" || isNonTabbableRadio(node)) {
    return false;
  }
  return true;
}
function defaultGetTabbable(root) {
  const regularTabNodes = [];
  const orderedTabNodes = [];
  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
    const nodeTabIndex = getTabIndex(node);
    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
      return;
    }
    if (nodeTabIndex === 0) {
      regularTabNodes.push(node);
    } else {
      orderedTabNodes.push({
        documentOrder: i,
        tabIndex: nodeTabIndex,
        node
      });
    }
  });
  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
}
function defaultIsEnabled() {
  return true;
}
function TrapFocus(props) {
  const {
    children,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableRestoreFocus = false,
    getTabbable = defaultGetTabbable,
    isEnabled = defaultIsEnabled,
    open
  } = props;
  const ignoreNextEnforceFocus = React30.useRef();
  const sentinelStart = React30.useRef(null);
  const sentinelEnd = React30.useRef(null);
  const nodeToRestore = React30.useRef(null);
  const reactFocusEventTarget = React30.useRef(null);
  const activated = React30.useRef(false);
  const rootRef = React30.useRef(null);
  const handleRef = useForkRef(children.ref, rootRef);
  const lastKeydown = React30.useRef(null);
  React30.useEffect(() => {
    if (!open || !rootRef.current) {
      return;
    }
    activated.current = !disableAutoFocus;
  }, [disableAutoFocus, open]);
  React30.useEffect(() => {
    if (!open || !rootRef.current) {
      return;
    }
    const doc = ownerDocument(rootRef.current);
    if (!rootRef.current.contains(doc.activeElement)) {
      if (!rootRef.current.hasAttribute("tabIndex")) {
        if (true) {
          console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
        }
        rootRef.current.setAttribute("tabIndex", -1);
      }
      if (activated.current) {
        rootRef.current.focus();
      }
    }
    return () => {
      if (!disableRestoreFocus) {
        if (nodeToRestore.current && nodeToRestore.current.focus) {
          ignoreNextEnforceFocus.current = true;
          nodeToRestore.current.focus();
        }
        nodeToRestore.current = null;
      }
    };
  }, [open]);
  React30.useEffect(() => {
    if (!open || !rootRef.current) {
      return;
    }
    const doc = ownerDocument(rootRef.current);
    const contain = (nativeEvent) => {
      const {
        current: rootElement
      } = rootRef;
      if (rootElement === null) {
        return;
      }
      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
        ignoreNextEnforceFocus.current = false;
        return;
      }
      if (!rootElement.contains(doc.activeElement)) {
        if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
          reactFocusEventTarget.current = null;
        } else if (reactFocusEventTarget.current !== null) {
          return;
        }
        if (!activated.current) {
          return;
        }
        let tabbable = [];
        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
          tabbable = getTabbable(rootRef.current);
        }
        if (tabbable.length > 0) {
          var _lastKeydown$current, _lastKeydown$current2;
          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
          const focusNext = tabbable[0];
          const focusPrevious = tabbable[tabbable.length - 1];
          if (isShiftTab) {
            focusPrevious.focus();
          } else {
            focusNext.focus();
          }
        } else {
          rootElement.focus();
        }
      }
    };
    const loopFocus = (nativeEvent) => {
      lastKeydown.current = nativeEvent;
      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
        return;
      }
      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
        ignoreNextEnforceFocus.current = true;
        sentinelEnd.current.focus();
      }
    };
    doc.addEventListener("focusin", contain);
    doc.addEventListener("keydown", loopFocus, true);
    const interval = setInterval(() => {
      if (doc.activeElement.tagName === "BODY") {
        contain();
      }
    }, 50);
    return () => {
      clearInterval(interval);
      doc.removeEventListener("focusin", contain);
      doc.removeEventListener("keydown", loopFocus, true);
    };
  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
  const onFocus = (event) => {
    if (nodeToRestore.current === null) {
      nodeToRestore.current = event.relatedTarget;
    }
    activated.current = true;
    reactFocusEventTarget.current = event.target;
    const childrenPropsHandler = children.props.onFocus;
    if (childrenPropsHandler) {
      childrenPropsHandler(event);
    }
  };
  const handleFocusSentinel = (event) => {
    if (nodeToRestore.current === null) {
      nodeToRestore.current = event.relatedTarget;
    }
    activated.current = true;
  };
  return (0, import_jsx_runtime21.jsxs)(React30.Fragment, {
    children: [(0, import_jsx_runtime20.jsx)("div", {
      tabIndex: 0,
      onFocus: handleFocusSentinel,
      ref: sentinelStart,
      "data-test": "sentinelStart"
    }), React30.cloneElement(children, {
      ref: handleRef,
      onFocus
    }), (0, import_jsx_runtime20.jsx)("div", {
      tabIndex: 0,
      onFocus: handleFocusSentinel,
      ref: sentinelEnd,
      "data-test": "sentinelEnd"
    })]
  });
}
true ? TrapFocus.propTypes = {
  children: elementAcceptingRef_default,
  disableAutoFocus: import_prop_types10.default.bool,
  disableEnforceFocus: import_prop_types10.default.bool,
  disableRestoreFocus: import_prop_types10.default.bool,
  getTabbable: import_prop_types10.default.func,
  isEnabled: import_prop_types10.default.func,
  open: import_prop_types10.default.bool.isRequired
} : void 0;
if (true) {
  TrapFocus["propTypes"] = exactProp(TrapFocus.propTypes);
}
var TrapFocus_default = TrapFocus;

// node_modules/@mui/lab/node_modules/@mui/base/ModalUnstyled/modalUnstyledClasses.js
function getModalUtilityClass(slot) {
  return generateUtilityClass("MuiModal", slot);
}
var modalUnstyledClasses = generateUtilityClasses("MuiModal", ["root", "hidden"]);

// node_modules/@mui/lab/node_modules/@mui/base/ModalUnstyled/ModalUnstyled.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var _excluded11 = ["BackdropComponent", "BackdropProps", "children", "classes", "className", "closeAfterTransition", "component", "components", "componentsProps", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "theme", "onTransitionEnter", "onTransitionExited"];
var useUtilityClasses3 = (ownerState) => {
  const {
    open,
    exited,
    classes: classes8
  } = ownerState;
  const slots = {
    root: ["root", !open && exited && "hidden"]
  };
  return composeClasses(slots, getModalUtilityClass, classes8);
};
function getContainer2(container) {
  return typeof container === "function" ? container() : container;
}
function getHasTransition(props) {
  return props.children ? props.children.props.hasOwnProperty("in") : false;
}
var defaultManager = new ModalManager();
var ModalUnstyled = React31.forwardRef(function ModalUnstyled2(props, ref) {
  const {
    BackdropComponent,
    BackdropProps,
    children,
    classes: classesProp,
    className,
    closeAfterTransition = false,
    component = "div",
    components = {},
    componentsProps = {},
    container,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableEscapeKeyDown = false,
    disablePortal = false,
    disableRestoreFocus = false,
    disableScrollLock = false,
    hideBackdrop = false,
    keepMounted = false,
    manager = defaultManager,
    onBackdropClick,
    onClose,
    onKeyDown,
    open,
    theme,
    onTransitionEnter,
    onTransitionExited
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  const [exited, setExited] = React31.useState(true);
  const modal = React31.useRef({});
  const mountNodeRef = React31.useRef(null);
  const modalRef = React31.useRef(null);
  const handleRef = useForkRef(modalRef, ref);
  const hasTransition = getHasTransition(props);
  const getDoc = () => ownerDocument(mountNodeRef.current);
  const getModal = () => {
    modal.current.modalRef = modalRef.current;
    modal.current.mountNode = mountNodeRef.current;
    return modal.current;
  };
  const handleMounted = () => {
    manager.mount(getModal(), {
      disableScrollLock
    });
    modalRef.current.scrollTop = 0;
  };
  const handleOpen = useEventCallback(() => {
    const resolvedContainer = getContainer2(container) || getDoc().body;
    manager.add(getModal(), resolvedContainer);
    if (modalRef.current) {
      handleMounted();
    }
  });
  const isTopModal = React31.useCallback(() => manager.isTopModal(getModal()), [manager]);
  const handlePortalRef = useEventCallback((node) => {
    mountNodeRef.current = node;
    if (!node) {
      return;
    }
    if (open && isTopModal()) {
      handleMounted();
    } else {
      ariaHidden(modalRef.current, true);
    }
  });
  const handleClose = React31.useCallback(() => {
    manager.remove(getModal());
  }, [manager]);
  React31.useEffect(() => {
    return () => {
      handleClose();
    };
  }, [handleClose]);
  React31.useEffect(() => {
    if (open) {
      handleOpen();
    } else if (!hasTransition || !closeAfterTransition) {
      handleClose();
    }
  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
  const ownerState = _extends({}, props, {
    classes: classesProp,
    closeAfterTransition,
    disableAutoFocus,
    disableEnforceFocus,
    disableEscapeKeyDown,
    disablePortal,
    disableRestoreFocus,
    disableScrollLock,
    exited,
    hideBackdrop,
    keepMounted
  });
  const classes8 = useUtilityClasses3(ownerState);
  if (!keepMounted && !open && (!hasTransition || exited)) {
    return null;
  }
  const handleEnter = () => {
    setExited(false);
    if (onTransitionEnter) {
      onTransitionEnter();
    }
  };
  const handleExited = () => {
    setExited(true);
    if (onTransitionExited) {
      onTransitionExited();
    }
    if (closeAfterTransition) {
      handleClose();
    }
  };
  const handleBackdropClick = (event) => {
    if (event.target !== event.currentTarget) {
      return;
    }
    if (onBackdropClick) {
      onBackdropClick(event);
    }
    if (onClose) {
      onClose(event, "backdropClick");
    }
  };
  const handleKeyDown2 = (event) => {
    if (onKeyDown) {
      onKeyDown(event);
    }
    if (event.key !== "Escape" || !isTopModal()) {
      return;
    }
    if (!disableEscapeKeyDown) {
      event.stopPropagation();
      if (onClose) {
        onClose(event, "escapeKeyDown");
      }
    }
  };
  const childProps = {};
  if (children.props.tabIndex === void 0) {
    childProps.tabIndex = "-1";
  }
  if (hasTransition) {
    childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
    childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
  }
  const Root = components.Root || component;
  const rootProps = componentsProps.root || {};
  return (0, import_jsx_runtime22.jsx)(Portal_default, {
    ref: handlePortalRef,
    container,
    disablePortal,
    children: (0, import_jsx_runtime23.jsxs)(Root, _extends({
      role: "presentation"
    }, rootProps, !isHostComponent_default(Root) && {
      as: component,
      ownerState: _extends({}, ownerState, rootProps.ownerState),
      theme
    }, other, {
      ref: handleRef,
      onKeyDown: handleKeyDown2,
      className: clsx_m_default(classes8.root, rootProps.className, className),
      children: [!hideBackdrop && BackdropComponent ? (0, import_jsx_runtime22.jsx)(BackdropComponent, _extends({
        "aria-hidden": true,
        open,
        onClick: handleBackdropClick
      }, BackdropProps)) : null, (0, import_jsx_runtime22.jsx)(TrapFocus_default, {
        disableEnforceFocus,
        disableAutoFocus,
        disableRestoreFocus,
        isEnabled: isTopModal,
        open,
        children: React31.cloneElement(children, childProps)
      })]
    }))
  });
});
true ? ModalUnstyled.propTypes = {
  BackdropComponent: import_prop_types11.default.elementType,
  BackdropProps: import_prop_types11.default.object,
  children: elementAcceptingRef_default.isRequired,
  classes: import_prop_types11.default.object,
  className: import_prop_types11.default.string,
  closeAfterTransition: import_prop_types11.default.bool,
  component: import_prop_types11.default.elementType,
  components: import_prop_types11.default.shape({
    Root: import_prop_types11.default.elementType
  }),
  componentsProps: import_prop_types11.default.shape({
    root: import_prop_types11.default.object
  }),
  container: import_prop_types11.default.oneOfType([HTMLElementType, import_prop_types11.default.func]),
  disableAutoFocus: import_prop_types11.default.bool,
  disableEnforceFocus: import_prop_types11.default.bool,
  disableEscapeKeyDown: import_prop_types11.default.bool,
  disablePortal: import_prop_types11.default.bool,
  disableRestoreFocus: import_prop_types11.default.bool,
  disableScrollLock: import_prop_types11.default.bool,
  hideBackdrop: import_prop_types11.default.bool,
  keepMounted: import_prop_types11.default.bool,
  onBackdropClick: import_prop_types11.default.func,
  onClose: import_prop_types11.default.func,
  onKeyDown: import_prop_types11.default.func,
  open: import_prop_types11.default.bool.isRequired
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/MultiSelectUnstyled/MultiSelectUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React35 = __toESM(require_react());
var import_prop_types12 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/lab/node_modules/@mui/base/SelectUnstyled/utils.js
init_extends();
var import_react = __toESM(require_react());

// node_modules/@mui/lab/node_modules/@mui/base/SelectUnstyled/useSelect.types.js
function isOptionGroup(child) {
  return !!child.options;
}

// node_modules/@mui/lab/node_modules/@mui/base/SelectUnstyled/utils.js
function getOptionsFromChildren(children) {
  if (children == null) {
    return [];
  }
  const selectChildren = [];
  import_react.default.Children.forEach(children, (node) => {
    var _props, _props2, _element$props$disabl2;
    const nodeChildren = node == null ? void 0 : (_props = node.props) == null ? void 0 : _props.children;
    if ((node == null ? void 0 : (_props2 = node.props) == null ? void 0 : _props2.value) === void 0) {
      if (nodeChildren != null) {
        var _element$props$disabl;
        const element2 = node;
        const group = {
          options: getOptionsFromChildren(nodeChildren),
          label: element2.props.label,
          disabled: (_element$props$disabl = element2.props.disabled) != null ? _element$props$disabl : false
        };
        selectChildren.push(group);
      }
      return;
    }
    const element = node;
    const option = {
      value: element.props.value,
      label: element.props.children,
      disabled: (_element$props$disabl2 = element.props.disabled) != null ? _element$props$disabl2 : false
    };
    selectChildren.push(option);
  });
  return selectChildren != null ? selectChildren : [];
}
function flattenOptionGroups(groupedOptions, isGroupDisabled = false) {
  let flatOptions = [];
  groupedOptions.forEach((optionOrGroup) => {
    if (isOptionGroup(optionOrGroup)) {
      flatOptions = flatOptions.concat(flattenOptionGroups(optionOrGroup.options, optionOrGroup.disabled));
    } else {
      flatOptions.push(_extends({}, optionOrGroup, {
        disabled: isGroupDisabled || optionOrGroup.disabled
      }));
    }
  });
  return flatOptions;
}

// node_modules/@mui/lab/node_modules/@mui/base/SelectUnstyled/useSelect.js
init_extends();
var React33 = __toESM(require_react());
init_esm();
function useSelect(props) {
  const {
    buttonComponent,
    buttonRef: buttonRefProp,
    defaultValue,
    disabled = false,
    listboxId,
    listboxRef: listboxRefProp,
    multiple = false,
    onChange,
    onOpenChange,
    open = false,
    options,
    value: valueProp
  } = props;
  const buttonRef = React33.useRef(null);
  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);
  const listboxRef = React33.useRef(null);
  const intermediaryListboxRef = useForkRef(listboxRefProp, listboxRef);
  const [value, setValue] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "SelectUnstyled",
    state: "value"
  });
  const ignoreEnterKeyUp = React33.useRef(false);
  const ignoreClick = React33.useRef(false);
  const [listboxFocusRequested, requestListboxFocus] = React33.useState(false);
  const focusListboxIfRequested = React33.useCallback(() => {
    if (listboxFocusRequested && listboxRef.current != null) {
      listboxRef.current.focus();
      requestListboxFocus(false);
    }
  }, [listboxFocusRequested]);
  const updateListboxRef = (listboxElement) => {
    listboxRef.current = listboxElement;
    focusListboxIfRequested();
  };
  const handleListboxRef = useForkRef(intermediaryListboxRef, updateListboxRef);
  React33.useEffect(() => {
    focusListboxIfRequested();
  }, [focusListboxIfRequested]);
  React33.useEffect(() => {
    requestListboxFocus(open);
  }, [open]);
  const createHandleMouseDown = (otherHandlers) => (event) => {
    var _otherHandlers$onMous;
    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
    if (!event.defaultPrevented && open) {
      ignoreClick.current = true;
    }
  };
  const createHandleButtonClick = (otherHandlers) => (event) => {
    var _otherHandlers$onClic;
    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
    if (!event.defaultPrevented && !ignoreClick.current) {
      onOpenChange == null ? void 0 : onOpenChange(!open);
    }
    ignoreClick.current = false;
  };
  const createHandleButtonKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
    if (event.defaultPrevented) {
      return;
    }
    if (event.key === "Enter") {
      ignoreEnterKeyUp.current = true;
    }
    if (event.key === "ArrowDown" || event.key === "ArrowUp") {
      event.preventDefault();
      onOpenChange == null ? void 0 : onOpenChange(true);
    }
  };
  const createHandleListboxKeyUp = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyU;
    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);
    if (event.defaultPrevented) {
      return;
    }
    const closingKeys = multiple ? ["Escape"] : ["Escape", "Enter", " "];
    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {
      var _buttonRef$current;
      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
    }
    ignoreEnterKeyUp.current = false;
  };
  const createHandleListboxItemClick = (otherHandlers) => (event) => {
    var _otherHandlers$onClic2;
    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
    if (event.defaultPrevented) {
      return;
    }
    if (!multiple) {
      onOpenChange == null ? void 0 : onOpenChange(false);
    }
  };
  const createHandleListboxBlur = (otherHandlers) => (event) => {
    var _otherHandlers$blur;
    otherHandlers == null ? void 0 : (_otherHandlers$blur = otherHandlers.blur) == null ? void 0 : _otherHandlers$blur.call(otherHandlers, event);
    if (!event.defaultPrevented) {
      onOpenChange == null ? void 0 : onOpenChange(false);
    }
  };
  const listboxReducer = (state, action) => {
    const newState = defaultListboxReducer(state, action);
    if (action.type === ActionTypes.keyDown && !open && (action.event.key === "ArrowUp" || action.event.key === "ArrowDown")) {
      return _extends({}, newState, {
        selectedValue: newState.highlightedValue
      });
    }
    if (action.type === ActionTypes.blur || action.type === ActionTypes.setValue || action.type === ActionTypes.optionsChange) {
      return _extends({}, newState, {
        highlightedValue: newState.selectedValue
      });
    }
    return newState;
  };
  const {
    getRootProps: getButtonRootProps,
    active: buttonActive,
    focusVisible: buttonFocusVisible
  } = useButton({
    component: buttonComponent,
    disabled,
    ref: handleButtonRef
  });
  const selectedOption = React33.useMemo(() => {
    var _props$options$find;
    return props.multiple ? props.options.filter((o) => value.includes(o.value)) : (_props$options$find = props.options.find((o) => o.value === value)) != null ? _props$options$find : null;
  }, [props.multiple, props.options, value]);
  let useListboxParameters;
  if (props.multiple) {
    useListboxParameters = {
      id: listboxId,
      isOptionDisabled: (o) => {
        var _o$disabled;
        return (_o$disabled = o == null ? void 0 : o.disabled) != null ? _o$disabled : false;
      },
      optionComparer: (o, v) => (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value),
      listboxRef: handleListboxRef,
      multiple: true,
      onChange: (newOptions) => {
        setValue(newOptions.map((o) => o.value));
        onChange == null ? void 0 : onChange(newOptions.map((o) => o.value));
      },
      options,
      value: selectedOption
    };
  } else {
    useListboxParameters = {
      id: listboxId,
      isOptionDisabled: (o) => {
        var _o$disabled2;
        return (_o$disabled2 = o == null ? void 0 : o.disabled) != null ? _o$disabled2 : false;
      },
      optionComparer: (o, v) => (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value),
      listboxRef: handleListboxRef,
      multiple: false,
      onChange: (option) => {
        var _option$value, _option$value2;
        setValue((_option$value = option == null ? void 0 : option.value) != null ? _option$value : null);
        onChange == null ? void 0 : onChange((_option$value2 = option == null ? void 0 : option.value) != null ? _option$value2 : null);
      },
      options,
      stateReducer: listboxReducer,
      value: selectedOption
    };
  }
  const {
    getRootProps: getListboxRootProps,
    getOptionProps: getListboxOptionProps,
    getOptionState,
    highlightedOption,
    selectedOption: listboxSelectedOption
  } = useListbox(useListboxParameters);
  const getButtonProps = (otherHandlers = {}) => {
    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {
      onClick: createHandleButtonClick(otherHandlers),
      onMouseDown: createHandleMouseDown(otherHandlers),
      onKeyDown: createHandleButtonKeyDown(otherHandlers)
    })), {
      "aria-expanded": open,
      "aria-haspopup": "listbox"
    });
  };
  const getListboxProps = (otherHandlers = {}) => getListboxRootProps(_extends({}, otherHandlers, {
    onBlur: createHandleListboxBlur(otherHandlers),
    onKeyUp: createHandleListboxKeyUp(otherHandlers)
  }));
  const getOptionProps = (option, otherHandlers = {}) => {
    return getListboxOptionProps(option, _extends({}, otherHandlers, {
      onClick: createHandleListboxItemClick(otherHandlers)
    }));
  };
  React33.useDebugValue({
    selectedOption: listboxSelectedOption,
    open,
    highlightedOption
  });
  return {
    buttonActive,
    buttonFocusVisible,
    disabled,
    getButtonProps,
    getListboxProps,
    getOptionProps,
    getOptionState,
    open,
    value
  };
}
var useSelect_default = useSelect;

// node_modules/@mui/lab/node_modules/@mui/base/SelectUnstyled/SelectUnstyledContext.js
var React34 = __toESM(require_react());
var SelectUnstyledContext = React34.createContext(void 0);

// node_modules/@mui/lab/node_modules/@mui/base/SelectUnstyled/selectUnstyledClasses.js
function getSelectUnstyledUtilityClass(slot) {
  return generateUtilityClass("MuiSelectUnstyled", slot);
}
var selectUnstyledClasses = generateUtilityClasses("MuiSelectUnstyled", ["root", "button", "listbox", "popper", "active", "expanded", "disabled", "focusVisible"]);

// node_modules/@mui/lab/node_modules/@mui/base/MultiSelectUnstyled/MultiSelectUnstyled.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var _excluded12 = ["autoFocus", "children", "className", "component", "components", "componentsProps", "defaultListboxOpen", "defaultValue", "disabled", "listboxOpen", "onChange", "onListboxOpenChange", "value"];
function defaultRenderMultipleValues(selectedOptions) {
  return (0, import_jsx_runtime24.jsx)(React35.Fragment, {
    children: selectedOptions.map((o) => o.label).join(", ")
  });
}
function useUtilityClasses4(ownerState) {
  const {
    active,
    disabled,
    open,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active", open && "expanded"],
    listbox: ["listbox", disabled && "disabled"],
    popper: ["popper"]
  };
  return composeClasses(slots, getSelectUnstyledUtilityClass, {});
}
var MultiSelectUnstyled = React35.forwardRef(function MultiSelectUnstyled2(props, ref) {
  var _props$renderValue, _ref, _components$Listbox, _components$Popper, _componentsProps$list, _componentsProps$list2, _componentsProps$root, _componentsProps$list3, _componentsProps$popp;
  const {
    autoFocus,
    children,
    className,
    component,
    components = {},
    componentsProps = {},
    defaultListboxOpen = false,
    defaultValue = [],
    disabled: disabledProp,
    listboxOpen: listboxOpenProp,
    onChange,
    onListboxOpenChange,
    value: valueProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const renderValue = (_props$renderValue = props.renderValue) != null ? _props$renderValue : defaultRenderMultipleValues;
  const [groupedOptions, setGroupedOptions] = React35.useState([]);
  const options = React35.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);
  const [listboxOpen, setListboxOpen] = useControlled({
    controlled: listboxOpenProp,
    default: defaultListboxOpen,
    name: "MultiSelectUnstyled",
    state: "listboxOpen"
  });
  React35.useEffect(() => {
    setGroupedOptions(getOptionsFromChildren(children));
  }, [children]);
  const [buttonDefined, setButtonDefined] = React35.useState(false);
  const buttonRef = React35.useRef(null);
  const listboxRef = React35.useRef(null);
  const Button = (_ref = component != null ? component : components.Root) != null ? _ref : "button";
  const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : "ul";
  const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : PopperUnstyled_default;
  const handleButtonRefChange = (element) => {
    buttonRef.current = element;
    if (element != null) {
      setButtonDefined(true);
    }
  };
  const handleButtonRef = useForkRef(ref, handleButtonRefChange);
  const handleListboxRef = useForkRef(listboxRef, (_componentsProps$list = componentsProps.listbox) == null ? void 0 : _componentsProps$list.ref);
  React35.useEffect(() => {
    if (autoFocus) {
      buttonRef.current.focus();
    }
  }, [autoFocus]);
  const handleOpenChange = (isOpen) => {
    setListboxOpen(isOpen);
    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
  };
  const {
    buttonActive,
    buttonFocusVisible,
    disabled,
    getButtonProps,
    getListboxProps,
    getOptionProps,
    getOptionState,
    value
  } = useSelect_default({
    buttonComponent: Button,
    buttonRef: handleButtonRef,
    defaultValue,
    disabled: disabledProp,
    listboxId: (_componentsProps$list2 = componentsProps.listbox) == null ? void 0 : _componentsProps$list2.id,
    listboxRef: handleListboxRef,
    multiple: true,
    onChange,
    onOpenChange: handleOpenChange,
    open: listboxOpen,
    options,
    value: valueProp
  });
  const ownerState = _extends({}, props, {
    active: buttonActive,
    defaultListboxOpen,
    disabled,
    focusVisible: buttonFocusVisible,
    open: listboxOpen,
    renderValue,
    value
  });
  const classes8 = useUtilityClasses4(ownerState);
  const selectedOptions = React35.useMemo(() => {
    if (value == null) {
      return [];
    }
    return options.filter((o) => value.includes(o.value));
  }, [options, value]);
  const buttonProps = appendOwnerState(Button, _extends({}, getButtonProps(), other, componentsProps.root, {
    className: clsx_m_default(className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, classes8.root)
  }), ownerState);
  const listboxProps = appendOwnerState(ListboxRoot, _extends({}, getListboxProps(), componentsProps.listbox, {
    className: clsx_m_default((_componentsProps$list3 = componentsProps.listbox) == null ? void 0 : _componentsProps$list3.className, classes8.listbox)
  }), ownerState);
  const popperProps = appendOwnerState(Popper, _extends({
    open: listboxOpen,
    anchorEl: buttonRef.current,
    placement: "bottom-start",
    disablePortal: true,
    role: void 0
  }, componentsProps.popper, {
    className: clsx_m_default((_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className, classes8.popper)
  }), ownerState);
  const context = {
    getOptionProps,
    getOptionState,
    listboxRef
  };
  return (0, import_jsx_runtime25.jsxs)(React35.Fragment, {
    children: [(0, import_jsx_runtime24.jsx)(Button, _extends({}, buttonProps, {
      children: renderValue(selectedOptions)
    })), buttonDefined && (0, import_jsx_runtime24.jsx)(Popper, _extends({}, popperProps, {
      children: (0, import_jsx_runtime24.jsx)(ListboxRoot, _extends({}, listboxProps, {
        children: (0, import_jsx_runtime24.jsx)(SelectUnstyledContext.Provider, {
          value: context,
          children
        })
      }))
    }))]
  });
});
true ? MultiSelectUnstyled.propTypes = {
  autoFocus: import_prop_types12.default.bool,
  children: import_prop_types12.default.node,
  className: import_prop_types12.default.string,
  component: import_prop_types12.default.elementType,
  components: import_prop_types12.default.shape({
    Listbox: import_prop_types12.default.elementType,
    Popper: import_prop_types12.default.elementType,
    Root: import_prop_types12.default.elementType
  }),
  componentsProps: import_prop_types12.default.shape({
    listbox: import_prop_types12.default.object,
    popper: import_prop_types12.default.object,
    root: import_prop_types12.default.object
  }),
  defaultListboxOpen: import_prop_types12.default.bool,
  defaultValue: import_prop_types12.default.array,
  disabled: import_prop_types12.default.bool,
  listboxOpen: import_prop_types12.default.bool,
  onChange: import_prop_types12.default.func,
  onListboxOpenChange: import_prop_types12.default.func,
  renderValue: import_prop_types12.default.func,
  value: import_prop_types12.default.array
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/NoSsr/NoSsr.js
var React36 = __toESM(require_react());
var import_prop_types13 = __toESM(require_prop_types());
init_esm();
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
function NoSsr(props) {
  const {
    children,
    defer = false,
    fallback = null
  } = props;
  const [mountedState, setMountedState] = React36.useState(false);
  useEnhancedEffect_default(() => {
    if (!defer) {
      setMountedState(true);
    }
  }, [defer]);
  React36.useEffect(() => {
    if (defer) {
      setMountedState(true);
    }
  }, [defer]);
  return (0, import_jsx_runtime26.jsx)(React36.Fragment, {
    children: mountedState ? children : fallback
  });
}
true ? NoSsr.propTypes = {
  children: import_prop_types13.default.node,
  defer: import_prop_types13.default.bool,
  fallback: import_prop_types13.default.node
} : void 0;
if (true) {
  NoSsr["propTypes"] = exactProp(NoSsr.propTypes);
}

// node_modules/@mui/lab/node_modules/@mui/base/OptionGroupUnstyled/OptionGroupUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
init_clsx_m();
var import_prop_types14 = __toESM(require_prop_types());
var import_react2 = __toESM(require_react());

// node_modules/@mui/lab/node_modules/@mui/base/OptionGroupUnstyled/optionGroupUnstyledClasses.js
function getOptionGroupUnstyledUtilityClass(slot) {
  return generateUtilityClass("MuiOptionGroupUnstyled", slot);
}
var optionGroupUnstyledClasses = generateUtilityClasses("MuiOptionGroupUnstyled", ["root", "label", "list"]);

// node_modules/@mui/lab/node_modules/@mui/base/OptionGroupUnstyled/OptionGroupUnstyled.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var _excluded13 = ["className", "component", "components", "disabled", "componentsProps"];
function useUtilityClasses5(disabled) {
  const slots = {
    root: ["root", disabled && "disabled"],
    label: ["label"],
    list: ["list"]
  };
  return composeClasses(slots, getOptionGroupUnstyledUtilityClass, {});
}
var OptionGroupUnstyled = import_react2.default.forwardRef(function OptionGroupUnstyled2(props, ref) {
  var _componentsProps$root, _componentsProps$labe, _componentsProps$list;
  const {
    className,
    component,
    components = {},
    disabled = false,
    componentsProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
  const Root = component || (components == null ? void 0 : components.Root) || "li";
  const Label = (components == null ? void 0 : components.Label) || "span";
  const List = (components == null ? void 0 : components.List) || "ul";
  const classes8 = useUtilityClasses5(disabled);
  const rootProps = _extends({}, other, {
    ref
  }, componentsProps.root, {
    className: clsx_m_default(classes8.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
  });
  const labelProps = _extends({}, componentsProps.label, {
    className: clsx_m_default(classes8.label, (_componentsProps$labe = componentsProps.label) == null ? void 0 : _componentsProps$labe.className)
  });
  const listProps = _extends({}, componentsProps.list, {
    className: clsx_m_default(classes8.list, (_componentsProps$list = componentsProps.list) == null ? void 0 : _componentsProps$list.className)
  });
  return (0, import_jsx_runtime28.jsxs)(Root, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime27.jsx)(Label, _extends({}, labelProps, {
      children: props.label
    })), (0, import_jsx_runtime27.jsx)(List, _extends({}, listProps, {
      children: props.children
    }))]
  }));
});
true ? OptionGroupUnstyled.propTypes = {
  children: import_prop_types14.default.node,
  className: import_prop_types14.default.string,
  component: import_prop_types14.default.elementType,
  components: import_prop_types14.default.shape({
    Label: import_prop_types14.default.elementType,
    List: import_prop_types14.default.elementType,
    Root: import_prop_types14.default.elementType
  }),
  componentsProps: import_prop_types14.default.shape({
    label: import_prop_types14.default.object,
    list: import_prop_types14.default.object,
    root: import_prop_types14.default.object
  }),
  disabled: import_prop_types14.default.bool,
  label: import_prop_types14.default.node
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/OptionUnstyled/OptionUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var import_react3 = __toESM(require_react());
init_clsx_m();
var import_prop_types15 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/lab/node_modules/@mui/base/OptionUnstyled/optionUnstyledClasses.js
function getOptionUnstyledUtilityClass(slot) {
  return generateUtilityClass("MuiOptionUnstyled", slot);
}
var optionUnstyledClasses = generateUtilityClasses("MuiOptionUnstyled", ["root", "disabled", "selected", "highlighted"]);

// node_modules/@mui/lab/node_modules/@mui/base/OptionUnstyled/OptionUnstyled.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var _excluded14 = ["children", "className", "component", "components", "componentsProps", "disabled", "value"];
function useUtilityClasses6(ownerState) {
  const {
    disabled,
    highlighted,
    selected
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
  };
  return composeClasses(slots, getOptionUnstyledUtilityClass, {});
}
var OptionUnstyled = import_react3.default.forwardRef(function OptionUnstyled2(props, ref) {
  var _componentsProps$root;
  const {
    children,
    className,
    component,
    components = {},
    componentsProps = {},
    disabled,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
  const selectContext = import_react3.default.useContext(SelectUnstyledContext);
  if (!selectContext) {
    throw new Error("OptionUnstyled must be used within a SelectUnstyled");
  }
  const Root = component || components.Root || "li";
  const selectOption = {
    value,
    label: children,
    disabled
  };
  const optionState = selectContext.getOptionState(selectOption);
  const optionProps = selectContext.getOptionProps(selectOption);
  const listboxRef = selectContext.listboxRef;
  const ownerState = _extends({}, props, optionState);
  const optionRef = import_react3.default.useRef(null);
  const handleRef = useForkRef(ref, optionRef);
  import_react3.default.useEffect(() => {
    if (optionState.highlighted) {
      if (!listboxRef.current || !optionRef.current) {
        return;
      }
      const listboxClientRect = listboxRef.current.getBoundingClientRect();
      const optionClientRect = optionRef.current.getBoundingClientRect();
      if (optionClientRect.top < listboxClientRect.top) {
        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
      } else if (optionClientRect.bottom > listboxClientRect.bottom) {
        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
      }
    }
  }, [optionState.highlighted, listboxRef]);
  const classes8 = useUtilityClasses6(ownerState);
  const rootProps = appendOwnerState(Root, _extends({}, other, optionProps, componentsProps.root, {
    ref: handleRef,
    className: clsx_m_default(classes8.root, className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className)
  }), ownerState);
  return (0, import_jsx_runtime29.jsx)(Root, _extends({}, rootProps, {
    children
  }));
});
true ? OptionUnstyled.propTypes = {
  children: import_prop_types15.default.node,
  className: import_prop_types15.default.string,
  component: import_prop_types15.default.elementType,
  components: import_prop_types15.default.shape({
    Root: import_prop_types15.default.elementType
  }),
  componentsProps: import_prop_types15.default.shape({
    root: import_prop_types15.default.object
  }),
  disabled: import_prop_types15.default.bool,
  value: import_prop_types15.default.any.isRequired
} : void 0;
var OptionUnstyled_default = import_react3.default.memo(OptionUnstyled);

// node_modules/@mui/lab/node_modules/@mui/base/SelectUnstyled/SelectUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React39 = __toESM(require_react());
var import_prop_types16 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var _excluded15 = ["autoFocus", "children", "className", "component", "components", "componentsProps", "defaultValue", "defaultListboxOpen", "disabled", "listboxOpen", "onChange", "onListboxOpenChange", "renderValue", "value"];
function defaultRenderSingleValue(selectedOption) {
  var _selectedOption$label;
  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : "";
}
function useUtilityClasses7(ownerState) {
  const {
    active,
    disabled,
    open,
    focusVisible
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active", open && "expanded"],
    listbox: ["listbox", disabled && "disabled"],
    popper: ["popper"]
  };
  return composeClasses(slots, getSelectUnstyledUtilityClass, {});
}
var SelectUnstyled = React39.forwardRef(function SelectUnstyled2(props, ref) {
  var _ref, _components$Listbox, _components$Popper, _componentsProps$list, _componentsProps$list2, _componentsProps$root, _componentsProps$list3, _componentsProps$popp;
  const {
    autoFocus,
    children,
    className,
    component,
    components = {},
    componentsProps = {},
    defaultValue,
    defaultListboxOpen = false,
    disabled: disabledProp,
    listboxOpen: listboxOpenProp,
    onChange,
    onListboxOpenChange,
    renderValue: renderValueProp,
    value: valueProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;
  const [groupedOptions, setGroupedOptions] = React39.useState([]);
  const options = React39.useMemo(() => flattenOptionGroups(groupedOptions), [groupedOptions]);
  const [listboxOpen, setListboxOpen] = useControlled({
    controlled: listboxOpenProp,
    default: defaultListboxOpen,
    name: "SelectUnstyled",
    state: "listboxOpen"
  });
  React39.useEffect(() => {
    setGroupedOptions(getOptionsFromChildren(children));
  }, [children]);
  const [buttonDefined, setButtonDefined] = React39.useState(false);
  const buttonRef = React39.useRef(null);
  const listboxRef = React39.useRef(null);
  const Button = (_ref = component != null ? component : components.Root) != null ? _ref : "button";
  const ListboxRoot = (_components$Listbox = components.Listbox) != null ? _components$Listbox : "ul";
  const Popper = (_components$Popper = components.Popper) != null ? _components$Popper : PopperUnstyled_default;
  const handleButtonRefChange = (element) => {
    buttonRef.current = element;
    if (element != null) {
      setButtonDefined(true);
    }
  };
  const handleButtonRef = useForkRef(ref, handleButtonRefChange);
  const handleListboxRef = useForkRef(listboxRef, (_componentsProps$list = componentsProps.listbox) == null ? void 0 : _componentsProps$list.ref);
  React39.useEffect(() => {
    if (autoFocus) {
      buttonRef.current.focus();
    }
  }, [autoFocus]);
  const handleOpenChange = (isOpen) => {
    setListboxOpen(isOpen);
    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
  };
  const {
    buttonActive,
    buttonFocusVisible,
    disabled,
    getButtonProps,
    getListboxProps,
    getOptionProps,
    getOptionState,
    value
  } = useSelect_default({
    buttonComponent: Button,
    buttonRef: handleButtonRef,
    defaultValue,
    disabled: disabledProp,
    listboxId: (_componentsProps$list2 = componentsProps.listbox) == null ? void 0 : _componentsProps$list2.id,
    listboxRef: handleListboxRef,
    multiple: false,
    onChange,
    onOpenChange: handleOpenChange,
    open: listboxOpen,
    options,
    value: valueProp
  });
  const ownerState = _extends({}, props, {
    active: buttonActive,
    defaultListboxOpen,
    disabled,
    focusVisible: buttonFocusVisible,
    open: listboxOpen,
    renderValue,
    value
  });
  const classes8 = useUtilityClasses7(ownerState);
  const selectedOptions = React39.useMemo(() => {
    return options.find((o) => value === o.value);
  }, [options, value]);
  const buttonProps = appendOwnerState(Button, _extends({}, getButtonProps(), other, componentsProps.root, {
    className: clsx_m_default(className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, classes8.root)
  }), ownerState);
  const listboxProps = appendOwnerState(ListboxRoot, _extends({}, getListboxProps(), componentsProps.listbox, {
    className: clsx_m_default((_componentsProps$list3 = componentsProps.listbox) == null ? void 0 : _componentsProps$list3.className, classes8.listbox)
  }), ownerState);
  const popperProps = appendOwnerState(Popper, _extends({
    open: listboxOpen,
    anchorEl: buttonRef.current,
    placement: "bottom-start",
    disablePortal: true,
    role: void 0
  }, componentsProps.popper, {
    className: clsx_m_default((_componentsProps$popp = componentsProps.popper) == null ? void 0 : _componentsProps$popp.className, classes8.popper)
  }), ownerState);
  const context = {
    getOptionProps,
    getOptionState,
    listboxRef
  };
  return (0, import_jsx_runtime31.jsxs)(React39.Fragment, {
    children: [(0, import_jsx_runtime30.jsx)(Button, _extends({}, buttonProps, {
      children: renderValue(selectedOptions)
    })), buttonDefined && (0, import_jsx_runtime30.jsx)(Popper, _extends({}, popperProps, {
      children: (0, import_jsx_runtime30.jsx)(ListboxRoot, _extends({}, listboxProps, {
        children: (0, import_jsx_runtime30.jsx)(SelectUnstyledContext.Provider, {
          value: context,
          children
        })
      }))
    }))]
  });
});
true ? SelectUnstyled.propTypes = {
  autoFocus: import_prop_types16.default.bool,
  children: import_prop_types16.default.node,
  className: import_prop_types16.default.string,
  component: import_prop_types16.default.elementType,
  components: import_prop_types16.default.shape({
    Listbox: import_prop_types16.default.elementType,
    Popper: import_prop_types16.default.elementType,
    Root: import_prop_types16.default.elementType
  }),
  componentsProps: import_prop_types16.default.shape({
    listbox: import_prop_types16.default.object,
    popper: import_prop_types16.default.object,
    root: import_prop_types16.default.object
  }),
  defaultListboxOpen: import_prop_types16.default.bool,
  defaultValue: import_prop_types16.default.any,
  disabled: import_prop_types16.default.bool,
  listboxOpen: import_prop_types16.default.bool,
  onChange: import_prop_types16.default.func,
  onListboxOpenChange: import_prop_types16.default.func,
  renderValue: import_prop_types16.default.func,
  value: import_prop_types16.default.any
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/SliderUnstyled/SliderUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React42 = __toESM(require_react());
var import_prop_types18 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/lab/node_modules/@mui/base/SliderUnstyled/sliderUnstyledClasses.js
function getSliderUtilityClass(slot) {
  return generateUtilityClass("MuiSlider", slot);
}
var sliderUnstyledClasses = generateUtilityClasses("MuiSlider", ["root", "active", "focusVisible", "disabled", "dragging", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "markLabelActive", "thumb", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel"]);
var sliderUnstyledClasses_default = sliderUnstyledClasses;

// node_modules/@mui/lab/node_modules/@mui/base/SliderUnstyled/SliderValueLabelUnstyled.js
var React40 = __toESM(require_react());
var import_prop_types17 = __toESM(require_prop_types());
init_clsx_m();
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var useValueLabelClasses = (props) => {
  const {
    open
  } = props;
  const utilityClasses = {
    offset: clsx_m_default(open && sliderUnstyledClasses_default.valueLabelOpen),
    circle: sliderUnstyledClasses_default.valueLabelCircle,
    label: sliderUnstyledClasses_default.valueLabelLabel
  };
  return utilityClasses;
};
function SliderValueLabelUnstyled(props) {
  const {
    children,
    className,
    value,
    theme
  } = props;
  const classes8 = useValueLabelClasses(props);
  return React40.cloneElement(children, {
    className: clsx_m_default(children.props.className)
  }, (0, import_jsx_runtime33.jsxs)(React40.Fragment, {
    children: [children.props.children, (0, import_jsx_runtime32.jsx)("span", {
      className: clsx_m_default(classes8.offset, className),
      theme,
      "aria-hidden": true,
      children: (0, import_jsx_runtime32.jsx)("span", {
        className: classes8.circle,
        children: (0, import_jsx_runtime32.jsx)("span", {
          className: classes8.label,
          children: value
        })
      })
    })]
  }));
}
true ? SliderValueLabelUnstyled.propTypes = {
  children: import_prop_types17.default.element.isRequired,
  className: import_prop_types17.default.string,
  theme: import_prop_types17.default.any,
  value: import_prop_types17.default.node
} : void 0;
var SliderValueLabelUnstyled_default = SliderValueLabelUnstyled;

// node_modules/@mui/lab/node_modules/@mui/base/SliderUnstyled/useSlider.js
init_extends();
var React41 = __toESM(require_react());
init_esm();
var INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
function asc(a, b) {
  return a - b;
}
function clamp(value, min, max) {
  if (value == null) {
    return min;
  }
  return Math.min(Math.max(min, value), max);
}
function findClosest(values, currentValue) {
  var _values$reduce;
  const {
    index: closestIndex
  } = (_values$reduce = values.reduce((acc, value, index) => {
    const distance = Math.abs(currentValue - value);
    if (acc === null || distance < acc.distance || distance === acc.distance) {
      return {
        distance,
        index
      };
    }
    return acc;
  }, null)) != null ? _values$reduce : {};
  return closestIndex;
}
function trackFinger(event, touchId) {
  if (touchId.current !== void 0 && event.changedTouches) {
    const touchEvent = event;
    for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
      const touch = touchEvent.changedTouches[i];
      if (touch.identifier === touchId.current) {
        return {
          x: touch.clientX,
          y: touch.clientY
        };
      }
    }
    return false;
  }
  return {
    x: event.clientX,
    y: event.clientY
  };
}
function valueToPercent(value, min, max) {
  return (value - min) * 100 / (max - min);
}
function percentToValue(percent, min, max) {
  return (max - min) * percent + min;
}
function getDecimalPrecision(num) {
  if (Math.abs(num) < 1) {
    const parts = num.toExponential().split("e-");
    const matissaDecimalPart = parts[0].split(".")[1];
    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
  }
  const decimalPart = num.toString().split(".")[1];
  return decimalPart ? decimalPart.length : 0;
}
function roundValueToStep(value, step, min) {
  const nearest = Math.round((value - min) / step) * step + min;
  return Number(nearest.toFixed(getDecimalPrecision(step)));
}
function setValueIndex({
  values,
  newValue,
  index
}) {
  const output = values.slice();
  output[index] = newValue;
  return output.sort(asc);
}
function focusThumb({
  sliderRef,
  activeIndex,
  setActive
}) {
  var _sliderRef$current, _doc$activeElement;
  const doc = ownerDocument(sliderRef.current);
  if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
    var _sliderRef$current2;
    (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
  }
  if (setActive) {
    setActive(activeIndex);
  }
}
var axisProps = {
  horizontal: {
    offset: (percent) => ({
      left: `${percent}%`
    }),
    leap: (percent) => ({
      width: `${percent}%`
    })
  },
  "horizontal-reverse": {
    offset: (percent) => ({
      right: `${percent}%`
    }),
    leap: (percent) => ({
      width: `${percent}%`
    })
  },
  vertical: {
    offset: (percent) => ({
      bottom: `${percent}%`
    }),
    leap: (percent) => ({
      height: `${percent}%`
    })
  }
};
var Identity = (x) => x;
var cachedSupportsTouchActionNone;
function doesSupportTouchActionNone() {
  if (cachedSupportsTouchActionNone === void 0) {
    if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
      cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
    } else {
      cachedSupportsTouchActionNone = true;
    }
  }
  return cachedSupportsTouchActionNone;
}
function useSlider(props) {
  const {
    ref,
    "aria-labelledby": ariaLabelledby,
    defaultValue,
    disableSwap = false,
    disabled = false,
    marks: marksProp = false,
    max = 100,
    min = 0,
    name,
    onChange,
    onChangeCommitted,
    orientation = "horizontal",
    scale = Identity,
    step = 1,
    tabIndex,
    value: valueProp,
    isRtl = false
  } = props;
  const touchId = React41.useRef();
  const [active, setActive] = React41.useState(-1);
  const [open, setOpen] = React41.useState(-1);
  const [dragging, setDragging] = React41.useState(false);
  const moveCount = React41.useRef(0);
  const [valueDerived, setValueState] = useControlled({
    controlled: valueProp,
    default: defaultValue != null ? defaultValue : min,
    name: "Slider"
  });
  const handleChange = onChange && ((event, value, thumbIndex) => {
    const nativeEvent = event.nativeEvent || event;
    const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
    Object.defineProperty(clonedEvent, "target", {
      writable: true,
      value: {
        value,
        name
      }
    });
    onChange(clonedEvent, value, thumbIndex);
  });
  const range = Array.isArray(valueDerived);
  let values = range ? valueDerived.slice().sort(asc) : [valueDerived];
  values = values.map((value) => clamp(value, min, max));
  const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_, index) => ({
    value: min + step * index
  })) : marksProp || [];
  const marksValues = marks.map((mark) => mark.value);
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [focusVisible, setFocusVisible] = React41.useState(-1);
  const sliderRef = React41.useRef();
  const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
  const handleRef = useForkRef(ref, handleFocusRef);
  const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
    var _otherHandlers$onFocu;
    const index = Number(event.currentTarget.getAttribute("data-index"));
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setFocusVisible(index);
    }
    setOpen(index);
    otherHandlers == null ? void 0 : (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
  };
  const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
    var _otherHandlers$onBlur;
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(-1);
    }
    setOpen(-1);
    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
  };
  useEnhancedEffect_default(() => {
    if (disabled && sliderRef.current.contains(document.activeElement)) {
      var _document$activeEleme;
      (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.blur();
    }
  }, [disabled]);
  if (disabled && active !== -1) {
    setActive(-1);
  }
  if (disabled && focusVisible !== -1) {
    setFocusVisible(-1);
  }
  const createHandleHiddenInputChange = (otherHandlers) => (event) => {
    var _otherHandlers$onChan;
    (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event);
    const index = Number(event.currentTarget.getAttribute("data-index"));
    const value = values[index];
    const marksIndex = marksValues.indexOf(value);
    let newValue = event.target.valueAsNumber;
    if (marks && step == null) {
      newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
    }
    newValue = clamp(newValue, min, max);
    if (marks && step == null) {
      const currentMarkIndex = marksValues.indexOf(values[index]);
      newValue = newValue < values[index] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
    }
    if (range) {
      if (disableSwap) {
        newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
      }
      const previousValue = newValue;
      newValue = setValueIndex({
        values,
        newValue,
        index
      });
      let activeIndex = index;
      if (!disableSwap) {
        activeIndex = newValue.indexOf(previousValue);
      }
      focusThumb({
        sliderRef,
        activeIndex
      });
    }
    setValueState(newValue);
    setFocusVisible(index);
    if (handleChange) {
      handleChange(event, newValue, index);
    }
    if (onChangeCommitted) {
      onChangeCommitted(event, newValue);
    }
  };
  const previousIndex = React41.useRef();
  let axis = orientation;
  if (isRtl && orientation === "horizontal") {
    axis += "-reverse";
  }
  const getFingerNewValue = ({
    finger,
    move = false,
    values: values2
  }) => {
    const {
      current: slider
    } = sliderRef;
    const {
      width,
      height,
      bottom,
      left
    } = slider.getBoundingClientRect();
    let percent;
    if (axis.indexOf("vertical") === 0) {
      percent = (bottom - finger.y) / height;
    } else {
      percent = (finger.x - left) / width;
    }
    if (axis.indexOf("-reverse") !== -1) {
      percent = 1 - percent;
    }
    let newValue;
    newValue = percentToValue(percent, min, max);
    if (step) {
      newValue = roundValueToStep(newValue, step, min);
    } else {
      const closestIndex = findClosest(marksValues, newValue);
      newValue = marksValues[closestIndex];
    }
    newValue = clamp(newValue, min, max);
    let activeIndex = 0;
    if (range) {
      if (!move) {
        activeIndex = findClosest(values2, newValue);
      } else {
        activeIndex = previousIndex.current;
      }
      if (disableSwap) {
        newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
      }
      const previousValue = newValue;
      newValue = setValueIndex({
        values: values2,
        newValue,
        index: activeIndex
      });
      if (!(disableSwap && move)) {
        activeIndex = newValue.indexOf(previousValue);
        previousIndex.current = activeIndex;
      }
    }
    return {
      newValue,
      activeIndex
    };
  };
  const handleTouchMove = useEventCallback((nativeEvent) => {
    const finger = trackFinger(nativeEvent, touchId);
    if (!finger) {
      return;
    }
    moveCount.current += 1;
    if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
      handleTouchEnd(nativeEvent);
      return;
    }
    const {
      newValue,
      activeIndex
    } = getFingerNewValue({
      finger,
      move: true,
      values
    });
    focusThumb({
      sliderRef,
      activeIndex,
      setActive
    });
    setValueState(newValue);
    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
      setDragging(true);
    }
    if (handleChange) {
      handleChange(nativeEvent, newValue, activeIndex);
    }
  });
  const handleTouchEnd = useEventCallback((nativeEvent) => {
    const finger = trackFinger(nativeEvent, touchId);
    setDragging(false);
    if (!finger) {
      return;
    }
    const {
      newValue
    } = getFingerNewValue({
      finger,
      values
    });
    setActive(-1);
    if (nativeEvent.type === "touchend") {
      setOpen(-1);
    }
    if (onChangeCommitted) {
      onChangeCommitted(nativeEvent, newValue);
    }
    touchId.current = void 0;
    stopListening();
  });
  const handleTouchStart = useEventCallback((nativeEvent) => {
    if (disabled) {
      return;
    }
    if (!doesSupportTouchActionNone()) {
      nativeEvent.preventDefault();
    }
    const touch = nativeEvent.changedTouches[0];
    if (touch != null) {
      touchId.current = touch.identifier;
    }
    const finger = trackFinger(nativeEvent, touchId);
    if (finger !== false) {
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        values
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (handleChange) {
        handleChange(nativeEvent, newValue, activeIndex);
      }
    }
    moveCount.current = 0;
    const doc = ownerDocument(sliderRef.current);
    doc.addEventListener("touchmove", handleTouchMove);
    doc.addEventListener("touchend", handleTouchEnd);
  });
  const stopListening = React41.useCallback(() => {
    const doc = ownerDocument(sliderRef.current);
    doc.removeEventListener("mousemove", handleTouchMove);
    doc.removeEventListener("mouseup", handleTouchEnd);
    doc.removeEventListener("touchmove", handleTouchMove);
    doc.removeEventListener("touchend", handleTouchEnd);
  }, [handleTouchEnd, handleTouchMove]);
  React41.useEffect(() => {
    const {
      current: slider
    } = sliderRef;
    slider.addEventListener("touchstart", handleTouchStart, {
      passive: doesSupportTouchActionNone()
    });
    return () => {
      slider.removeEventListener("touchstart", handleTouchStart, {
        passive: doesSupportTouchActionNone()
      });
      stopListening();
    };
  }, [stopListening, handleTouchStart]);
  React41.useEffect(() => {
    if (disabled) {
      stopListening();
    }
  }, [disabled, stopListening]);
  const createHandleMouseDown = (otherHandlers) => (event) => {
    var _otherHandlers$onMous;
    (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
    if (disabled) {
      return;
    }
    if (event.defaultPrevented) {
      return;
    }
    if (event.button !== 0) {
      return;
    }
    event.preventDefault();
    const finger = trackFinger(event, touchId);
    if (finger !== false) {
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        values
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (handleChange) {
        handleChange(event, newValue, activeIndex);
      }
    }
    moveCount.current = 0;
    const doc = ownerDocument(sliderRef.current);
    doc.addEventListener("mousemove", handleTouchMove);
    doc.addEventListener("mouseup", handleTouchEnd);
  };
  const trackOffset = valueToPercent(range ? values[0] : min, min, max);
  const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;
  const getRootProps = (otherHandlers) => {
    const ownEventHandlers = {
      onMouseDown: createHandleMouseDown(otherHandlers || {})
    };
    const mergedEventHandlers = _extends({}, otherHandlers, ownEventHandlers);
    return _extends({
      ref: handleRef
    }, mergedEventHandlers);
  };
  const createHandleMouseOver = (otherHandlers) => (event) => {
    var _otherHandlers$onMous2;
    (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
    const index = Number(event.currentTarget.getAttribute("data-index"));
    setOpen(index);
  };
  const createHandleMouseLeave = (otherHandlers) => (event) => {
    var _otherHandlers$onMous3;
    (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
    setOpen(-1);
  };
  const getThumbProps = (otherHandlers) => {
    const ownEventHandlers = {
      onMouseOver: createHandleMouseOver(otherHandlers || {}),
      onMouseLeave: createHandleMouseLeave(otherHandlers || {})
    };
    const mergedEventHandlers = _extends({}, otherHandlers, ownEventHandlers);
    return _extends({}, mergedEventHandlers);
  };
  const getHiddenInputProps = (otherHandlers) => {
    const ownEventHandlers = {
      onChange: createHandleHiddenInputChange(otherHandlers || {}),
      onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
      onBlur: createHandleHiddenInputBlur(otherHandlers || {})
    };
    const mergedEventHandlers = _extends({}, otherHandlers, ownEventHandlers);
    return _extends({
      tabIndex,
      "aria-labelledby": ariaLabelledby,
      "aria-orientation": orientation,
      "aria-valuemax": scale(max),
      "aria-valuemin": scale(min),
      name,
      type: "range",
      min: props.min,
      max: props.max,
      step: props.step,
      disabled
    }, mergedEventHandlers, {
      style: _extends({}, visuallyHidden_default, {
        direction: isRtl ? "rtl" : "ltr",
        width: "100%",
        height: "100%"
      })
    });
  };
  return {
    axis,
    axisProps,
    getRootProps,
    getHiddenInputProps,
    getThumbProps,
    dragging,
    marks,
    values,
    active,
    focusVisible,
    open,
    range,
    trackOffset,
    trackLeap
  };
}

// node_modules/@mui/lab/node_modules/@mui/base/SliderUnstyled/SliderUnstyled.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var _excluded16 = ["aria-label", "aria-valuetext", "className", "component", "classes", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "onMouseDown", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "components", "componentsProps"];
var Identity2 = (x) => x;
var useUtilityClasses8 = (ownerState) => {
  const {
    disabled,
    dragging,
    marked,
    orientation,
    track,
    classes: classes8
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse"],
    rail: ["rail"],
    track: ["track"],
    mark: ["mark"],
    markActive: ["markActive"],
    markLabel: ["markLabel"],
    markLabelActive: ["markLabelActive"],
    valueLabel: ["valueLabel"],
    thumb: ["thumb", disabled && "disabled"],
    active: ["active"],
    disabled: ["disabled"],
    focusVisible: ["focusVisible"]
  };
  return composeClasses(slots, getSliderUtilityClass, classes8);
};
var Forward = ({
  children
}) => children;
var SliderUnstyled = React42.forwardRef(function SliderUnstyled2(props, ref) {
  var _ref, _components$Rail, _components$Track, _components$Thumb, _components$ValueLabe, _components$Mark, _components$MarkLabel;
  const {
    "aria-label": ariaLabel,
    "aria-valuetext": ariaValuetext,
    className,
    component,
    classes: classesProp,
    disableSwap = false,
    disabled = false,
    getAriaLabel,
    getAriaValueText,
    marks: marksProp = false,
    max = 100,
    min = 0,
    onMouseDown,
    orientation = "horizontal",
    scale = Identity2,
    step = 1,
    track = "normal",
    valueLabelDisplay = "off",
    valueLabelFormat = Identity2,
    isRtl = false,
    components = {},
    componentsProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  const ownerState = _extends({}, props, {
    mark: marksProp,
    classes: classesProp,
    disabled,
    isRtl,
    max,
    min,
    orientation,
    scale,
    step,
    track,
    valueLabelDisplay,
    valueLabelFormat
  });
  const {
    axisProps: axisProps2,
    getRootProps,
    getHiddenInputProps,
    getThumbProps,
    open,
    active,
    axis,
    range,
    focusVisible,
    dragging,
    marks,
    values,
    trackOffset,
    trackLeap
  } = useSlider(_extends({}, ownerState, {
    ref
  }));
  ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
  ownerState.dragging = dragging;
  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : "span";
  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);
  const Rail = (_components$Rail = components.Rail) != null ? _components$Rail : "span";
  const railProps = appendOwnerState(Rail, componentsProps.rail, ownerState);
  const Track = (_components$Track = components.Track) != null ? _components$Track : "span";
  const trackProps = appendOwnerState(Track, componentsProps.track, ownerState);
  const trackStyle = _extends({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap));
  const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : "span";
  const thumbProps = appendOwnerState(Thumb, componentsProps.thumb, ownerState);
  const ValueLabel = (_components$ValueLabe = components.ValueLabel) != null ? _components$ValueLabe : SliderValueLabelUnstyled_default;
  const valueLabelProps = appendOwnerState(ValueLabel, componentsProps.valueLabel, ownerState);
  const Mark = (_components$Mark = components.Mark) != null ? _components$Mark : "span";
  const markProps = appendOwnerState(Mark, componentsProps.mark, ownerState);
  const MarkLabel = (_components$MarkLabel = components.MarkLabel) != null ? _components$MarkLabel : "span";
  const markLabelProps = appendOwnerState(MarkLabel, componentsProps.markLabel, ownerState);
  const Input = components.Input || "input";
  const inputProps = appendOwnerState(Input, componentsProps.input, ownerState);
  const hiddenInputProps = getHiddenInputProps();
  const classes8 = useUtilityClasses8(ownerState);
  return (0, import_jsx_runtime35.jsxs)(Root, _extends({}, rootProps, getRootProps({
    onMouseDown
  }), {
    className: clsx_m_default(classes8.root, rootProps.className, className),
    children: [(0, import_jsx_runtime34.jsx)(Rail, _extends({}, railProps, {
      className: clsx_m_default(classes8.rail, railProps.className)
    })), (0, import_jsx_runtime34.jsx)(Track, _extends({}, trackProps, {
      className: clsx_m_default(classes8.track, trackProps.className),
      style: _extends({}, trackStyle, trackProps.style)
    })), marks.map((mark, index) => {
      const percent = valueToPercent(mark.value, min, max);
      const style = axisProps2[axis].offset(percent);
      let markActive;
      if (track === false) {
        markActive = values.indexOf(mark.value) !== -1;
      } else {
        markActive = track === "normal" && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === "inverted" && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
      }
      return (0, import_jsx_runtime35.jsxs)(React42.Fragment, {
        children: [(0, import_jsx_runtime34.jsx)(Mark, _extends({
          "data-index": index
        }, markProps, !isHostComponent_default(Mark) && {
          markActive
        }, {
          style: _extends({}, style, markProps.style),
          className: clsx_m_default(classes8.mark, markProps.className, markActive && classes8.markActive)
        })), mark.label != null ? (0, import_jsx_runtime34.jsx)(MarkLabel, _extends({
          "aria-hidden": true,
          "data-index": index
        }, markLabelProps, !isHostComponent_default(MarkLabel) && {
          markLabelActive: markActive
        }, {
          style: _extends({}, style, markLabelProps.style),
          className: clsx_m_default(classes8.markLabel, markLabelProps.className, markActive && classes8.markLabelActive),
          children: mark.label
        })) : null]
      }, mark.value);
    }), values.map((value, index) => {
      const percent = valueToPercent(value, min, max);
      const style = axisProps2[axis].offset(percent);
      const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabel;
      return (0, import_jsx_runtime34.jsx)(React42.Fragment, {
        children: (0, import_jsx_runtime34.jsx)(ValueLabelComponent, _extends({}, !isHostComponent_default(ValueLabelComponent) && {
          valueLabelFormat,
          valueLabelDisplay,
          value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index) : valueLabelFormat,
          index,
          open: open === index || active === index || valueLabelDisplay === "on",
          disabled
        }, valueLabelProps, {
          className: clsx_m_default(classes8.valueLabel, valueLabelProps.className),
          children: (0, import_jsx_runtime34.jsx)(Thumb, _extends({
            "data-index": index
          }, thumbProps, getThumbProps(), {
            className: clsx_m_default(classes8.thumb, thumbProps.className, active === index && classes8.active, focusVisible === index && classes8.focusVisible)
          }, !isHostComponent_default(Thumb) && {
            ownerState: _extends({}, ownerState, thumbProps.ownerState)
          }, {
            style: _extends({}, style, {
              pointerEvents: disableSwap && active !== index ? "none" : void 0
            }, thumbProps.style),
            children: (0, import_jsx_runtime34.jsx)(Input, _extends({}, hiddenInputProps, {
              "data-index": index,
              "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
              "aria-valuenow": scale(value),
              "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
              value: values[index]
            }, !isHostComponent_default(Input) && {
              ownerState: _extends({}, ownerState, inputProps.ownerState)
            }, inputProps, {
              style: _extends({}, hiddenInputProps.style, inputProps.style)
            }))
          }))
        }))
      }, index);
    })]
  }));
});
true ? SliderUnstyled.propTypes = {
  "aria-label": chainPropTypes(import_prop_types18.default.string, (props) => {
    const range = Array.isArray(props.value || props.defaultValue);
    if (range && props["aria-label"] != null) {
      return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
    }
    return null;
  }),
  "aria-labelledby": import_prop_types18.default.string,
  "aria-valuetext": chainPropTypes(import_prop_types18.default.string, (props) => {
    const range = Array.isArray(props.value || props.defaultValue);
    if (range && props["aria-valuetext"] != null) {
      return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
    }
    return null;
  }),
  children: import_prop_types18.default.node,
  classes: import_prop_types18.default.object,
  className: import_prop_types18.default.string,
  component: import_prop_types18.default.elementType,
  components: import_prop_types18.default.shape({
    Input: import_prop_types18.default.elementType,
    Mark: import_prop_types18.default.elementType,
    MarkLabel: import_prop_types18.default.elementType,
    Rail: import_prop_types18.default.elementType,
    Root: import_prop_types18.default.elementType,
    Thumb: import_prop_types18.default.elementType,
    Track: import_prop_types18.default.elementType,
    ValueLabel: import_prop_types18.default.elementType
  }),
  componentsProps: import_prop_types18.default.shape({
    input: import_prop_types18.default.object,
    mark: import_prop_types18.default.object,
    markLabel: import_prop_types18.default.object,
    rail: import_prop_types18.default.object,
    root: import_prop_types18.default.object,
    thumb: import_prop_types18.default.object,
    track: import_prop_types18.default.object,
    valueLabel: import_prop_types18.default.shape({
      className: import_prop_types18.default.string,
      components: import_prop_types18.default.shape({
        Root: import_prop_types18.default.elementType
      }),
      style: import_prop_types18.default.object,
      value: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.number), import_prop_types18.default.number]),
      valueLabelDisplay: import_prop_types18.default.oneOf(["auto", "off", "on"])
    })
  }),
  defaultValue: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.number), import_prop_types18.default.number]),
  disabled: import_prop_types18.default.bool,
  disableSwap: import_prop_types18.default.bool,
  getAriaLabel: import_prop_types18.default.func,
  getAriaValueText: import_prop_types18.default.func,
  isRtl: import_prop_types18.default.bool,
  marks: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.shape({
    label: import_prop_types18.default.node,
    value: import_prop_types18.default.number.isRequired
  })), import_prop_types18.default.bool]),
  max: import_prop_types18.default.number,
  min: import_prop_types18.default.number,
  name: import_prop_types18.default.string,
  onChange: import_prop_types18.default.func,
  onChangeCommitted: import_prop_types18.default.func,
  onMouseDown: import_prop_types18.default.func,
  orientation: import_prop_types18.default.oneOf(["horizontal", "vertical"]),
  scale: import_prop_types18.default.func,
  step: import_prop_types18.default.number,
  tabIndex: import_prop_types18.default.number,
  track: import_prop_types18.default.oneOf(["inverted", "normal", false]),
  value: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.number), import_prop_types18.default.number]),
  valueLabelDisplay: import_prop_types18.default.oneOf(["auto", "off", "on"]),
  valueLabelFormat: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.string])
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/SwitchUnstyled/SwitchUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React44 = __toESM(require_react());
var import_prop_types19 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/lab/node_modules/@mui/base/SwitchUnstyled/useSwitch.js
init_extends();
var React43 = __toESM(require_react());
init_esm();
function useSwitch(props) {
  const {
    checked: checkedProp,
    defaultChecked,
    disabled,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly,
    required
  } = props;
  const [checked, setCheckedState] = useControlled({
    controlled: checkedProp,
    default: Boolean(defaultChecked),
    name: "Switch",
    state: "checked"
  });
  const handleInputChange = (event, otherHandler) => {
    if (event.nativeEvent.defaultPrevented) {
      return;
    }
    setCheckedState(event.target.checked);
    onChange == null ? void 0 : onChange(event);
    otherHandler == null ? void 0 : otherHandler(event);
  };
  const {
    isFocusVisibleRef,
    onBlur: handleBlurVisible,
    onFocus: handleFocusVisible,
    ref: focusVisibleRef
  } = useIsFocusVisible();
  const [focusVisible, setFocusVisible] = React43.useState(false);
  if (disabled && focusVisible) {
    setFocusVisible(false);
  }
  React43.useEffect(() => {
    isFocusVisibleRef.current = focusVisible;
  }, [focusVisible, isFocusVisibleRef]);
  const inputRef = React43.useRef(null);
  const handleFocus = (event, otherHandler) => {
    if (!inputRef.current) {
      inputRef.current = event.currentTarget;
    }
    handleFocusVisible(event);
    if (isFocusVisibleRef.current === true) {
      setFocusVisible(true);
      onFocusVisible == null ? void 0 : onFocusVisible(event);
    }
    onFocus == null ? void 0 : onFocus(event);
    otherHandler == null ? void 0 : otherHandler(event);
  };
  const handleBlur2 = (event, otherHandler) => {
    handleBlurVisible(event);
    if (isFocusVisibleRef.current === false) {
      setFocusVisible(false);
    }
    onBlur == null ? void 0 : onBlur(event);
    otherHandler == null ? void 0 : otherHandler(event);
  };
  const handleRefChange = useForkRef(focusVisibleRef, inputRef);
  const getInputProps = (otherProps = {}) => _extends({
    checked: checkedProp,
    defaultChecked,
    disabled,
    readOnly,
    required,
    type: "checkbox"
  }, otherProps, {
    onChange: (event) => handleInputChange(event, otherProps.onChange),
    onFocus: (event) => handleFocus(event, otherProps.onFocus),
    onBlur: (event) => handleBlur2(event, otherProps.onBlur),
    ref: handleRefChange
  });
  return {
    checked,
    disabled: Boolean(disabled),
    focusVisible,
    getInputProps,
    readOnly: Boolean(readOnly)
  };
}

// node_modules/@mui/lab/node_modules/@mui/base/SwitchUnstyled/switchUnstyledClasses.js
var switchUnstyledClasses = generateUtilityClasses("MuiSwitch", ["root", "input", "track", "thumb", "checked", "disabled", "focusVisible", "readOnly"]);
var switchUnstyledClasses_default = switchUnstyledClasses;

// node_modules/@mui/lab/node_modules/@mui/base/SwitchUnstyled/SwitchUnstyled.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var _excluded17 = ["checked", "className", "component", "components", "componentsProps", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required"];
var SwitchUnstyled = React44.forwardRef(function SwitchUnstyled2(props, ref) {
  var _ref, _components$Thumb, _componentsProps$thum, _components$Input, _componentsProps$inpu, _components$Track, _componentsProps$trac;
  const {
    checked: checkedProp,
    className,
    component,
    components = {},
    componentsProps = {},
    defaultChecked,
    disabled: disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly: readOnlyProp
  } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded17);
  const useSwitchProps = {
    checked: checkedProp,
    defaultChecked,
    disabled: disabledProp,
    onBlur,
    onChange,
    onFocus,
    onFocusVisible,
    readOnly: readOnlyProp
  };
  const {
    getInputProps,
    checked,
    disabled,
    focusVisible,
    readOnly
  } = useSwitch(useSwitchProps);
  const ownerState = _extends({}, props, {
    checked,
    disabled,
    focusVisible,
    readOnly
  });
  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : "span";
  const rootProps = appendOwnerState(Root, _extends({}, otherProps, componentsProps.root), ownerState);
  const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : "span";
  const thumbProps = appendOwnerState(Thumb, (_componentsProps$thum = componentsProps.thumb) != null ? _componentsProps$thum : {}, ownerState);
  const Input = (_components$Input = components.Input) != null ? _components$Input : "input";
  const inputProps = appendOwnerState(Input, (_componentsProps$inpu = componentsProps.input) != null ? _componentsProps$inpu : {}, ownerState);
  const Track = components.Track === null ? () => null : (_components$Track = components.Track) != null ? _components$Track : "span";
  const trackProps = appendOwnerState(Track, (_componentsProps$trac = componentsProps.track) != null ? _componentsProps$trac : {}, ownerState);
  const stateClasses = clsx_m_default(checked && switchUnstyledClasses_default.checked, disabled && switchUnstyledClasses_default.disabled, focusVisible && switchUnstyledClasses_default.focusVisible, readOnly && switchUnstyledClasses_default.readOnly);
  return (0, import_jsx_runtime37.jsxs)(Root, _extends({
    ref
  }, rootProps, {
    className: clsx_m_default(switchUnstyledClasses_default.root, stateClasses, className, rootProps == null ? void 0 : rootProps.className),
    children: [(0, import_jsx_runtime36.jsx)(Track, _extends({}, trackProps, {
      className: clsx_m_default(switchUnstyledClasses_default.track, trackProps == null ? void 0 : trackProps.className)
    })), (0, import_jsx_runtime36.jsx)(Thumb, _extends({}, thumbProps, {
      className: clsx_m_default(switchUnstyledClasses_default.thumb, thumbProps == null ? void 0 : thumbProps.className)
    })), (0, import_jsx_runtime36.jsx)(Input, _extends({}, getInputProps(inputProps), {
      className: clsx_m_default(switchUnstyledClasses_default.input, inputProps == null ? void 0 : inputProps.className)
    }))]
  }));
});
true ? SwitchUnstyled.propTypes = {
  checked: import_prop_types19.default.bool,
  className: import_prop_types19.default.string,
  component: import_prop_types19.default.elementType,
  components: import_prop_types19.default.shape({
    Input: import_prop_types19.default.elementType,
    Root: import_prop_types19.default.elementType,
    Thumb: import_prop_types19.default.elementType,
    Track: import_prop_types19.default.oneOfType([import_prop_types19.default.elementType, import_prop_types19.default.oneOf([null])])
  }),
  componentsProps: import_prop_types19.default.shape({
    input: import_prop_types19.default.object,
    root: import_prop_types19.default.object,
    thumb: import_prop_types19.default.object,
    track: import_prop_types19.default.object
  }),
  defaultChecked: import_prop_types19.default.bool,
  disabled: import_prop_types19.default.bool,
  onBlur: import_prop_types19.default.func,
  onChange: import_prop_types19.default.func,
  onFocus: import_prop_types19.default.func,
  onFocusVisible: import_prop_types19.default.func,
  readOnly: import_prop_types19.default.bool,
  required: import_prop_types19.default.bool
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/TabPanelUnstyled/TabPanelUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React48 = __toESM(require_react());
var import_prop_types21 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/lab/node_modules/@mui/base/TabPanelUnstyled/tabPanelUnstyledClasses.js
function getTabPanelUnstyledUtilityClass(slot) {
  return generateUtilityClass("TabPanelUnstyled", slot);
}
var tabPanelUnstyledClasses = generateUtilityClasses("TabPanelUnstyled", ["root", "hidden"]);

// node_modules/@mui/lab/node_modules/@mui/base/TabsUnstyled/TabsUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React47 = __toESM(require_react());
var import_prop_types20 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/lab/node_modules/@mui/base/TabsUnstyled/tabsUnstyledClasses.js
function getTabsUnstyledUtilityClass(slot) {
  return generateUtilityClass("TabsUnstyled", slot);
}
var tabsUnstyledClasses = generateUtilityClasses("TabsUnstyled", ["root", "horizontal", "vertical"]);

// node_modules/@mui/lab/node_modules/@mui/base/TabsUnstyled/useTabs.js
var React45 = __toESM(require_react());
init_esm();
var useTabs = (props) => {
  const {
    value: valueProp,
    defaultValue,
    onChange,
    orientation,
    direction,
    selectionFollowsFocus
  } = props;
  const [value, setValue] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "Tabs",
    state: "value"
  });
  const idPrefix = useId();
  const onSelected = React45.useCallback((e, newValue) => {
    setValue(newValue);
    if (onChange) {
      onChange(e, newValue);
    }
  }, [onChange, setValue]);
  const getRootProps = () => {
    return {};
  };
  const tabsContextValue = React45.useMemo(() => {
    return {
      idPrefix,
      value,
      onSelected,
      orientation,
      direction,
      selectionFollowsFocus
    };
  }, [idPrefix, value, onSelected, orientation, direction, selectionFollowsFocus]);
  return {
    getRootProps,
    tabsContextValue
  };
};
var useTabs_default = useTabs;

// node_modules/@mui/lab/node_modules/@mui/base/TabsUnstyled/TabsContext.js
var React46 = __toESM(require_react());
var Context = React46.createContext(null);
if (true) {
  Context.displayName = "TabsContext";
}
function useTabContext() {
  return React46.useContext(Context);
}
function getPanelId(context, value) {
  const {
    idPrefix
  } = context;
  if (idPrefix === null) {
    return null;
  }
  return `${context.idPrefix}-P-${value}`;
}
function getTabId(context, value) {
  const {
    idPrefix
  } = context;
  if (idPrefix === null) {
    return null;
  }
  return `${context.idPrefix}-T-${value}`;
}
var TabsContext_default = Context;

// node_modules/@mui/lab/node_modules/@mui/base/TabsUnstyled/TabsUnstyled.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var _excluded18 = ["children", "className", "value", "defaultValue", "orientation", "direction", "component", "components", "componentsProps", "onChange", "selectionFollowsFocus"];
var useUtilityClasses9 = (ownerState) => {
  const {
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation]
  };
  return composeClasses(slots, getTabsUnstyledUtilityClass, {});
};
var TabsUnstyled = React47.forwardRef((props, ref) => {
  var _ref, _componentsProps$root;
  const {
    children,
    className,
    orientation = "horizontal",
    direction = "ltr",
    component,
    components = {},
    componentsProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
  const {
    tabsContextValue,
    getRootProps
  } = useTabs_default(props);
  const ownerState = _extends({}, props, {
    orientation,
    direction
  });
  const classes8 = useUtilityClasses9(ownerState);
  const TabsRoot = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
  const tabsRootProps = appendOwnerState(TabsRoot, _extends({}, other, componentsProps.root), ownerState);
  return (0, import_jsx_runtime38.jsx)(TabsRoot, _extends({}, getRootProps(), tabsRootProps, {
    ref,
    className: clsx_m_default(classes8.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),
    children: (0, import_jsx_runtime38.jsx)(TabsContext_default.Provider, {
      value: tabsContextValue,
      children
    })
  }));
});
true ? TabsUnstyled.propTypes = {
  children: import_prop_types20.default.node,
  className: import_prop_types20.default.string,
  component: import_prop_types20.default.elementType,
  components: import_prop_types20.default.shape({
    Root: import_prop_types20.default.elementType
  }),
  componentsProps: import_prop_types20.default.shape({
    root: import_prop_types20.default.object
  }),
  defaultValue: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf([false]), import_prop_types20.default.number, import_prop_types20.default.string]),
  direction: import_prop_types20.default.oneOf(["ltr", "rtl"]),
  onChange: import_prop_types20.default.func,
  orientation: import_prop_types20.default.oneOf(["horizontal", "vertical"]),
  selectionFollowsFocus: import_prop_types20.default.bool,
  value: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf([false]), import_prop_types20.default.number, import_prop_types20.default.string])
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/TabPanelUnstyled/useTabPanel.js
var useTabPanel = (props) => {
  const {
    value
  } = props;
  const context = useTabContext();
  if (context === null) {
    throw new Error("No TabContext provided");
  }
  const hidden = value !== context.value;
  const id = getPanelId(context, value);
  const tabId = getTabId(context, value);
  const getRootProps = () => {
    return {
      "aria-labelledby": tabId,
      hidden,
      id
    };
  };
  return {
    hidden,
    getRootProps
  };
};
var useTabPanel_default = useTabPanel;

// node_modules/@mui/lab/node_modules/@mui/base/TabPanelUnstyled/TabPanelUnstyled.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var _excluded19 = ["children", "className", "value", "components", "componentsProps", "component"];
var useUtilityClasses10 = (ownerState) => {
  const {
    hidden
  } = ownerState;
  const slots = {
    root: ["root", hidden && "hidden"]
  };
  return composeClasses(slots, getTabPanelUnstyledUtilityClass, {});
};
var TabPanelUnstyled = React48.forwardRef(function TabPanelUnstyled2(props, ref) {
  var _ref, _componentsProps$root;
  const {
    children,
    className,
    components = {},
    componentsProps = {},
    component
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const {
    hidden,
    getRootProps
  } = useTabPanel_default(props);
  const ownerState = _extends({}, props, {
    hidden
  });
  const classes8 = useUtilityClasses10(ownerState);
  const TabPanelRoot = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
  const tabPanelRootProps = appendOwnerState(TabPanelRoot, _extends({}, other, componentsProps.root), ownerState);
  return (0, import_jsx_runtime39.jsx)(TabPanelRoot, _extends({}, getRootProps(), {
    ref,
    role: "tabpanel"
  }, tabPanelRootProps, {
    className: clsx_m_default(classes8.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),
    children: !hidden && children
  }));
});
true ? TabPanelUnstyled.propTypes = {
  children: import_prop_types21.default.node,
  className: import_prop_types21.default.string,
  component: import_prop_types21.default.elementType,
  components: import_prop_types21.default.shape({
    Root: import_prop_types21.default.elementType
  }),
  componentsProps: import_prop_types21.default.shape({
    root: import_prop_types21.default.object
  }),
  value: import_prop_types21.default.oneOfType([import_prop_types21.default.number, import_prop_types21.default.string]).isRequired
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/TabsListUnstyled/TabsListUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React50 = __toESM(require_react());
var import_prop_types22 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/lab/node_modules/@mui/base/TabsListUnstyled/tabsListUnstyledClasses.js
function getTabsListUnstyledUtilityClass(slot) {
  return generateUtilityClass("TabsListUnstyled", slot);
}
var tabsListUnstyledClasses = generateUtilityClasses("TabsListUnstyled", ["root", "horizontal", "vertical"]);

// node_modules/@mui/lab/node_modules/@mui/base/TabsListUnstyled/useTabsList.js
init_extends();
var React49 = __toESM(require_react());
init_esm();
var import_react_is = __toESM(require_react_is());
var nextItem = (list, item) => {
  if (!list) {
    return null;
  }
  if (list === item) {
    return list.firstChild;
  }
  if (item && item.nextElementSibling) {
    return item.nextElementSibling;
  }
  return list.firstChild;
};
var previousItem = (list, item) => {
  if (!list) {
    return null;
  }
  if (list === item) {
    return list.lastChild;
  }
  if (item && item.previousElementSibling) {
    return item.previousElementSibling;
  }
  return list.lastChild;
};
var moveFocus = (list, currentFocus, traversalFunction) => {
  let wrappedOnce = false;
  let nextFocus = traversalFunction(list, currentFocus);
  while (list && nextFocus) {
    if (nextFocus === list.firstChild) {
      if (wrappedOnce) {
        return;
      }
      wrappedOnce = true;
    }
    const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
    if (!nextFocus.hasAttribute("tabindex") || nextFocusDisabled) {
      nextFocus = traversalFunction(list, nextFocus);
    } else {
      nextFocus.focus();
      return;
    }
  }
};
var useTabsList = (props) => {
  const {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    children,
    ref
  } = props;
  const tabsListRef = React49.createRef();
  const handleRef = useForkRef(tabsListRef, ref);
  const context = useTabContext();
  if (context === null) {
    throw new Error("No TabContext provided");
  }
  const {
    value,
    orientation = "horizontal",
    direction = "ltr"
  } = context;
  const isRtl = direction === "rtl";
  const handleKeyDown2 = (event) => {
    const list = tabsListRef.current;
    const currentFocus = ownerDocument(list).activeElement;
    const role = currentFocus == null ? void 0 : currentFocus.getAttribute("role");
    if (role !== "tab") {
      return;
    }
    let previousItemKey = orientation === "horizontal" ? "ArrowLeft" : "ArrowUp";
    let nextItemKey = orientation === "horizontal" ? "ArrowRight" : "ArrowDown";
    if (orientation === "horizontal" && isRtl) {
      previousItemKey = "ArrowRight";
      nextItemKey = "ArrowLeft";
    }
    switch (event.key) {
      case previousItemKey:
        event.preventDefault();
        moveFocus(list, currentFocus, previousItem);
        break;
      case nextItemKey:
        event.preventDefault();
        moveFocus(list, currentFocus, nextItem);
        break;
      case "Home":
        event.preventDefault();
        moveFocus(list, null, nextItem);
        break;
      case "End":
        event.preventDefault();
        moveFocus(list, null, previousItem);
        break;
      default:
        break;
    }
  };
  const createHandleKeyDown = (otherHandlers) => (event) => {
    var _otherHandlers$onKeyD;
    handleKeyDown2(event);
    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
  };
  const getRootProps = (otherHandlers) => {
    const propsEventHandlers = extractEventHandlers(props);
    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
    const ownEventHandlers = {
      onKeyDown: createHandleKeyDown(externalEventHandlers)
    };
    const mergedEventHandlers = _extends({}, externalEventHandlers, ownEventHandlers);
    return _extends({
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      "aria-orientation": orientation === "vertical" ? "vertical" : null,
      role: "tablist",
      ref: handleRef
    }, mergedEventHandlers);
  };
  const processChildren = React49.useCallback(() => {
    const valueToIndex = /* @__PURE__ */ new Map();
    let childIndex = 0;
    const processedChildren = React49.Children.map(children, (child) => {
      if (!React49.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is.isFragment)(child)) {
          console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      const childValue = child.props.value === void 0 ? childIndex : child.props.value;
      valueToIndex.set(childValue, childIndex);
      childIndex += 1;
      return React49.cloneElement(child, _extends({
        value: childValue
      }, childIndex === 1 && value === false && !child.props.tabIndex || value === childValue ? {
        tabIndex: 0
      } : {
        tabIndex: -1
      }));
    });
    return processedChildren;
  }, [children, value]);
  return {
    isRtl,
    orientation,
    value,
    processChildren,
    getRootProps
  };
};
var useTabsList_default = useTabsList;

// node_modules/@mui/lab/node_modules/@mui/base/TabsListUnstyled/TabsListUnstyled.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var _excluded20 = ["className", "children", "component", "components", "componentsProps"];
var useUtilityClasses11 = (ownerState) => {
  const {
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation]
  };
  return composeClasses(slots, getTabsListUnstyledUtilityClass, {});
};
var TabsListUnstyled = React50.forwardRef((props, ref) => {
  var _ref, _componentsProps$root;
  const {
    className,
    component,
    components = {},
    componentsProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  const {
    isRtl,
    orientation,
    getRootProps,
    processChildren
  } = useTabsList_default(_extends({}, props, {
    ref
  }));
  const ownerState = _extends({}, props, {
    isRtl,
    orientation
  });
  const classes8 = useUtilityClasses11(ownerState);
  const TabsListRoot = (_ref = component != null ? component : components.Root) != null ? _ref : "div";
  const tabsListRootProps = appendOwnerState(TabsListRoot, _extends({}, other, componentsProps.root), ownerState);
  const processedChildren = processChildren();
  return (0, import_jsx_runtime40.jsx)(TabsListRoot, _extends({}, getRootProps(), tabsListRootProps, {
    className: clsx_m_default(className, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, classes8.root),
    children: processedChildren
  }));
});
true ? TabsListUnstyled.propTypes = {
  children: import_prop_types22.default.node,
  className: import_prop_types22.default.string,
  component: import_prop_types22.default.elementType,
  components: import_prop_types22.default.shape({
    Root: import_prop_types22.default.elementType
  }),
  componentsProps: import_prop_types22.default.shape({
    root: import_prop_types22.default.object
  })
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/TabUnstyled/TabUnstyled.js
init_extends();
init_objectWithoutPropertiesLoose();
var React51 = __toESM(require_react());
var import_prop_types23 = __toESM(require_prop_types());
init_clsx_m();
init_esm();

// node_modules/@mui/lab/node_modules/@mui/base/TabUnstyled/tabUnstyledClasses.js
function getTabUnstyledUtilityClass(slot) {
  return generateUtilityClass("TabUnstyled", slot);
}
var tabUnstyledClasses = generateUtilityClasses("TabUnstyled", ["root", "selected", "disabled"]);

// node_modules/@mui/lab/node_modules/@mui/base/TabUnstyled/useTab.js
init_extends();
init_objectWithoutPropertiesLoose();
var _excluded21 = ["getRootProps"];
var useTab = (props) => {
  const {
    value: valueProp,
    onChange,
    onClick,
    onFocus
  } = props;
  const _useButton = useButton(props), {
    getRootProps: getRootPropsButton
  } = _useButton, otherButtonProps = _objectWithoutPropertiesLoose(_useButton, _excluded21);
  const context = useTabContext();
  if (context === null) {
    throw new Error("No TabContext provided");
  }
  const value = valueProp != null ? valueProp : 0;
  const selected = context.value === value;
  const selectionFollowsFocus = context.selectionFollowsFocus;
  const a11yAttributes = {
    role: "tab",
    "aria-controls": getPanelId(context, value),
    id: getTabId(context, value),
    "aria-selected": selected,
    disabled: otherButtonProps.disabled
  };
  const handleFocus = (event) => {
    if (selectionFollowsFocus && !selected) {
      if (onChange) {
        onChange(event, value);
      }
      context.onSelected(event, value);
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  const handleClick = (event) => {
    if (!selected) {
      if (onChange) {
        onChange(event, value);
      }
      context.onSelected(event, value);
    }
    if (onClick) {
      onClick(event);
    }
  };
  const getRootProps = (otherHandlers) => {
    const buttonResolvedProps = getRootPropsButton(_extends({
      onClick: handleClick,
      onFocus: handleFocus
    }, otherHandlers));
    return _extends({}, buttonResolvedProps, a11yAttributes);
  };
  return _extends({
    getRootProps
  }, otherButtonProps, {
    selected
  });
};
var useTab_default = useTab;

// node_modules/@mui/lab/node_modules/@mui/base/TabUnstyled/TabUnstyled.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var _excluded23 = ["action", "children", "value", "className", "disabled", "onChange", "onClick", "onFocus", "component", "components", "componentsProps"];
var useUtilityClasses12 = (ownerState) => {
  const {
    selected,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", selected && "selected", disabled && "disabled"]
  };
  return composeClasses(slots, getTabUnstyledUtilityClass, {});
};
var TabUnstyled = React51.forwardRef(function TabUnstyled2(props, ref) {
  var _ref, _componentsProps$root;
  const {
    action,
    children,
    className,
    disabled = false,
    component,
    components = {},
    componentsProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded23);
  const tabRef = React51.useRef();
  const handleRef = useForkRef(tabRef, ref);
  const {
    active,
    focusVisible,
    setFocusVisible,
    selected,
    getRootProps
  } = useTab_default(_extends({}, props, {
    ref: handleRef
  }));
  React51.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      tabRef.current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    active,
    focusVisible,
    disabled,
    selected
  });
  const classes8 = useUtilityClasses12(ownerState);
  const TabRoot = (_ref = component != null ? component : components.Root) != null ? _ref : "button";
  const tabRootProps = appendOwnerState(TabRoot, _extends({}, other, componentsProps.root), ownerState);
  return (0, import_jsx_runtime41.jsx)(TabRoot, _extends({}, getRootProps(), tabRootProps, {
    className: clsx_m_default(classes8.root, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.className, className),
    ref,
    children
  }));
});
true ? TabUnstyled.propTypes = {
  action: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.shape({
    current: import_prop_types23.default.shape({
      focusVisible: import_prop_types23.default.func.isRequired
    })
  })]),
  children: import_prop_types23.default.node,
  className: import_prop_types23.default.string,
  component: import_prop_types23.default.elementType,
  components: import_prop_types23.default.shape({
    Root: import_prop_types23.default.elementType
  }),
  componentsProps: import_prop_types23.default.shape({
    root: import_prop_types23.default.object
  }),
  disabled: import_prop_types23.default.bool,
  onChange: import_prop_types23.default.func,
  onClick: import_prop_types23.default.func,
  onFocus: import_prop_types23.default.func,
  value: import_prop_types23.default.oneOfType([import_prop_types23.default.number, import_prop_types23.default.string])
} : void 0;

// node_modules/@mui/lab/node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js
init_extends();
init_objectWithoutPropertiesLoose();
var React52 = __toESM(require_react());
var import_prop_types24 = __toESM(require_prop_types());
init_esm();
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var _excluded24 = ["onChange", "maxRows", "minRows", "style", "value"];
function getStyleValue(computedStyle, property) {
  return parseInt(computedStyle[property], 10) || 0;
}
var styles = {
  shadow: {
    visibility: "hidden",
    position: "absolute",
    overflow: "hidden",
    height: 0,
    top: 0,
    left: 0,
    transform: "translateZ(0)"
  }
};
var TextareaAutosize = React52.forwardRef(function TextareaAutosize2(props, ref) {
  const {
    onChange,
    maxRows,
    minRows = 1,
    style,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
  const {
    current: isControlled
  } = React52.useRef(value != null);
  const inputRef = React52.useRef(null);
  const handleRef = useForkRef(ref, inputRef);
  const shadowRef = React52.useRef(null);
  const renders = React52.useRef(0);
  const [state, setState] = React52.useState({});
  const syncHeight = React52.useCallback(() => {
    const input = inputRef.current;
    const containerWindow = ownerWindow(input);
    const computedStyle = containerWindow.getComputedStyle(input);
    if (computedStyle.width === "0px") {
      return;
    }
    const inputShallow = shadowRef.current;
    inputShallow.style.width = computedStyle.width;
    inputShallow.value = input.value || props.placeholder || "x";
    if (inputShallow.value.slice(-1) === "\n") {
      inputShallow.value += " ";
    }
    const boxSizing = computedStyle["box-sizing"];
    const padding = getStyleValue(computedStyle, "padding-bottom") + getStyleValue(computedStyle, "padding-top");
    const border = getStyleValue(computedStyle, "border-bottom-width") + getStyleValue(computedStyle, "border-top-width");
    const innerHeight = inputShallow.scrollHeight;
    inputShallow.value = "x";
    const singleRowHeight = inputShallow.scrollHeight;
    let outerHeight = innerHeight;
    if (minRows) {
      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
    }
    if (maxRows) {
      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
    }
    outerHeight = Math.max(outerHeight, singleRowHeight);
    const outerHeightStyle = outerHeight + (boxSizing === "border-box" ? padding + border : 0);
    const overflow = Math.abs(outerHeight - innerHeight) <= 1;
    setState((prevState) => {
      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
        renders.current += 1;
        return {
          overflow,
          outerHeightStyle
        };
      }
      if (true) {
        if (renders.current === 20) {
          console.error(["MUI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
        }
      }
      return prevState;
    });
  }, [maxRows, minRows, props.placeholder]);
  React52.useEffect(() => {
    const handleResize = debounce(() => {
      renders.current = 0;
      syncHeight();
    });
    const containerWindow = ownerWindow(inputRef.current);
    containerWindow.addEventListener("resize", handleResize);
    let resizeObserver;
    if (typeof ResizeObserver !== "undefined") {
      resizeObserver = new ResizeObserver(handleResize);
      resizeObserver.observe(inputRef.current);
    }
    return () => {
      handleResize.clear();
      containerWindow.removeEventListener("resize", handleResize);
      if (resizeObserver) {
        resizeObserver.disconnect();
      }
    };
  }, [syncHeight]);
  useEnhancedEffect_default(() => {
    syncHeight();
  });
  React52.useEffect(() => {
    renders.current = 0;
  }, [value]);
  const handleChange = (event) => {
    renders.current = 0;
    if (!isControlled) {
      syncHeight();
    }
    if (onChange) {
      onChange(event);
    }
  };
  return (0, import_jsx_runtime43.jsxs)(React52.Fragment, {
    children: [(0, import_jsx_runtime42.jsx)("textarea", _extends({
      value,
      onChange: handleChange,
      ref: handleRef,
      rows: minRows,
      style: _extends({
        height: state.outerHeightStyle,
        overflow: state.overflow ? "hidden" : null
      }, style)
    }, other)), (0, import_jsx_runtime42.jsx)("textarea", {
      "aria-hidden": true,
      className: props.className,
      readOnly: true,
      ref: shadowRef,
      tabIndex: -1,
      style: _extends({}, styles.shadow, style, {
        padding: 0
      })
    })]
  });
});
true ? TextareaAutosize.propTypes = {
  className: import_prop_types24.default.string,
  maxRows: import_prop_types24.default.oneOfType([import_prop_types24.default.number, import_prop_types24.default.string]),
  minRows: import_prop_types24.default.oneOfType([import_prop_types24.default.number, import_prop_types24.default.string]),
  onChange: import_prop_types24.default.func,
  placeholder: import_prop_types24.default.string,
  style: import_prop_types24.default.object,
  value: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.string), import_prop_types24.default.number, import_prop_types24.default.string])
} : void 0;

// node_modules/@mui/lab/internal/pickers/PickersToolbar.js
init_extends();
var React56 = __toESM(require_react());
init_clsx_m();

// node_modules/@mui/lab/internal/svg-icons/Pen.js
var React53 = __toESM(require_react());
init_utils();
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var Pen_default = createSvgIcon((0, import_jsx_runtime44.jsx)("path", {
  d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
}), "Pen");

// node_modules/@mui/lab/internal/svg-icons/Calendar.js
var React54 = __toESM(require_react());
init_utils();
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var Calendar_default = createSvgIcon((0, import_jsx_runtime45.jsx)("path", {
  d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
}), "Calendar");

// node_modules/@mui/lab/internal/svg-icons/Clock.js
var React55 = __toESM(require_react());
init_utils();
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var Clock_default = createSvgIcon((0, import_jsx_runtime47.jsxs)(React55.Fragment, {
  children: [(0, import_jsx_runtime46.jsx)("path", {
    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), (0, import_jsx_runtime46.jsx)("path", {
    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
  })]
}), "Clock");

// node_modules/@mui/lab/internal/pickers/PickersToolbar.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var _ClockIcon;
var _CalendarIcon;
var _PenIcon;
var classes = generateUtilityClasses("PrivatePickersToolbar", ["root", "dateTitleContainer"]);
var PickersToolbarRoot = styled_default("div")(({
  theme,
  ownerState
}) => _extends({
  display: "flex",
  flexDirection: "column",
  alignItems: "flex-start",
  justifyContent: "space-between",
  padding: theme.spacing(2, 3)
}, ownerState.isLandscape && {
  height: "auto",
  maxWidth: 160,
  padding: 16,
  justifyContent: "flex-start",
  flexWrap: "wrap"
}));
var PickersToolbarGrid = styled_default(Grid_default)({
  flex: 1
});
var getViewTypeIcon = (viewType) => viewType === "clock" ? _ClockIcon || (_ClockIcon = (0, import_jsx_runtime48.jsx)(Clock_default, {
  color: "inherit"
})) : _CalendarIcon || (_CalendarIcon = (0, import_jsx_runtime48.jsx)(Calendar_default, {
  color: "inherit"
}));
function defaultGetKeyboardInputSwitchingButtonText(isKeyboardInputOpen, viewType) {
  return isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`;
}
var PickersToolbar = React56.forwardRef(function PickersToolbar2(props, ref) {
  const {
    children,
    className,
    getMobileKeyboardInputViewButtonText = defaultGetKeyboardInputSwitchingButtonText,
    isLandscape,
    isMobileKeyboardViewOpen,
    landscapeDirection = "column",
    penIconClassName,
    toggleMobileKeyboardView,
    toolbarTitle,
    viewType = "calendar"
  } = props;
  const ownerState = props;
  return (0, import_jsx_runtime49.jsxs)(PickersToolbarRoot, {
    ref,
    className: clsx_m_default(classes.root, className),
    ownerState,
    children: [(0, import_jsx_runtime48.jsx)(Typography_default, {
      color: "text.secondary",
      variant: "overline",
      children: toolbarTitle
    }), (0, import_jsx_runtime49.jsxs)(PickersToolbarGrid, {
      container: true,
      justifyContent: "space-between",
      className: classes.dateTitleContainer,
      direction: isLandscape ? landscapeDirection : "row",
      alignItems: isLandscape ? "flex-start" : "flex-end",
      children: [children, (0, import_jsx_runtime48.jsx)(IconButton_default, {
        onClick: toggleMobileKeyboardView,
        className: penIconClassName,
        color: "inherit",
        "aria-label": getMobileKeyboardInputViewButtonText(isMobileKeyboardViewOpen, viewType),
        children: isMobileKeyboardViewOpen ? getViewTypeIcon(viewType) : _PenIcon || (_PenIcon = (0, import_jsx_runtime48.jsx)(Pen_default, {
          color: "inherit"
        }))
      })]
    })]
  });
});
var PickersToolbar_default = PickersToolbar;

// node_modules/@mui/lab/internal/pickers/PickersToolbarButton.js
init_extends();
init_objectWithoutPropertiesLoose();
var React58 = __toESM(require_react());

// node_modules/@mui/lab/internal/pickers/PickersToolbarText.js
init_extends();
init_objectWithoutPropertiesLoose();
var React57 = __toESM(require_react());
init_clsx_m();
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var _excluded25 = ["className", "selected", "value"];
var classes2 = generateUtilityClasses("PrivatePickersToolbarText", ["selected"]);
var PickersToolbarTextRoot = styled_default(Typography_default)(({
  theme
}) => ({
  transition: theme.transitions.create("color"),
  color: theme.palette.text.secondary,
  [`&.${classes2.selected}`]: {
    color: theme.palette.text.primary
  }
}));
var PickersToolbarText = React57.forwardRef(function PickersToolbarText2(props, ref) {
  const {
    className,
    selected,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
  return (0, import_jsx_runtime50.jsx)(PickersToolbarTextRoot, _extends({
    ref,
    className: clsx_m_default(className, selected && classes2.selected),
    component: "span"
  }, other, {
    children: value
  }));
});
var PickersToolbarText_default = PickersToolbarText;

// node_modules/@mui/lab/internal/pickers/PickersToolbarButton.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
var _excluded26 = ["align", "className", "selected", "typographyClassName", "value", "variant"];
var PickersToolbarButtonRoot = styled_default(Button_default)({
  padding: 0,
  minWidth: 16,
  textTransform: "none"
});
var PickersToolbarButton = React58.forwardRef(function PickersToolbarButton2(props, ref) {
  const {
    align,
    className,
    selected,
    typographyClassName,
    value,
    variant
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
  return (0, import_jsx_runtime51.jsx)(PickersToolbarButtonRoot, _extends({
    variant: "text",
    ref,
    className
  }, other, {
    children: (0, import_jsx_runtime51.jsx)(PickersToolbarText_default, {
      align,
      className: typographyClassName,
      variant,
      value,
      selected
    })
  }));
});
var PickersToolbarButton_default = PickersToolbarButton;

// node_modules/@mui/lab/DateRangePicker/DateRangePickerToolbar.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var _Typography;
var classes3 = generateUtilityClasses("PrivateDateRangePickerToolbar", ["penIcon"]);
var DateRangePickerToolbarRoot = styled_default(PickersToolbar_default)({
  [`& .${classes3.penIcon}`]: {
    position: "relative",
    top: 4
  }
});
var DateRangePickerToolbarContainer = styled_default("div")({
  display: "flex"
});
var DateRangePickerToolbar = ({
  currentlySelectingRangeEnd,
  date: [start, end],
  endText,
  isMobileKeyboardViewOpen,
  setCurrentlySelectingRangeEnd,
  startText,
  toggleMobileKeyboardView,
  toolbarFormat,
  toolbarTitle = "Select date range"
}) => {
  const utils = useUtils();
  const startDateValue = start ? utils.formatByString(start, toolbarFormat || utils.formats.shortDate) : startText;
  const endDateValue = end ? utils.formatByString(end, toolbarFormat || utils.formats.shortDate) : endText;
  return (0, import_jsx_runtime52.jsx)(DateRangePickerToolbarRoot, {
    toolbarTitle,
    isMobileKeyboardViewOpen,
    toggleMobileKeyboardView,
    isLandscape: false,
    penIconClassName: classes3.penIcon,
    children: (0, import_jsx_runtime53.jsxs)(DateRangePickerToolbarContainer, {
      children: [(0, import_jsx_runtime52.jsx)(PickersToolbarButton_default, {
        variant: start !== null ? "h5" : "h6",
        value: startDateValue,
        selected: currentlySelectingRangeEnd === "start",
        onClick: () => setCurrentlySelectingRangeEnd("start")
      }), _Typography || (_Typography = (0, import_jsx_runtime53.jsxs)(Typography_default, {
        variant: "h5",
        children: ["\xA0", "\u2013", "\xA0"]
      })), (0, import_jsx_runtime52.jsx)(PickersToolbarButton_default, {
        variant: end !== null ? "h5" : "h6",
        value: endDateValue,
        selected: currentlySelectingRangeEnd === "end",
        onClick: () => setCurrentlySelectingRangeEnd("end")
      })]
    })
  });
};
var DateRangePickerToolbar_default = DateRangePickerToolbar;

// node_modules/@mui/lab/CalendarPicker/useCalendarState.js
init_extends();
var React60 = __toESM(require_react());
var createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {
  switch (action.type) {
    case "changeMonth":
      return _extends({}, state, {
        slideDirection: action.direction,
        currentMonth: action.newMonth,
        isMonthSwitchingAnimating: !reduceAnimations
      });
    case "finishMonthSwitchingAnimation":
      return _extends({}, state, {
        isMonthSwitchingAnimating: false
      });
    case "changeFocusedDay": {
      if (state.focusedDay !== null && utils.isSameDay(action.focusedDay, state.focusedDay)) {
        return state;
      }
      const needMonthSwitch = Boolean(action.focusedDay) && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);
      return _extends({}, state, {
        focusedDay: action.focusedDay,
        isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations,
        currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,
        slideDirection: utils.isAfterDay(action.focusedDay, state.currentMonth) ? "left" : "right"
      });
    }
    default:
      throw new Error("missing support");
  }
};
function useCalendarState({
  date,
  defaultCalendarMonth,
  disableFuture,
  disablePast,
  disableSwitchToMonthOnDayFocus = false,
  maxDate,
  minDate,
  onMonthChange,
  reduceAnimations,
  shouldDisableDate
}) {
  var _ref;
  const now = useNow();
  const utils = useUtils();
  const reducerFn = React60.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;
  const [calendarState, dispatch] = React60.useReducer(reducerFn, {
    isMonthSwitchingAnimating: false,
    focusedDay: date || now,
    currentMonth: utils.startOfMonth((_ref = date != null ? date : defaultCalendarMonth) != null ? _ref : now),
    slideDirection: "left"
  });
  const handleChangeMonth = React60.useCallback((payload) => {
    dispatch(_extends({
      type: "changeMonth"
    }, payload));
    if (onMonthChange) {
      onMonthChange(payload.newMonth);
    }
  }, [onMonthChange]);
  const changeMonth = React60.useCallback((newDate) => {
    const newDateRequested = newDate != null ? newDate : now;
    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {
      return;
    }
    handleChangeMonth({
      newMonth: utils.startOfMonth(newDateRequested),
      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? "left" : "right"
    });
  }, [calendarState.currentMonth, handleChangeMonth, now, utils]);
  const isDateDisabled = React60.useCallback((day) => validateDate(utils, day, {
    disablePast,
    disableFuture,
    minDate,
    maxDate,
    shouldDisableDate
  }) !== null, [disableFuture, disablePast, maxDate, minDate, shouldDisableDate, utils]);
  const onMonthSwitchingAnimationEnd = React60.useCallback(() => {
    dispatch({
      type: "finishMonthSwitchingAnimation"
    });
  }, []);
  const changeFocusedDay = React60.useCallback((newFocusedDate) => {
    if (!isDateDisabled(newFocusedDate)) {
      dispatch({
        type: "changeFocusedDay",
        focusedDay: newFocusedDate
      });
    }
  }, [isDateDisabled]);
  return {
    calendarState,
    changeMonth,
    changeFocusedDay,
    isDateDisabled,
    onMonthSwitchingAnimationEnd,
    handleChangeMonth
  };
}

// node_modules/@mui/lab/DateRangePicker/DateRangePickerViewMobile.js
init_extends();
init_objectWithoutPropertiesLoose();
var React72 = __toESM(require_react());

// node_modules/@mui/lab/CalendarPicker/PickersCalendarHeader.js
init_extends();
var React67 = __toESM(require_react());

// node_modules/@mui/lab/CalendarPicker/PickersFadeTransitionGroup.js
var React61 = __toESM(require_react());
init_clsx_m();
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var classes4 = generateUtilityClasses("PrivatePickersFadeTransitionGroup", ["root"]);
var animationDuration = 500;
var PickersFadeTransitionGroupRoot = styled_default(TransitionGroup_default)({
  display: "block",
  position: "relative"
});
var PickersFadeTransitionGroup = ({
  children,
  className,
  reduceAnimations,
  transKey
}) => {
  if (reduceAnimations) {
    return children;
  }
  return (0, import_jsx_runtime54.jsx)(PickersFadeTransitionGroupRoot, {
    className: clsx_m_default(classes4.root, className),
    children: (0, import_jsx_runtime54.jsx)(Fade_default, {
      appear: false,
      mountOnEnter: true,
      unmountOnExit: true,
      timeout: {
        appear: animationDuration,
        enter: animationDuration / 2,
        exit: 0
      },
      children
    }, transKey)
  });
};
var PickersFadeTransitionGroup_default = PickersFadeTransitionGroup;

// node_modules/@mui/lab/internal/svg-icons/ArrowDropDown.js
var React62 = __toESM(require_react());
init_utils();
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var ArrowDropDown_default = createSvgIcon((0, import_jsx_runtime55.jsx)("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown");

// node_modules/@mui/lab/internal/pickers/PickersArrowSwitcher.js
init_objectWithoutPropertiesLoose();
init_extends();
var React65 = __toESM(require_react());

// node_modules/@mui/lab/internal/svg-icons/ArrowLeft.js
var React63 = __toESM(require_react());
init_utils();
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var ArrowLeft_default = createSvgIcon((0, import_jsx_runtime56.jsx)("path", {
  d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
}), "ArrowLeft");

// node_modules/@mui/lab/internal/svg-icons/ArrowRight.js
var React64 = __toESM(require_react());
init_utils();
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var ArrowRight_default = createSvgIcon((0, import_jsx_runtime57.jsx)("path", {
  d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
}), "ArrowRight");

// node_modules/@mui/lab/internal/pickers/PickersArrowSwitcher.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var _excluded27 = ["children", "className", "components", "componentsProps", "isLeftDisabled", "isLeftHidden", "isRightDisabled", "isRightHidden", "leftArrowButtonText", "onLeftClick", "onRightClick", "rightArrowButtonText"];
var PickersArrowSwitcherRoot = styled_default("div")({
  display: "flex"
});
var PickersArrowSwitcherSpacer = styled_default("div")(({
  theme
}) => ({
  width: theme.spacing(3)
}));
var PickersArrowSwitcherButton = styled_default(IconButton_default)(({
  ownerState
}) => _extends({}, ownerState.hidden && {
  visibility: "hidden"
}));
var PickersArrowSwitcher = React65.forwardRef(function PickersArrowSwitcher2(props, ref) {
  const {
    children,
    className,
    components = {},
    componentsProps = {},
    isLeftDisabled,
    isLeftHidden,
    isRightDisabled,
    isRightHidden,
    leftArrowButtonText,
    onLeftClick,
    onRightClick,
    rightArrowButtonText
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
  const theme = useTheme();
  const isRtl = theme.direction === "rtl";
  const leftArrowButtonProps = componentsProps.leftArrowButton || {};
  const LeftArrowIcon = components.LeftArrowIcon || ArrowLeft_default;
  const rightArrowButtonProps = componentsProps.rightArrowButton || {};
  const RightArrowIcon = components.RightArrowIcon || ArrowRight_default;
  const ownerState = props;
  return (0, import_jsx_runtime59.jsxs)(PickersArrowSwitcherRoot, _extends({
    ref,
    className,
    ownerState
  }, other, {
    children: [(0, import_jsx_runtime58.jsx)(PickersArrowSwitcherButton, _extends({
      as: components.LeftArrowButton,
      size: "small",
      "aria-label": leftArrowButtonText,
      title: leftArrowButtonText,
      disabled: isLeftDisabled,
      edge: "end",
      onClick: onLeftClick
    }, leftArrowButtonProps, {
      className: leftArrowButtonProps.className,
      ownerState: _extends({}, ownerState, leftArrowButtonProps, {
        hidden: isLeftHidden
      }),
      children: isRtl ? (0, import_jsx_runtime58.jsx)(RightArrowIcon, {}) : (0, import_jsx_runtime58.jsx)(LeftArrowIcon, {})
    })), children ? (0, import_jsx_runtime58.jsx)(Typography_default, {
      variant: "subtitle1",
      component: "span",
      children
    }) : (0, import_jsx_runtime58.jsx)(PickersArrowSwitcherSpacer, {
      ownerState
    }), (0, import_jsx_runtime58.jsx)(PickersArrowSwitcherButton, _extends({
      as: components.RightArrowButton,
      size: "small",
      "aria-label": rightArrowButtonText,
      title: rightArrowButtonText,
      edge: "start",
      disabled: isRightDisabled,
      onClick: onRightClick
    }, rightArrowButtonProps, {
      className: rightArrowButtonProps.className,
      ownerState: _extends({}, ownerState, rightArrowButtonProps, {
        hidden: isRightHidden
      }),
      children: isRtl ? (0, import_jsx_runtime58.jsx)(LeftArrowIcon, {}) : (0, import_jsx_runtime58.jsx)(RightArrowIcon, {})
    }))]
  }));
});
var PickersArrowSwitcher_default = PickersArrowSwitcher;

// node_modules/@mui/lab/internal/pickers/hooks/date-helpers-hooks.js
var React66 = __toESM(require_react());
function useNextMonthDisabled(month, {
  disableFuture,
  maxDate
}) {
  const utils = useUtils();
  return React66.useMemo(() => {
    const now = utils.date();
    const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, maxDate) ? now : maxDate);
    return !utils.isAfter(lastEnabledMonth, month);
  }, [disableFuture, maxDate, month, utils]);
}
function usePreviousMonthDisabled(month, {
  disablePast,
  minDate
}) {
  const utils = useUtils();
  return React66.useMemo(() => {
    const now = utils.date();
    const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, minDate) ? now : minDate);
    return !utils.isBefore(firstEnabledMonth, month);
  }, [disablePast, minDate, month, utils]);
}
function useMeridiemMode(date, ampm, onChange) {
  const utils = useUtils();
  const meridiemMode = getMeridiem(date, utils);
  const handleMeridiemChange = React66.useCallback((mode) => {
    const timeWithMeridiem = convertToMeridiem(date, mode, Boolean(ampm), utils);
    onChange(timeWithMeridiem, "partial");
  }, [ampm, date, onChange, utils]);
  return {
    meridiemMode,
    handleMeridiemChange
  };
}

// node_modules/@mui/lab/CalendarPicker/PickersCalendarHeader.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
var PickersCalendarHeaderRoot = styled_default("div")({
  display: "flex",
  alignItems: "center",
  marginTop: 16,
  marginBottom: 8,
  paddingLeft: 24,
  paddingRight: 12,
  maxHeight: 30,
  minHeight: 30
});
var PickersCalendarHeaderLabel = styled_default("div")(({
  theme
}) => _extends({
  display: "flex",
  maxHeight: 30,
  overflow: "hidden",
  alignItems: "center",
  cursor: "pointer",
  marginRight: "auto"
}, theme.typography.body1, {
  fontWeight: theme.typography.fontWeightMedium
}));
var PickersCalendarHeaderLabelItem = styled_default("div")({
  marginRight: 6
});
var PickersCalendarHeaderSwitchViewButton = styled_default(IconButton_default)({
  marginRight: "auto"
});
var PickersCalendarHeaderSwitchView = styled_default(ArrowDropDown_default)(({
  theme,
  ownerState
}) => _extends({
  willChange: "transform",
  transition: theme.transitions.create("transform"),
  transform: "rotate(0deg)"
}, ownerState.openView === "year" && {
  transform: "rotate(180deg)"
}));
function getSwitchingViewAriaText(view) {
  return view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view";
}
function PickersCalendarHeader(props) {
  const {
    components = {},
    componentsProps = {},
    currentMonth: month,
    disabled,
    disableFuture,
    disablePast,
    getViewSwitchingButtonText = getSwitchingViewAriaText,
    leftArrowButtonText = "Previous month",
    maxDate,
    minDate,
    onMonthChange,
    onViewChange,
    openView: currentView,
    reduceAnimations,
    rightArrowButtonText = "Next month",
    views
  } = props;
  const utils = useUtils();
  const switchViewButtonProps = componentsProps.switchViewButton || {};
  const selectNextMonth = () => onMonthChange(utils.getNextMonth(month), "left");
  const selectPreviousMonth = () => onMonthChange(utils.getPreviousMonth(month), "right");
  const isNextMonthDisabled = useNextMonthDisabled(month, {
    disableFuture: disableFuture || disabled,
    maxDate
  });
  const isPreviousMonthDisabled = usePreviousMonthDisabled(month, {
    disablePast: disablePast || disabled,
    minDate
  });
  const handleToggleView = () => {
    if (views.length === 1 || !onViewChange || disabled) {
      return;
    }
    if (views.length === 2) {
      onViewChange(views.find((view) => view !== currentView) || views[0]);
    } else {
      const nextIndexToOpen = views.indexOf(currentView) !== 0 ? 0 : 1;
      onViewChange(views[nextIndexToOpen]);
    }
  };
  if (views.length === 1 && views[0] === "year") {
    return null;
  }
  const ownerState = props;
  return (0, import_jsx_runtime61.jsxs)(PickersCalendarHeaderRoot, {
    ownerState,
    children: [(0, import_jsx_runtime61.jsxs)(PickersCalendarHeaderLabel, {
      role: "presentation",
      onClick: handleToggleView,
      ownerState,
      children: [(0, import_jsx_runtime60.jsx)(PickersFadeTransitionGroup_default, {
        reduceAnimations,
        transKey: utils.format(month, "month"),
        children: (0, import_jsx_runtime60.jsx)(PickersCalendarHeaderLabelItem, {
          "aria-live": "polite",
          ownerState,
          children: utils.format(month, "month")
        })
      }), (0, import_jsx_runtime60.jsx)(PickersFadeTransitionGroup_default, {
        reduceAnimations,
        transKey: utils.format(month, "year"),
        children: (0, import_jsx_runtime60.jsx)(PickersCalendarHeaderLabelItem, {
          "aria-live": "polite",
          ownerState,
          children: utils.format(month, "year")
        })
      }), views.length > 1 && !disabled && (0, import_jsx_runtime60.jsx)(PickersCalendarHeaderSwitchViewButton, _extends({
        size: "small",
        as: components.SwitchViewButton,
        "aria-label": getViewSwitchingButtonText(currentView)
      }, switchViewButtonProps, {
        children: (0, import_jsx_runtime60.jsx)(PickersCalendarHeaderSwitchView, {
          as: components.SwitchViewIcon,
          ownerState
        })
      }))]
    }), (0, import_jsx_runtime60.jsx)(Fade_default, {
      in: currentView === "day",
      children: (0, import_jsx_runtime60.jsx)(PickersArrowSwitcher_default, {
        leftArrowButtonText,
        rightArrowButtonText,
        components,
        componentsProps,
        onLeftClick: selectPreviousMonth,
        onRightClick: selectNextMonth,
        isLeftDisabled: isPreviousMonthDisabled,
        isRightDisabled: isNextMonthDisabled
      })
    })]
  });
}
var PickersCalendarHeader_default = PickersCalendarHeader;

// node_modules/@mui/lab/DateRangePickerDay/DateRangePickerDay.js
init_objectWithoutPropertiesLoose();
init_extends();
var React69 = __toESM(require_react());
var import_prop_types26 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/lab/PickersDay/PickersDay.js
init_objectWithoutPropertiesLoose();
init_extends();
var React68 = __toESM(require_react());
var import_prop_types25 = __toESM(require_prop_types());
init_clsx_m();
init_esm();
init_utils();
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
var _excluded28 = ["allowSameDateSelection", "autoFocus", "className", "day", "disabled", "disableHighlightToday", "disableMargin", "hidden", "isAnimating", "onClick", "onDayFocus", "onDaySelect", "onFocus", "onKeyDown", "outsideCurrentMonth", "selected", "showDaysOutsideCurrentMonth", "children", "today"];
function getPickersDayUtilityClass(slot) {
  return generateUtilityClass("MuiPickersDay", slot);
}
var pickersDayClasses = generateUtilityClasses("MuiPickersDay", ["root", "dayWithMargin", "dayOutsideMonth", "hiddenDaySpacingFiller", "today", "selected", "disabled"]);
var useUtilityClasses13 = (ownerState) => {
  const {
    selected,
    disableMargin,
    disableHighlightToday,
    today,
    outsideCurrentMonth,
    showDaysOutsideCurrentMonth,
    classes: classes8
  } = ownerState;
  const slots = {
    root: ["root", selected && "selected", !disableMargin && "dayWithMargin", !disableHighlightToday && today && "today", outsideCurrentMonth && showDaysOutsideCurrentMonth && "dayOutsideMonth"],
    hiddenDaySpacingFiller: ["hiddenDaySpacingFiller"]
  };
  return composeClasses(slots, getPickersDayUtilityClass, classes8);
};
var styleArg = ({
  theme,
  ownerState
}) => _extends({}, theme.typography.caption, {
  width: DAY_SIZE,
  height: DAY_SIZE,
  borderRadius: "50%",
  padding: 0,
  backgroundColor: theme.palette.background.paper,
  color: theme.palette.text.primary,
  "&:hover": {
    backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
  },
  "&:focus": {
    backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
    [`&.${pickersDayClasses.selected}`]: {
      willChange: "background-color",
      backgroundColor: theme.palette.primary.dark
    }
  },
  [`&.${pickersDayClasses.selected}`]: {
    color: theme.palette.primary.contrastText,
    backgroundColor: theme.palette.primary.main,
    fontWeight: theme.typography.fontWeightMedium,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.short
    }),
    "&:hover": {
      willChange: "background-color",
      backgroundColor: theme.palette.primary.dark
    }
  },
  [`&.${pickersDayClasses.disabled}`]: {
    color: theme.palette.text.disabled
  }
}, !ownerState.disableMargin && {
  margin: `0 ${DAY_MARGIN}px`
}, ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && {
  color: theme.palette.text.secondary
}, !ownerState.disableHighlightToday && ownerState.today && {
  [`&:not(.${pickersDayClasses.selected})`]: {
    border: `1px solid ${theme.palette.text.secondary}`
  }
});
var overridesResolver = (props, styles2) => {
  const {
    ownerState
  } = props;
  return [styles2.root, !ownerState.disableMargin && styles2.dayWithMargin, !ownerState.disableHighlightToday && ownerState.today && styles2.today, !ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && styles2.dayOutsideMonth, ownerState.outsideCurrentMonth && !ownerState.showDaysOutsideCurrentMonth && styles2.hiddenDaySpacingFiller];
};
var PickersDayRoot = styled_default(ButtonBase_default, {
  name: "MuiPickersDay",
  slot: "Root",
  overridesResolver
})(styleArg);
var PickersDayFiller = styled_default("div", {
  name: "MuiPickersDay",
  slot: "Root",
  overridesResolver
})(({
  theme,
  ownerState
}) => _extends({}, styleArg({
  theme,
  ownerState
}), {
  visibility: "hidden"
}));
var noop = () => {
};
var PickersDay = React68.forwardRef(function PickersDay2(inProps, forwardedRef) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiPickersDay"
  });
  const {
    allowSameDateSelection = false,
    autoFocus = false,
    className,
    day,
    disabled = false,
    disableHighlightToday = false,
    disableMargin = false,
    isAnimating,
    onClick,
    onDayFocus = noop,
    onDaySelect,
    onFocus,
    onKeyDown,
    outsideCurrentMonth,
    selected = false,
    showDaysOutsideCurrentMonth = false,
    children,
    today: isToday = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
  const ownerState = _extends({}, props, {
    allowSameDateSelection,
    autoFocus,
    disabled,
    disableHighlightToday,
    disableMargin,
    selected,
    showDaysOutsideCurrentMonth,
    today: isToday
  });
  const classes8 = useUtilityClasses13(ownerState);
  const utils = useUtils();
  const ref = React68.useRef(null);
  const handleRef = useForkRef_default(ref, forwardedRef);
  useEnhancedEffect_default(() => {
    if (autoFocus && !disabled && !isAnimating && !outsideCurrentMonth) {
      ref.current.focus();
    }
  }, [autoFocus, disabled, isAnimating, outsideCurrentMonth]);
  const handleFocus = (event) => {
    if (onDayFocus) {
      onDayFocus(day);
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  const handleClick = (event) => {
    if (!allowSameDateSelection && selected) {
      return;
    }
    if (!disabled) {
      onDaySelect(day, "finish");
    }
    if (onClick) {
      onClick(event);
    }
  };
  const theme = useTheme();
  function handleKeyDown2(event) {
    if (onKeyDown !== void 0) {
      onKeyDown(event);
    }
    switch (event.key) {
      case "ArrowUp":
        onDayFocus(utils.addDays(day, -7));
        event.preventDefault();
        break;
      case "ArrowDown":
        onDayFocus(utils.addDays(day, 7));
        event.preventDefault();
        break;
      case "ArrowLeft":
        onDayFocus(utils.addDays(day, theme.direction === "ltr" ? -1 : 1));
        event.preventDefault();
        break;
      case "ArrowRight":
        onDayFocus(utils.addDays(day, theme.direction === "ltr" ? 1 : -1));
        event.preventDefault();
        break;
      case "Home":
        onDayFocus(utils.startOfWeek(day));
        event.preventDefault();
        break;
      case "End":
        onDayFocus(utils.endOfWeek(day));
        event.preventDefault();
        break;
      case "PageUp":
        onDayFocus(utils.getNextMonth(day));
        event.preventDefault();
        break;
      case "PageDown":
        onDayFocus(utils.getPreviousMonth(day));
        event.preventDefault();
        break;
      default:
        break;
    }
  }
  if (outsideCurrentMonth && !showDaysOutsideCurrentMonth) {
    return (0, import_jsx_runtime62.jsx)(PickersDayFiller, {
      className: clsx_m_default(classes8.root, classes8.hiddenDaySpacingFiller, className),
      ownerState
    });
  }
  return (0, import_jsx_runtime62.jsx)(PickersDayRoot, _extends({
    className: clsx_m_default(classes8.root, className),
    ownerState,
    ref: handleRef,
    centerRipple: true,
    disabled,
    "aria-label": !children ? utils.format(day, "fullDate") : void 0,
    tabIndex: selected ? 0 : -1,
    onFocus: handleFocus,
    onKeyDown: handleKeyDown2,
    onClick: handleClick
  }, other, {
    children: !children ? utils.format(day, "dayOfMonth") : children
  }));
});
var areDayPropsEqual = (prevProps, nextProps) => {
  return prevProps.autoFocus === nextProps.autoFocus && prevProps.isAnimating === nextProps.isAnimating && prevProps.today === nextProps.today && prevProps.disabled === nextProps.disabled && prevProps.selected === nextProps.selected && prevProps.disableMargin === nextProps.disableMargin && prevProps.showDaysOutsideCurrentMonth === nextProps.showDaysOutsideCurrentMonth && prevProps.disableHighlightToday === nextProps.disableHighlightToday && prevProps.className === nextProps.className && prevProps.outsideCurrentMonth === nextProps.outsideCurrentMonth && prevProps.onDayFocus === nextProps.onDayFocus && prevProps.onDaySelect === nextProps.onDaySelect;
};
true ? PickersDay.propTypes = {
  allowSameDateSelection: import_prop_types25.default.bool,
  autoFocus: import_prop_types25.default.bool,
  children: import_prop_types25.default.node,
  classes: import_prop_types25.default.object,
  className: import_prop_types25.default.string,
  day: import_prop_types25.default.any.isRequired,
  disabled: import_prop_types25.default.bool,
  disableHighlightToday: import_prop_types25.default.bool,
  disableMargin: import_prop_types25.default.bool,
  hidden: import_prop_types25.default.bool,
  isAnimating: import_prop_types25.default.bool,
  onClick: import_prop_types25.default.func,
  onDayFocus: import_prop_types25.default.func,
  onDaySelect: import_prop_types25.default.func.isRequired,
  onFocus: import_prop_types25.default.func,
  onKeyDown: import_prop_types25.default.func,
  outsideCurrentMonth: import_prop_types25.default.bool.isRequired,
  selected: import_prop_types25.default.bool,
  showDaysOutsideCurrentMonth: import_prop_types25.default.bool,
  sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object]),
  today: import_prop_types25.default.bool
} : void 0;
var PickersDay_default = React68.memo(PickersDay, areDayPropsEqual);

// node_modules/@mui/lab/DateRangePickerDay/DateRangePickerDay.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
var _excluded29 = ["className", "day", "outsideCurrentMonth", "isEndOfHighlighting", "isEndOfPreviewing", "isHighlighting", "isPreviewing", "isStartOfHighlighting", "isStartOfPreviewing", "selected"];
function getDateRangePickerDayUtilityClass(slot) {
  return generateUtilityClass("MuiDateRangePickerDay", slot);
}
var dateRangePickerDayClasses = generateUtilityClasses("MuiDateRangePickerDay", ["root", "rangeIntervalDayHighlight", "rangeIntervalDayHighlightStart", "rangeIntervalDayHighlightEnd", "rangeIntervalPreview", "rangeIntervalDayPreview", "rangeIntervalDayPreviewStart", "rangeIntervalDayPreviewEnd", "day", "dayOutsideRangeInterval", "dayInsideRangeInterval", "notSelectedDate"]);
var useUtilityClasses14 = (ownerState) => {
  const {
    isHighlighting,
    outsideCurrentMonth,
    isStartOfHighlighting,
    isStartOfMonth,
    isEndOfHighlighting,
    isEndOfMonth,
    isPreviewing,
    isStartOfPreviewing,
    isEndOfPreviewing,
    selected,
    classes: classes8
  } = ownerState;
  const slots = {
    root: ["root", isHighlighting && !outsideCurrentMonth && "rangeIntervalDayHighlight", (isStartOfHighlighting || isStartOfMonth) && "rangeIntervalDayHighlightStart", (isEndOfHighlighting || isEndOfMonth) && "rangeIntervalDayHighlightEnd"],
    rangeIntervalPreview: ["rangeIntervalPreview", isPreviewing && !outsideCurrentMonth && "rangeIntervalDayPreview", (isStartOfPreviewing || isStartOfMonth) && "rangeIntervalDayPreviewStart", (isEndOfPreviewing || isEndOfMonth) && "rangeIntervalDayPreviewEnd"],
    day: ["day", !selected && "notSelectedDate", !isHighlighting && "dayOutsideRangeInterval", !selected && isHighlighting && "dayInsideRangeInterval"]
  };
  return composeClasses(slots, getDateRangePickerDayUtilityClass, classes8);
};
var endBorderStyle = {
  borderTopRightRadius: "50%",
  borderBottomRightRadius: "50%"
};
var startBorderStyle = {
  borderTopLeftRadius: "50%",
  borderBottomLeftRadius: "50%"
};
var DateRangePickerDayRoot = styled_default("div", {
  name: "MuiDateRangePickerDay",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})(({
  theme,
  ownerState
}) => _extends({
  [`&:first-of-type .${dateRangePickerDayClasses.rangeIntervalDayPreview}`]: _extends({}, startBorderStyle, {
    borderLeftColor: theme.palette.divider
  }),
  [`&:last-of-type .${dateRangePickerDayClasses.rangeIntervalDayPreview}`]: _extends({}, endBorderStyle, {
    borderRightColor: theme.palette.divider
  })
}, ownerState.isHighlighting && !ownerState.outsideCurrentMonth && {
  borderRadius: 0,
  color: theme.palette.primary.contrastText,
  backgroundColor: alpha(theme.palette.primary.light, 0.6),
  "&:first-of-type": startBorderStyle,
  "&:last-of-type": endBorderStyle
}, (ownerState.isStartOfHighlighting || ownerState.isStartOfMonth) && _extends({}, startBorderStyle, {
  paddingLeft: 0,
  marginLeft: DAY_MARGIN / 2
}), (ownerState.isEndOfHighlighting || ownerState.isEndOfMonth) && _extends({}, endBorderStyle, {
  paddingRight: 0,
  marginRight: DAY_MARGIN / 2
})));
var DateRangePickerDayRangeIntervalPreview = styled_default("div", {
  name: "MuiDateRangePickerDay",
  slot: "RangeIntervalPreview"
})(({
  theme,
  ownerState
}) => _extends({
  border: "2px solid transparent"
}, ownerState.isPreviewing && !ownerState.outsideCurrentMonth && _extends({
  borderRadius: 0,
  border: `2px dashed ${theme.palette.divider}`,
  borderLeftColor: "transparent",
  borderRightColor: "transparent"
}, (ownerState.isStartOfPreviewing || ownerState.isStartOfMonth) && _extends({
  borderLeftColor: theme.palette.divider
}, startBorderStyle), (ownerState.isEndOfPreviewing || ownerState.isEndOfMonth) && _extends({
  borderRightColor: theme.palette.divider
}, endBorderStyle))));
var DateRangePickerDayDay = styled_default(PickersDay_default, {
  name: "MuiDateRangePickerDay",
  slot: "Day"
})(({
  theme,
  ownerState
}) => _extends({
  transform: "scale(1.1)",
  "& > *": {
    transform: "scale(0.9)"
  }
}, !ownerState.selected && {
  backgroundColor: "transparent"
}, !ownerState.isHighlighting && {
  "&:hover": {
    border: `1px solid ${theme.palette.grey[500]}`
  }
}, !ownerState.selected && ownerState.isHighlighting && {
  color: theme.palette.getContrastText(alpha(theme.palette.primary.light, 0.6))
}));
var DateRangePickerDay = React69.forwardRef(function DateRangePickerDay2(props, ref) {
  const {
    className,
    day,
    outsideCurrentMonth,
    isHighlighting,
    isPreviewing,
    selected = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
  const utils = useUtils();
  const isEndOfMonth = utils.isSameDay(day, utils.endOfMonth(day));
  const isStartOfMonth = utils.isSameDay(day, utils.startOfMonth(day));
  const shouldRenderHighlight = isHighlighting && !outsideCurrentMonth;
  const shouldRenderPreview = isPreviewing && !outsideCurrentMonth;
  const ownerState = _extends({}, props, {
    selected,
    isStartOfMonth,
    isEndOfMonth
  });
  const classes8 = useUtilityClasses14(ownerState);
  return (0, import_jsx_runtime63.jsx)(DateRangePickerDayRoot, {
    className: clsx_m_default(classes8.root, className),
    ownerState,
    children: (0, import_jsx_runtime63.jsx)(DateRangePickerDayRangeIntervalPreview, {
      role: "cell",
      className: classes8.rangeIntervalPreview,
      ownerState,
      children: (0, import_jsx_runtime63.jsx)(DateRangePickerDayDay, _extends({}, other, {
        ref,
        disableMargin: true,
        allowSameDateSelection: true,
        day,
        selected,
        outsideCurrentMonth,
        className: classes8.day,
        ownerState
      }))
    })
  });
});
true ? DateRangePickerDay.propTypes = {
  children: import_prop_types26.default.node,
  classes: import_prop_types26.default.object,
  className: import_prop_types26.default.string,
  day: import_prop_types26.default.any.isRequired,
  isEndOfHighlighting: import_prop_types26.default.bool.isRequired,
  isEndOfPreviewing: import_prop_types26.default.bool.isRequired,
  isHighlighting: import_prop_types26.default.bool.isRequired,
  isPreviewing: import_prop_types26.default.bool.isRequired,
  isStartOfHighlighting: import_prop_types26.default.bool.isRequired,
  isStartOfPreviewing: import_prop_types26.default.bool.isRequired,
  outsideCurrentMonth: import_prop_types26.default.bool.isRequired,
  selected: import_prop_types26.default.bool,
  sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object])
} : void 0;
var DateRangePickerDay_default = React69.memo(DateRangePickerDay, (prevProps, nextProps) => {
  return prevProps.isHighlighting === nextProps.isHighlighting && prevProps.isEndOfHighlighting === nextProps.isEndOfHighlighting && prevProps.isStartOfHighlighting === nextProps.isStartOfHighlighting && prevProps.isPreviewing === nextProps.isPreviewing && prevProps.isEndOfPreviewing === nextProps.isEndOfPreviewing && prevProps.isStartOfPreviewing === nextProps.isStartOfPreviewing && areDayPropsEqual(prevProps, nextProps);
});

// node_modules/@mui/lab/CalendarPicker/PickersCalendar.js
init_extends();
var React71 = __toESM(require_react());

// node_modules/@mui/lab/CalendarPicker/PickersSlideTransition.js
init_extends();
init_objectWithoutPropertiesLoose();
var React70 = __toESM(require_react());
init_clsx_m();
var import_jsx_runtime64 = __toESM(require_jsx_runtime());
var _excluded30 = ["children", "className", "reduceAnimations", "slideDirection", "transKey"];
var classes5 = generateUtilityClasses("PrivatePickersSlideTransition", ["root", "slideEnter-left", "slideEnter-right", "slideEnterActive", "slideEnterActive", "slideExit", "slideExitActiveLeft-left", "slideExitActiveLeft-right"]);
var slideAnimationDuration = 350;
var PickersSlideTransitionRoot = styled_default(TransitionGroup_default)(({
  theme
}) => {
  const slideTransition = theme.transitions.create("transform", {
    duration: slideAnimationDuration,
    easing: "cubic-bezier(0.35, 0.8, 0.4, 1)"
  });
  return {
    display: "block",
    position: "relative",
    overflowX: "hidden",
    "& > *": {
      position: "absolute",
      top: 0,
      right: 0,
      left: 0
    },
    [`& .${classes5["slideEnter-left"]}`]: {
      willChange: "transform",
      transform: "translate(100%)",
      zIndex: 1
    },
    [`& .${classes5["slideEnter-right"]}`]: {
      willChange: "transform",
      transform: "translate(-100%)",
      zIndex: 1
    },
    [`& .${classes5.slideEnterActive}`]: {
      transform: "translate(0%)",
      transition: slideTransition
    },
    [`& .${classes5.slideExit}`]: {
      transform: "translate(0%)"
    },
    [`& .${classes5["slideExitActiveLeft-left"]}`]: {
      willChange: "transform",
      transform: "translate(-100%)",
      transition: slideTransition,
      zIndex: 0
    },
    [`& .${classes5["slideExitActiveLeft-right"]}`]: {
      willChange: "transform",
      transform: "translate(100%)",
      transition: slideTransition,
      zIndex: 0
    }
  };
});
var PickersSlideTransition = (_ref) => {
  let {
    children,
    className,
    reduceAnimations,
    slideDirection,
    transKey
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded30);
  if (reduceAnimations) {
    return (0, import_jsx_runtime64.jsx)("div", {
      className: clsx_m_default(classes5.root, className),
      children
    });
  }
  const transitionClasses = {
    exit: classes5.slideExit,
    enterActive: classes5.slideEnterActive,
    enter: classes5[`slideEnter-${slideDirection}`],
    exitActive: classes5[`slideExitActiveLeft-${slideDirection}`]
  };
  return (0, import_jsx_runtime64.jsx)(PickersSlideTransitionRoot, {
    className: clsx_m_default(classes5.root, className),
    childFactory: (element) => React70.cloneElement(element, {
      classNames: transitionClasses
    }),
    children: (0, import_jsx_runtime64.jsx)(CSSTransition_default, _extends({
      mountOnEnter: true,
      unmountOnExit: true,
      timeout: slideAnimationDuration,
      classNames: transitionClasses
    }, other, {
      children
    }), transKey)
  });
};
var PickersSlideTransition_default = PickersSlideTransition;

// node_modules/@mui/lab/CalendarPicker/PickersCalendar.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var _span;
var weeksContainerHeight = (DAY_SIZE + DAY_MARGIN * 4) * 6;
var PickersCalendarDayHeader = styled_default("div")({
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
});
var PickersCalendarWeekDayLabel = styled_default(Typography_default)(({
  theme
}) => ({
  width: 36,
  height: 40,
  margin: "0 2px",
  textAlign: "center",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  color: theme.palette.text.secondary
}));
var PickersCalendarLoadingContainer = styled_default("div")({
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  minHeight: weeksContainerHeight
});
var PickersCalendarSlideTransition = styled_default(PickersSlideTransition_default)({
  minHeight: weeksContainerHeight
});
var PickersCalendarWeekContainer = styled_default("div")({
  overflow: "hidden"
});
var PickersCalendarWeek = styled_default("div")({
  margin: `${DAY_MARGIN}px 0`,
  display: "flex",
  justifyContent: "center"
});
function PickersCalendar(props) {
  const {
    allowSameDateSelection,
    autoFocus,
    onFocusedDayChange: changeFocusedDay,
    className,
    currentMonth,
    date,
    disabled,
    disableHighlightToday,
    focusedDay,
    isDateDisabled,
    isMonthSwitchingAnimating,
    loading,
    onChange,
    onMonthSwitchingAnimationEnd,
    readOnly,
    reduceAnimations,
    renderDay,
    renderLoading = () => _span || (_span = (0, import_jsx_runtime65.jsx)("span", {
      children: "..."
    })),
    showDaysOutsideCurrentMonth,
    slideDirection,
    TransitionProps
  } = props;
  const now = useNow();
  const utils = useUtils();
  const handleDaySelect = React71.useCallback((day, isFinish = "finish") => {
    if (readOnly) {
      return;
    }
    const finalDate = Array.isArray(date) ? day : utils.mergeDateAndTime(day, date || now);
    onChange(finalDate, isFinish);
  }, [date, now, onChange, readOnly, utils]);
  const currentMonthNumber = utils.getMonth(currentMonth);
  const selectedDates = (Array.isArray(date) ? date : [date]).filter(Boolean).map((selectedDateItem) => selectedDateItem && utils.startOfDay(selectedDateItem));
  const transitionKey = currentMonthNumber;
  const slideNodeRef = React71.useMemo(() => React71.createRef(), [transitionKey]);
  return (0, import_jsx_runtime66.jsxs)(React71.Fragment, {
    children: [(0, import_jsx_runtime65.jsx)(PickersCalendarDayHeader, {
      children: utils.getWeekdays().map((day, i) => (0, import_jsx_runtime65.jsx)(PickersCalendarWeekDayLabel, {
        "aria-hidden": true,
        variant: "caption",
        children: day.charAt(0).toUpperCase()
      }, day + i.toString()))
    }), loading ? (0, import_jsx_runtime65.jsx)(PickersCalendarLoadingContainer, {
      children: renderLoading()
    }) : (0, import_jsx_runtime65.jsx)(PickersCalendarSlideTransition, _extends({
      transKey: transitionKey,
      onExited: onMonthSwitchingAnimationEnd,
      reduceAnimations,
      slideDirection,
      className
    }, TransitionProps, {
      nodeRef: slideNodeRef,
      children: (0, import_jsx_runtime65.jsx)(PickersCalendarWeekContainer, {
        ref: slideNodeRef,
        role: "grid",
        children: utils.getWeekArray(currentMonth).map((week) => (0, import_jsx_runtime65.jsx)(PickersCalendarWeek, {
          role: "row",
          children: week.map((day) => {
            const pickersDayProps = {
              key: day == null ? void 0 : day.toString(),
              day,
              isAnimating: isMonthSwitchingAnimating,
              disabled: disabled || isDateDisabled(day),
              allowSameDateSelection,
              autoFocus: autoFocus && focusedDay !== null && utils.isSameDay(day, focusedDay),
              today: utils.isSameDay(day, now),
              outsideCurrentMonth: utils.getMonth(day) !== currentMonthNumber,
              selected: selectedDates.some((selectedDate) => selectedDate && utils.isSameDay(selectedDate, day)),
              disableHighlightToday,
              showDaysOutsideCurrentMonth,
              onDayFocus: changeFocusedDay,
              onDaySelect: handleDaySelect
            };
            return renderDay ? renderDay(day, selectedDates, pickersDayProps) : (0, import_jsx_runtime65.jsx)("div", {
              role: "cell",
              children: (0, import_jsx_runtime65.jsx)(PickersDay_default, _extends({}, pickersDayProps))
            }, pickersDayProps.key);
          })
        }, `week-${week[0]}`))
      })
    }))]
  });
}
var PickersCalendar_default = PickersCalendar;

// node_modules/@mui/lab/DateRangePicker/DateRangePickerViewMobile.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
var _excluded31 = ["changeMonth", "components", "componentsProps", "date", "leftArrowButtonText", "maxDate", "minDate", "onChange", "renderDay", "rightArrowButtonText"];
var onlyDayView = ["day"];
function DateRangePickerViewMobile(props) {
  const {
    changeMonth,
    components,
    componentsProps,
    date,
    leftArrowButtonText,
    maxDate: maxDateProp,
    minDate: minDateProp,
    onChange,
    renderDay = (_, dayProps) => (0, import_jsx_runtime67.jsx)(DateRangePickerDay_default, _extends({}, dayProps)),
    rightArrowButtonText
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;
  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;
  return (0, import_jsx_runtime68.jsxs)(React72.Fragment, {
    children: [(0, import_jsx_runtime67.jsx)(PickersCalendarHeader_default, _extends({
      components,
      componentsProps,
      leftArrowButtonText,
      maxDate,
      minDate,
      onMonthChange: changeMonth,
      openView: "day",
      rightArrowButtonText,
      views: onlyDayView
    }, other)), (0, import_jsx_runtime67.jsx)(PickersCalendar_default, _extends({}, other, {
      date,
      onChange,
      onFocusedDayChange: doNothing,
      renderDay: (day, _, DayProps) => renderDay(day, _extends({
        isPreviewing: false,
        isStartOfPreviewing: false,
        isEndOfPreviewing: false,
        isHighlighting: isWithinRange(utils, day, date),
        isStartOfHighlighting: isStartOfRange(utils, day, date),
        isEndOfHighlighting: isEndOfRange(utils, day, date)
      }, DayProps))
    }))]
  });
}

// node_modules/@mui/lab/internal/pickers/Picker/Picker.js
init_objectWithoutPropertiesLoose();
init_extends();
var React87 = __toESM(require_react());

// node_modules/@mui/lab/internal/pickers/hooks/useViews.js
var React73 = __toESM(require_react());
init_utils();
function useViews({
  onChange,
  onViewChange,
  openTo,
  view,
  views
}) {
  var _views, _views2;
  const [openView, setOpenView] = useControlled_default({
    name: "Picker",
    state: "view",
    controlled: view,
    default: openTo && arrayIncludes(views, openTo) ? openTo : views[0]
  });
  const previousView = (_views = views[views.indexOf(openView) - 1]) != null ? _views : null;
  const nextView = (_views2 = views[views.indexOf(openView) + 1]) != null ? _views2 : null;
  const changeView = React73.useCallback((newView) => {
    setOpenView(newView);
    if (onViewChange) {
      onViewChange(newView);
    }
  }, [setOpenView, onViewChange]);
  const openNext = React73.useCallback(() => {
    if (nextView) {
      changeView(nextView);
    }
  }, [nextView, changeView]);
  const handleChangeAndOpenNext = React73.useCallback((date, currentViewSelectionState) => {
    const isSelectionFinishedOnCurrentView = currentViewSelectionState === "finish";
    const globalSelectionState = isSelectionFinishedOnCurrentView && Boolean(nextView) ? "partial" : currentViewSelectionState;
    onChange(date, globalSelectionState);
    if (isSelectionFinishedOnCurrentView) {
      openNext();
    }
  }, [nextView, onChange, openNext]);
  return {
    handleChangeAndOpenNext,
    nextView,
    previousView,
    openNext,
    openView,
    setOpenView: changeView
  };
}

// node_modules/@mui/lab/ClockPicker/ClockPicker.js
init_extends();
var React78 = __toESM(require_react());
var import_prop_types27 = __toESM(require_prop_types());
init_esm();

// node_modules/@mui/lab/ClockPicker/Clock.js
init_extends();
var React75 = __toESM(require_react());
init_esm();

// node_modules/@mui/lab/ClockPicker/ClockPointer.js
init_objectWithoutPropertiesLoose();
init_extends();
var React74 = __toESM(require_react());

// node_modules/@mui/lab/ClockPicker/shared.js
var CLOCK_WIDTH = 220;
var CLOCK_HOUR_WIDTH = 36;
var clockCenter = {
  x: CLOCK_WIDTH / 2,
  y: CLOCK_WIDTH / 2
};
var baseClockPoint = {
  x: clockCenter.x,
  y: 0
};
var cx = baseClockPoint.x - clockCenter.x;
var cy = baseClockPoint.y - clockCenter.y;
var rad2deg = (rad) => rad * (180 / Math.PI);
var getAngleValue = (step, offsetX, offsetY) => {
  const x = offsetX - clockCenter.x;
  const y = offsetY - clockCenter.y;
  const atan = Math.atan2(cx, cy) - Math.atan2(x, y);
  let deg = rad2deg(atan);
  deg = Math.round(deg / step) * step;
  deg %= 360;
  const value = Math.floor(deg / step) || 0;
  const delta = x ** 2 + y ** 2;
  const distance = Math.sqrt(delta);
  return {
    value,
    distance
  };
};
var getMinutes = (offsetX, offsetY, step = 1) => {
  const angleStep = step * 6;
  let {
    value
  } = getAngleValue(angleStep, offsetX, offsetY);
  value = value * step % 60;
  return value;
};
var getHours = (offsetX, offsetY, ampm) => {
  const {
    value,
    distance
  } = getAngleValue(30, offsetX, offsetY);
  let hour = value || 12;
  if (!ampm) {
    if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {
      hour += 12;
      hour %= 24;
    }
  } else {
    hour %= 12;
  }
  return hour;
};

// node_modules/@mui/lab/ClockPicker/ClockPointer.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime());
var _excluded32 = ["className", "hasSelected", "isInner", "type", "value"];
var ClockPointerRoot = styled_default("div")(({
  theme,
  ownerState
}) => _extends({
  width: 2,
  backgroundColor: theme.palette.primary.main,
  position: "absolute",
  left: "calc(50% - 1px)",
  bottom: "50%",
  transformOrigin: "center bottom 0px"
}, ownerState.toAnimateTransform && {
  transition: theme.transitions.create(["transform", "height"])
}));
var ClockPointerThumb = styled_default("div")(({
  theme,
  ownerState
}) => _extends({
  width: 4,
  height: 4,
  backgroundColor: theme.palette.primary.contrastText,
  borderRadius: "50%",
  position: "absolute",
  top: -21,
  left: `calc(50% - ${CLOCK_HOUR_WIDTH / 2}px)`,
  border: `${(CLOCK_HOUR_WIDTH - 4) / 2}px solid ${theme.palette.primary.main}`,
  boxSizing: "content-box"
}, ownerState.hasSelected && {
  backgroundColor: theme.palette.primary.main
}));
var ClockPointer = class extends React74.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      toAnimateTransform: false,
      previousType: void 0
    };
  }
  render() {
    const _this$props = this.props, {
      className,
      isInner,
      type,
      value
    } = _this$props, other = _objectWithoutPropertiesLoose(_this$props, _excluded32);
    const ownerState = _extends({}, this.props, this.state);
    const getAngleStyle = () => {
      const max = type === "hours" ? 12 : 60;
      let angle = 360 / max * value;
      if (type === "hours" && value > 12) {
        angle -= 360;
      }
      return {
        height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),
        transform: `rotateZ(${angle}deg)`
      };
    };
    return (0, import_jsx_runtime69.jsx)(ClockPointerRoot, _extends({
      style: getAngleStyle(),
      className,
      ownerState
    }, other, {
      children: (0, import_jsx_runtime69.jsx)(ClockPointerThumb, {
        ownerState
      })
    }));
  }
};
ClockPointer.getDerivedStateFromProps = (nextProps, state) => {
  if (nextProps.type !== state.previousType) {
    return {
      toAnimateTransform: true,
      previousType: nextProps.type
    };
  }
  return {
    toAnimateTransform: false,
    previousType: nextProps.type
  };
};
var ClockPointer_default = ClockPointer;

// node_modules/@mui/lab/ClockPicker/Clock.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime());
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
var _ClockPin;
var _Typography2;
var _Typography22;
var ClockRoot = styled_default("div")(({
  theme
}) => ({
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  margin: theme.spacing(2)
}));
var ClockClock = styled_default("div")({
  backgroundColor: "rgba(0,0,0,.07)",
  borderRadius: "50%",
  height: 220,
  width: 220,
  flexShrink: 0,
  position: "relative",
  pointerEvents: "none"
});
var ClockSquareMask = styled_default("div")({
  width: "100%",
  height: "100%",
  position: "absolute",
  pointerEvents: "auto",
  outline: 0,
  touchAction: "none",
  userSelect: "none",
  "@media (pointer: fine)": {
    cursor: "pointer",
    borderRadius: "50%"
  },
  "&:active": {
    cursor: "move"
  }
});
var ClockPin = styled_default("div")(({
  theme
}) => ({
  width: 6,
  height: 6,
  borderRadius: "50%",
  backgroundColor: theme.palette.primary.main,
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)"
}));
var ClockAmButton = styled_default(IconButton_default)(({
  theme,
  ownerState
}) => _extends({
  zIndex: 1,
  position: "absolute",
  bottom: ownerState.ampmInClock ? 64 : 8,
  left: 8
}, ownerState.meridiemMode === "am" && {
  backgroundColor: theme.palette.primary.main,
  color: theme.palette.primary.contrastText,
  "&:hover": {
    backgroundColor: theme.palette.primary.light
  }
}));
var ClockPmButton = styled_default(IconButton_default)(({
  theme,
  ownerState
}) => _extends({
  zIndex: 1,
  position: "absolute",
  bottom: ownerState.ampmInClock ? 64 : 8,
  right: 8
}, ownerState.meridiemMode === "pm" && {
  backgroundColor: theme.palette.primary.main,
  color: theme.palette.primary.contrastText,
  "&:hover": {
    backgroundColor: theme.palette.primary.light
  }
}));
function Clock(props) {
  const {
    ampm,
    ampmInClock,
    autoFocus,
    children,
    date,
    getClockLabelText,
    handleMeridiemChange,
    isTimeDisabled,
    meridiemMode,
    minutesStep = 1,
    onChange,
    selectedId,
    type,
    value
  } = props;
  const ownerState = props;
  const utils = useUtils();
  const wrapperVariant = React75.useContext(WrapperVariantContext);
  const isMoving = React75.useRef(false);
  const isSelectedTimeDisabled = isTimeDisabled(value, type);
  const isPointerInner = !ampm && type === "hours" && (value < 1 || value > 12);
  const handleValueChange = (newValue, isFinish) => {
    if (isTimeDisabled(newValue, type)) {
      return;
    }
    onChange(newValue, isFinish);
  };
  const setTime = (event, isFinish) => {
    let {
      offsetX,
      offsetY
    } = event;
    if (offsetX === void 0) {
      const rect = event.target.getBoundingClientRect();
      offsetX = event.changedTouches[0].clientX - rect.left;
      offsetY = event.changedTouches[0].clientY - rect.top;
    }
    const newSelectedValue = type === "seconds" || type === "minutes" ? getMinutes(offsetX, offsetY, minutesStep) : getHours(offsetX, offsetY, Boolean(ampm));
    handleValueChange(newSelectedValue, isFinish);
  };
  const handleTouchMove = (event) => {
    isMoving.current = true;
    setTime(event, "shallow");
  };
  const handleTouchEnd = (event) => {
    if (isMoving.current) {
      setTime(event, "finish");
      isMoving.current = false;
    }
  };
  const handleMouseMove = (event) => {
    if (event.buttons > 0) {
      setTime(event.nativeEvent, "shallow");
    }
  };
  const handleMouseUp = (event) => {
    if (isMoving.current) {
      isMoving.current = false;
    }
    setTime(event.nativeEvent, "finish");
  };
  const hasSelected = React75.useMemo(() => {
    if (type === "hours") {
      return true;
    }
    return value % 5 === 0;
  }, [type, value]);
  const keyboardControlStep = type === "minutes" ? minutesStep : 1;
  const listboxRef = React75.useRef(null);
  useEnhancedEffect_default(() => {
    if (autoFocus) {
      listboxRef.current.focus();
    }
  }, [autoFocus]);
  const handleKeyDown2 = (event) => {
    if (isMoving.current) {
      return;
    }
    switch (event.key) {
      case "Home":
        handleValueChange(0, "partial");
        event.preventDefault();
        break;
      case "End":
        handleValueChange(type === "minutes" ? 59 : 23, "partial");
        event.preventDefault();
        break;
      case "ArrowUp":
        handleValueChange(value + keyboardControlStep, "partial");
        event.preventDefault();
        break;
      case "ArrowDown":
        handleValueChange(value - keyboardControlStep, "partial");
        event.preventDefault();
        break;
      default:
    }
  };
  return (0, import_jsx_runtime71.jsxs)(ClockRoot, {
    children: [(0, import_jsx_runtime71.jsxs)(ClockClock, {
      children: [(0, import_jsx_runtime70.jsx)(ClockSquareMask, {
        onTouchMove: handleTouchMove,
        onTouchEnd: handleTouchEnd,
        onMouseUp: handleMouseUp,
        onMouseMove: handleMouseMove
      }), !isSelectedTimeDisabled && (0, import_jsx_runtime71.jsxs)(React75.Fragment, {
        children: [_ClockPin || (_ClockPin = (0, import_jsx_runtime70.jsx)(ClockPin, {})), date && (0, import_jsx_runtime70.jsx)(ClockPointer_default, {
          type,
          value,
          isInner: isPointerInner,
          hasSelected
        })]
      }), (0, import_jsx_runtime70.jsx)("div", {
        "aria-activedescendant": selectedId,
        "aria-label": getClockLabelText(type, date, utils),
        ref: listboxRef,
        role: "listbox",
        onKeyDown: handleKeyDown2,
        tabIndex: 0,
        children
      })]
    }), ampm && (wrapperVariant === "desktop" || ampmInClock) && (0, import_jsx_runtime71.jsxs)(React75.Fragment, {
      children: [(0, import_jsx_runtime70.jsx)(ClockAmButton, {
        onClick: () => handleMeridiemChange("am"),
        disabled: meridiemMode === null,
        ownerState,
        children: _Typography2 || (_Typography2 = (0, import_jsx_runtime70.jsx)(Typography_default, {
          variant: "caption",
          children: "AM"
        }))
      }), (0, import_jsx_runtime70.jsx)(ClockPmButton, {
        disabled: meridiemMode === null,
        onClick: () => handleMeridiemChange("pm"),
        ownerState,
        children: _Typography22 || (_Typography22 = (0, import_jsx_runtime70.jsx)(Typography_default, {
          variant: "caption",
          children: "PM"
        }))
      })]
    })]
  });
}
var Clock_default2 = Clock;

// node_modules/@mui/lab/ClockPicker/ClockNumbers.js
var React77 = __toESM(require_react());

// node_modules/@mui/lab/ClockPicker/ClockNumber.js
init_objectWithoutPropertiesLoose();
init_extends();
var React76 = __toESM(require_react());
init_clsx_m();
var import_jsx_runtime72 = __toESM(require_jsx_runtime());
var _excluded33 = ["className", "disabled", "index", "inner", "label", "selected"];
var classes6 = generateUtilityClasses("PrivateClockNumber", ["selected", "disabled"]);
var ClockNumberRoot = styled_default("span")(({
  theme,
  ownerState
}) => _extends({
  height: CLOCK_HOUR_WIDTH,
  width: CLOCK_HOUR_WIDTH,
  position: "absolute",
  left: `calc((100% - ${CLOCK_HOUR_WIDTH}px) / 2)`,
  display: "inline-flex",
  justifyContent: "center",
  alignItems: "center",
  borderRadius: "50%",
  color: theme.palette.text.primary,
  fontFamily: theme.typography.fontFamily,
  "&:focused": {
    backgroundColor: theme.palette.background.paper
  },
  [`&.${classes6.selected}`]: {
    color: theme.palette.primary.contrastText
  },
  [`&.${classes6.disabled}`]: {
    pointerEvents: "none",
    color: theme.palette.text.disabled
  }
}, ownerState.inner && _extends({}, theme.typography.body2, {
  color: theme.palette.text.secondary
})));
function ClockNumber(props) {
  const {
    className,
    disabled,
    index,
    inner,
    label,
    selected
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
  const ownerState = props;
  const angle = index % 12 / 12 * Math.PI * 2 - Math.PI / 2;
  const length = (CLOCK_WIDTH - CLOCK_HOUR_WIDTH - 2) / 2 * (inner ? 0.65 : 1);
  const x = Math.round(Math.cos(angle) * length);
  const y = Math.round(Math.sin(angle) * length);
  return (0, import_jsx_runtime72.jsx)(ClockNumberRoot, _extends({
    className: clsx_m_default(className, selected && classes6.selected, disabled && classes6.disabled),
    "aria-disabled": disabled ? true : void 0,
    "aria-selected": selected ? true : void 0,
    role: "option",
    style: {
      transform: `translate(${x}px, ${y + (CLOCK_WIDTH - CLOCK_HOUR_WIDTH) / 2}px`
    },
    ownerState
  }, other, {
    children: label
  }));
}
var ClockNumber_default = ClockNumber;

// node_modules/@mui/lab/ClockPicker/ClockNumbers.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
var getHourNumbers = ({
  ampm,
  date,
  getClockNumberText,
  isDisabled,
  selectedId,
  utils
}) => {
  const currentHours = date ? utils.getHours(date) : null;
  const hourNumbers = [];
  const startHour = ampm ? 1 : 0;
  const endHour = ampm ? 12 : 23;
  const isSelected = (hour) => {
    if (currentHours === null) {
      return false;
    }
    if (ampm) {
      if (hour === 12) {
        return currentHours === 12 || currentHours === 0;
      }
      return currentHours === hour || currentHours - 12 === hour;
    }
    return currentHours === hour;
  };
  for (let hour = startHour; hour <= endHour; hour += 1) {
    let label = hour.toString();
    if (hour === 0) {
      label = "00";
    }
    const inner = !ampm && (hour === 0 || hour > 12);
    label = utils.formatNumber(label);
    const selected = isSelected(hour);
    hourNumbers.push((0, import_jsx_runtime73.jsx)(ClockNumber_default, {
      id: selected ? selectedId : void 0,
      index: hour,
      inner,
      selected,
      disabled: isDisabled(hour),
      label,
      "aria-label": getClockNumberText(label)
    }, hour));
  }
  return hourNumbers;
};
var getMinutesNumbers = ({
  utils,
  value,
  isDisabled,
  getClockNumberText,
  selectedId
}) => {
  const f = utils.formatNumber;
  return [[5, f("05")], [10, f("10")], [15, f("15")], [20, f("20")], [25, f("25")], [30, f("30")], [35, f("35")], [40, f("40")], [45, f("45")], [50, f("50")], [55, f("55")], [0, f("00")]].map(([numberValue, label], index) => {
    const selected = numberValue === value;
    return (0, import_jsx_runtime73.jsx)(ClockNumber_default, {
      label,
      id: selected ? selectedId : void 0,
      index: index + 1,
      inner: false,
      disabled: isDisabled(numberValue),
      selected,
      "aria-label": getClockNumberText(label)
    }, numberValue);
  });
};

// node_modules/@mui/lab/ClockPicker/ClockPicker.js
var import_jsx_runtime74 = __toESM(require_jsx_runtime());
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
function getClockPickerUtilityClass(slot) {
  return generateUtilityClass("MuiClockPicker", slot);
}
var clockPickerClasses = generateUtilityClasses("MuiClockPicker", ["arrowSwitcher"]);
var useUtilityClasses15 = (ownerState) => {
  const {
    classes: classes8
  } = ownerState;
  const slots = {
    arrowSwitcher: ["arrowSwitcher"]
  };
  return composeClasses(slots, getClockPickerUtilityClass, classes8);
};
var ClockPickerArrowSwitcher = styled_default(PickersArrowSwitcher_default, {
  name: "MuiClockPicker",
  slot: "ArrowSwitcher",
  overridesResolver: (props, styles2) => styles2.arrowSwitcher
})({
  position: "absolute",
  right: 12,
  top: 15
});
var defaultGetClockLabelText = (view, time, adapter) => `Select ${view}. ${time === null ? "No time selected" : `Selected time is ${adapter.format(time, "fullTime")}`}`;
var defaultGetMinutesClockNumberText = (minutes) => `${minutes} minutes`;
var defaultGetHoursClockNumberText = (hours) => `${hours} hours`;
var defaultGetSecondsClockNumberText = (seconds) => `${seconds} seconds`;
function ClockPicker(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiClockPicker"
  });
  const {
    ampm = false,
    ampmInClock = false,
    autoFocus,
    components,
    componentsProps,
    date,
    disableIgnoringDatePartForTimeValidation = false,
    getClockLabelText = defaultGetClockLabelText,
    getHoursClockNumberText = defaultGetHoursClockNumberText,
    getMinutesClockNumberText = defaultGetMinutesClockNumberText,
    getSecondsClockNumberText = defaultGetSecondsClockNumberText,
    leftArrowButtonText = "open previous view",
    maxTime,
    minTime,
    minutesStep = 1,
    nextViewAvailable,
    onChange,
    openNextView,
    openPreviousView,
    previousViewAvailable,
    rightArrowButtonText = "open next view",
    shouldDisableTime,
    showViewSwitcher,
    view
  } = props;
  const now = useNow();
  const utils = useUtils();
  const midnight = utils.setSeconds(utils.setMinutes(utils.setHours(now, 0), 0), 0);
  const dateOrMidnight = date || midnight;
  const {
    meridiemMode,
    handleMeridiemChange
  } = useMeridiemMode(dateOrMidnight, ampm, onChange);
  const isTimeDisabled = React78.useCallback((rawValue, viewType) => {
    if (date === null) {
      return false;
    }
    const validateTimeValue = (getRequestedTimePoint) => {
      const isAfterComparingFn = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
      return Boolean(minTime && isAfterComparingFn(minTime, getRequestedTimePoint("end")) || maxTime && isAfterComparingFn(getRequestedTimePoint("start"), maxTime) || shouldDisableTime && shouldDisableTime(rawValue, viewType));
    };
    switch (viewType) {
      case "hours": {
        const hoursWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
        return validateTimeValue((when) => pipe((currentDate) => utils.setHours(currentDate, hoursWithMeridiem), (dateWithHours) => utils.setMinutes(dateWithHours, when === "start" ? 0 : 59), (dateWithMinutes) => utils.setSeconds(dateWithMinutes, when === "start" ? 0 : 59))(date));
      }
      case "minutes":
        return validateTimeValue((when) => pipe((currentDate) => utils.setMinutes(currentDate, rawValue), (dateWithMinutes) => utils.setSeconds(dateWithMinutes, when === "start" ? 0 : 59))(date));
      case "seconds":
        return validateTimeValue(() => utils.setSeconds(date, rawValue));
      default:
        throw new Error("not supported");
    }
  }, [ampm, date, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, shouldDisableTime, utils]);
  const selectedId = useId();
  const viewProps = React78.useMemo(() => {
    switch (view) {
      case "hours": {
        const handleHoursChange = (value, isFinish) => {
          const valueWithMeridiem = convertValueToMeridiem(value, meridiemMode, ampm);
          onChange(utils.setHours(dateOrMidnight, valueWithMeridiem), isFinish);
        };
        return {
          onChange: handleHoursChange,
          value: utils.getHours(dateOrMidnight),
          children: getHourNumbers({
            date,
            utils,
            ampm,
            onChange: handleHoursChange,
            getClockNumberText: getHoursClockNumberText,
            isDisabled: (value) => isTimeDisabled(value, "hours"),
            selectedId
          })
        };
      }
      case "minutes": {
        const minutesValue = utils.getMinutes(dateOrMidnight);
        const handleMinutesChange = (value, isFinish) => {
          onChange(utils.setMinutes(dateOrMidnight, value), isFinish);
        };
        return {
          value: minutesValue,
          onChange: handleMinutesChange,
          children: getMinutesNumbers({
            utils,
            value: minutesValue,
            onChange: handleMinutesChange,
            getClockNumberText: getMinutesClockNumberText,
            isDisabled: (value) => isTimeDisabled(value, "minutes"),
            selectedId
          })
        };
      }
      case "seconds": {
        const secondsValue = utils.getSeconds(dateOrMidnight);
        const handleSecondsChange = (value, isFinish) => {
          onChange(utils.setSeconds(dateOrMidnight, value), isFinish);
        };
        return {
          value: secondsValue,
          onChange: handleSecondsChange,
          children: getMinutesNumbers({
            utils,
            value: secondsValue,
            onChange: handleSecondsChange,
            getClockNumberText: getSecondsClockNumberText,
            isDisabled: (value) => isTimeDisabled(value, "seconds"),
            selectedId
          })
        };
      }
      default:
        throw new Error("You must provide the type for ClockView");
    }
  }, [view, utils, date, ampm, getHoursClockNumberText, getMinutesClockNumberText, getSecondsClockNumberText, meridiemMode, onChange, dateOrMidnight, isTimeDisabled, selectedId]);
  const ownerState = props;
  const classes8 = useUtilityClasses15(ownerState);
  return (0, import_jsx_runtime75.jsxs)(React78.Fragment, {
    children: [showViewSwitcher && (0, import_jsx_runtime74.jsx)(ClockPickerArrowSwitcher, {
      className: classes8.arrowSwitcher,
      leftArrowButtonText,
      rightArrowButtonText,
      components,
      componentsProps,
      onLeftClick: openPreviousView,
      onRightClick: openNextView,
      isLeftDisabled: previousViewAvailable,
      isRightDisabled: nextViewAvailable,
      ownerState
    }), (0, import_jsx_runtime74.jsx)(Clock_default2, _extends({
      autoFocus,
      date,
      ampmInClock,
      type: view,
      ampm,
      getClockLabelText,
      minutesStep,
      isTimeDisabled,
      meridiemMode,
      handleMeridiemChange,
      selectedId
    }, viewProps))]
  });
}
true ? ClockPicker.propTypes = {
  ampm: import_prop_types27.default.bool,
  ampmInClock: import_prop_types27.default.bool,
  autoFocus: import_prop_types27.default.bool,
  classes: import_prop_types27.default.object,
  components: import_prop_types27.default.shape({
    LeftArrowButton: import_prop_types27.default.elementType,
    LeftArrowIcon: import_prop_types27.default.elementType,
    RightArrowButton: import_prop_types27.default.elementType,
    RightArrowIcon: import_prop_types27.default.elementType
  }),
  componentsProps: import_prop_types27.default.shape({
    leftArrowButton: import_prop_types27.default.object,
    rightArrowButton: import_prop_types27.default.object
  }),
  date: import_prop_types27.default.any,
  disableIgnoringDatePartForTimeValidation: import_prop_types27.default.bool,
  getClockLabelText: import_prop_types27.default.func,
  getHoursClockNumberText: import_prop_types27.default.func,
  getMinutesClockNumberText: import_prop_types27.default.func,
  getSecondsClockNumberText: import_prop_types27.default.func,
  leftArrowButtonText: import_prop_types27.default.string,
  maxTime: import_prop_types27.default.any,
  minTime: import_prop_types27.default.any,
  minutesStep: import_prop_types27.default.number,
  nextViewAvailable: import_prop_types27.default.bool.isRequired,
  onChange: import_prop_types27.default.func.isRequired,
  openNextView: import_prop_types27.default.func.isRequired,
  openPreviousView: import_prop_types27.default.func.isRequired,
  previousViewAvailable: import_prop_types27.default.bool.isRequired,
  rightArrowButtonText: import_prop_types27.default.string,
  shouldDisableTime: import_prop_types27.default.func,
  showViewSwitcher: import_prop_types27.default.bool,
  view: import_prop_types27.default.oneOf(["hours", "minutes", "seconds"]).isRequired
} : void 0;

// node_modules/@mui/lab/CalendarPicker/CalendarPicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React83 = __toESM(require_react());
var import_prop_types30 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/lab/MonthPicker/MonthPicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React80 = __toESM(require_react());
var import_prop_types28 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/lab/MonthPicker/PickersMonth.js
init_objectWithoutPropertiesLoose();
init_extends();
var React79 = __toESM(require_react());
init_clsx_m();
var import_jsx_runtime76 = __toESM(require_jsx_runtime());
var _excluded34 = ["disabled", "onSelect", "selected", "value"];
var classes7 = generateUtilityClasses("PrivatePickersMonth", ["root", "selected"]);
var PickersMonthRoot = styled_default(Typography_default)(({
  theme
}) => _extends({
  flex: "1 0 33.33%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  color: "unset",
  backgroundColor: "transparent",
  border: 0,
  outline: 0
}, theme.typography.subtitle1, {
  margin: "8px 0",
  height: 36,
  borderRadius: 18,
  cursor: "pointer",
  "&:focus, &:hover": {
    backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
  },
  "&:disabled": {
    pointerEvents: "none",
    color: theme.palette.text.secondary
  },
  [`&.${classes7.selected}`]: {
    color: theme.palette.primary.contrastText,
    backgroundColor: theme.palette.primary.main,
    "&:focus, &:hover": {
      backgroundColor: theme.palette.primary.dark
    }
  }
}));
var PickersMonth = (props) => {
  const {
    disabled,
    onSelect,
    selected,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
  const handleSelection = () => {
    onSelect(value);
  };
  return (0, import_jsx_runtime76.jsx)(PickersMonthRoot, _extends({
    component: "button",
    className: clsx_m_default(classes7.root, selected && classes7.selected),
    tabIndex: disabled ? -1 : 0,
    onClick: handleSelection,
    onKeyDown: onSpaceOrEnter(handleSelection),
    color: selected ? "primary" : void 0,
    variant: selected ? "h5" : "subtitle1",
    disabled
  }, other));
};
var PickersMonth_default = PickersMonth;

// node_modules/@mui/lab/MonthPicker/MonthPicker.js
var import_jsx_runtime77 = __toESM(require_jsx_runtime());
var _excluded35 = ["className", "date", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "onMonthChange", "readOnly"];
function getMonthPickerUtilityClass(slot) {
  return generateUtilityClass("MuiMonthPicker", slot);
}
var monthPickerClasses = generateUtilityClasses("MuiMonthPicker", ["root"]);
var useUtilityClasses16 = (ownerState) => {
  const {
    classes: classes8
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getMonthPickerUtilityClass, classes8);
};
var MonthPickerRoot = styled_default("div", {
  name: "MuiMonthPicker",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({
  width: 310,
  display: "flex",
  flexWrap: "wrap",
  alignContent: "stretch",
  margin: "0 4px"
});
var MonthPicker = React80.forwardRef(function MonthPicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiMonthPicker"
  });
  const {
    className,
    date,
    disabled,
    disableFuture,
    disablePast,
    maxDate,
    minDate,
    onChange,
    onMonthChange,
    readOnly
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
  const ownerState = props;
  const classes8 = useUtilityClasses16(ownerState);
  const utils = useUtils();
  const now = useNow();
  const currentMonth = utils.getMonth(date || now);
  const shouldDisableMonth = (month) => {
    const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, minDate) ? now : minDate);
    const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, maxDate) ? now : maxDate);
    const isBeforeFirstEnabled = utils.isBefore(month, firstEnabledMonth);
    const isAfterLastEnabled = utils.isAfter(month, lastEnabledMonth);
    return isBeforeFirstEnabled || isAfterLastEnabled;
  };
  const onMonthSelect = (month) => {
    if (readOnly) {
      return;
    }
    const newDate = utils.setMonth(date || now, month);
    onChange(newDate, "finish");
    if (onMonthChange) {
      onMonthChange(newDate);
    }
  };
  return (0, import_jsx_runtime77.jsx)(MonthPickerRoot, _extends({
    ref,
    className: clsx_m_default(classes8.root, className),
    ownerState
  }, other, {
    children: utils.getMonthArray(date || now).map((month) => {
      const monthNumber = utils.getMonth(month);
      const monthText = utils.format(month, "monthShort");
      return (0, import_jsx_runtime77.jsx)(PickersMonth_default, {
        value: monthNumber,
        selected: monthNumber === currentMonth,
        onSelect: onMonthSelect,
        disabled: disabled || shouldDisableMonth(month),
        children: monthText
      }, monthText);
    })
  }));
});
true ? MonthPicker.propTypes = {
  classes: import_prop_types28.default.object,
  className: import_prop_types28.default.string,
  date: import_prop_types28.default.any,
  disabled: import_prop_types28.default.bool,
  disableFuture: import_prop_types28.default.bool,
  disablePast: import_prop_types28.default.bool,
  maxDate: import_prop_types28.default.any.isRequired,
  minDate: import_prop_types28.default.any.isRequired,
  onChange: import_prop_types28.default.func.isRequired,
  onMonthChange: import_prop_types28.default.func,
  readOnly: import_prop_types28.default.bool,
  sx: import_prop_types28.default.oneOfType([import_prop_types28.default.arrayOf(import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object, import_prop_types28.default.bool])), import_prop_types28.default.func, import_prop_types28.default.object])
} : void 0;
var MonthPicker_default = MonthPicker;

// node_modules/@mui/lab/YearPicker/YearPicker.js
var React82 = __toESM(require_react());
var import_prop_types29 = __toESM(require_prop_types());
init_clsx_m();

// node_modules/@mui/lab/YearPicker/PickersYear.js
init_extends();
var React81 = __toESM(require_react());
init_clsx_m();
init_utils();
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
function getPickersYearUtilityClass(slot) {
  return generateUtilityClass("PrivatePickersYear", slot);
}
var pickersYearClasses = generateUtilityClasses("PrivatePickersYear", ["root", "modeMobile", "modeDesktop", "yearButton", "disabled", "selected"]);
var useUtilityClasses17 = (ownerState) => {
  const {
    wrapperVariant,
    disabled,
    selected,
    classes: classes8
  } = ownerState;
  const slots = {
    root: ["root", wrapperVariant && `mode${capitalize_default(wrapperVariant)}`],
    yearButton: ["yearButton", disabled && "disabled", selected && "selected"]
  };
  return composeClasses(slots, getPickersYearUtilityClass, classes8);
};
var PickersYearRoot = styled_default("div")(({
  ownerState
}) => _extends({
  flexBasis: "33.3%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center"
}, (ownerState == null ? void 0 : ownerState.wrapperVariant) === "desktop" && {
  flexBasis: "25%"
}));
var PickersYearButton = styled_default("button")(({
  theme
}) => _extends({
  color: "unset",
  backgroundColor: "transparent",
  border: 0,
  outline: 0
}, theme.typography.subtitle1, {
  margin: "8px 0",
  height: 36,
  width: 72,
  borderRadius: 18,
  cursor: "pointer",
  "&:focus, &:hover": {
    backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
  },
  [`&.${pickersYearClasses.disabled}`]: {
    color: theme.palette.text.secondary
  },
  [`&.${pickersYearClasses.selected}`]: {
    color: theme.palette.primary.contrastText,
    backgroundColor: theme.palette.primary.main,
    "&:focus, &:hover": {
      backgroundColor: theme.palette.primary.dark
    }
  }
}));
var PickersYear = React81.forwardRef(function PickersYear2(props, forwardedRef) {
  const {
    autoFocus,
    className,
    children,
    disabled,
    onClick,
    onKeyDown,
    selected,
    value
  } = props;
  const ref = React81.useRef(null);
  const refHandle = useForkRef_default(ref, forwardedRef);
  const wrapperVariant = React81.useContext(WrapperVariantContext);
  const ownerState = _extends({}, props, {
    wrapperVariant
  });
  const classes8 = useUtilityClasses17(ownerState);
  React81.useEffect(() => {
    if (autoFocus) {
      ref.current.focus();
    }
  }, [autoFocus]);
  return (0, import_jsx_runtime78.jsx)(PickersYearRoot, {
    className: clsx_m_default(classes8.root, className),
    ownerState,
    children: (0, import_jsx_runtime78.jsx)(PickersYearButton, {
      ref: refHandle,
      disabled,
      type: "button",
      tabIndex: selected ? 0 : -1,
      onClick: (event) => onClick(event, value),
      onKeyDown: (event) => onKeyDown(event, value),
      className: classes8.yearButton,
      ownerState,
      children
    })
  });
});
var PickersYear_default = PickersYear;

// node_modules/@mui/lab/YearPicker/yearPickerClasses.js
function getYearPickerUtilityClass(slot) {
  return generateUtilityClass("MuiYearPicker", slot);
}
var yearPickerClasses = generateUtilityClasses("MuiYearPicker", ["root"]);

// node_modules/@mui/lab/YearPicker/YearPicker.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime());
var useUtilityClasses18 = (ownerState) => {
  const {
    classes: classes8
  } = ownerState;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getYearPickerUtilityClass, classes8);
};
var YearPickerRoot = styled_default("div", {
  name: "MuiYearPicker",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({
  display: "flex",
  flexDirection: "row",
  flexWrap: "wrap",
  overflowY: "auto",
  height: "100%",
  margin: "0 4px"
});
var YearPicker = React82.forwardRef(function YearPicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiYearPicker"
  });
  const {
    autoFocus,
    className,
    date,
    disabled,
    disableFuture,
    disablePast,
    isDateDisabled,
    maxDate,
    minDate,
    onChange,
    onFocusedDayChange,
    onYearChange,
    readOnly,
    shouldDisableYear
  } = props;
  const ownerState = props;
  const classes8 = useUtilityClasses18(ownerState);
  const now = useNow();
  const theme = useTheme();
  const utils = useUtils();
  const selectedDate = date || now;
  const currentYear = utils.getYear(selectedDate);
  const wrapperVariant = React82.useContext(WrapperVariantContext);
  const selectedYearRef = React82.useRef(null);
  const [focusedYear, setFocusedYear] = React82.useState(currentYear);
  const handleYearSelection = (event, year, isFinish = "finish") => {
    if (readOnly) {
      return;
    }
    const submitDate = (newDate2) => {
      onChange(newDate2, isFinish);
      if (onFocusedDayChange) {
        onFocusedDayChange(newDate2 || now);
      }
      if (onYearChange) {
        onYearChange(newDate2);
      }
    };
    const newDate = utils.setYear(selectedDate, year);
    if (isDateDisabled(newDate)) {
      const closestEnabledDate = findClosestEnabledDate({
        utils,
        date: newDate,
        minDate,
        maxDate,
        disablePast: Boolean(disablePast),
        disableFuture: Boolean(disableFuture),
        shouldDisableDate: isDateDisabled
      });
      submitDate(closestEnabledDate || now);
    } else {
      submitDate(newDate);
    }
  };
  const focusYear = React82.useCallback((year) => {
    if (!isDateDisabled(utils.setYear(selectedDate, year))) {
      setFocusedYear(year);
    }
  }, [selectedDate, isDateDisabled, utils]);
  const yearsInRow = wrapperVariant === "desktop" ? 4 : 3;
  const handleKeyDown2 = (event, year) => {
    switch (event.key) {
      case "ArrowUp":
        focusYear(year - yearsInRow);
        event.preventDefault();
        break;
      case "ArrowDown":
        focusYear(year + yearsInRow);
        event.preventDefault();
        break;
      case "ArrowLeft":
        focusYear(year + (theme.direction === "ltr" ? -1 : 1));
        event.preventDefault();
        break;
      case "ArrowRight":
        focusYear(year + (theme.direction === "ltr" ? 1 : -1));
        event.preventDefault();
        break;
      default:
        break;
    }
  };
  return (0, import_jsx_runtime79.jsx)(YearPickerRoot, {
    ref,
    className: clsx_m_default(classes8.root, className),
    ownerState,
    children: utils.getYearRange(minDate, maxDate).map((year) => {
      const yearNumber = utils.getYear(year);
      const selected = yearNumber === currentYear;
      return (0, import_jsx_runtime79.jsx)(PickersYear_default, {
        selected,
        value: yearNumber,
        onClick: handleYearSelection,
        onKeyDown: handleKeyDown2,
        autoFocus: autoFocus && yearNumber === focusedYear,
        ref: selected ? selectedYearRef : void 0,
        disabled: disabled || disablePast && utils.isBeforeYear(year, now) || disableFuture && utils.isAfterYear(year, now) || shouldDisableYear && shouldDisableYear(year),
        children: utils.format(year, "year")
      }, utils.format(year, "year"));
    })
  });
});
true ? YearPicker.propTypes = {
  autoFocus: import_prop_types29.default.bool,
  classes: import_prop_types29.default.object,
  className: import_prop_types29.default.string,
  date: import_prop_types29.default.any,
  disabled: import_prop_types29.default.bool,
  disableFuture: import_prop_types29.default.bool,
  disablePast: import_prop_types29.default.bool,
  isDateDisabled: import_prop_types29.default.func.isRequired,
  maxDate: import_prop_types29.default.any.isRequired,
  minDate: import_prop_types29.default.any.isRequired,
  onChange: import_prop_types29.default.func.isRequired,
  onFocusedDayChange: import_prop_types29.default.func,
  onYearChange: import_prop_types29.default.func,
  readOnly: import_prop_types29.default.bool,
  shouldDisableYear: import_prop_types29.default.func
} : void 0;
var YearPicker_default = YearPicker;

// node_modules/@mui/lab/internal/pickers/Picker/PickerView.js
var PickerView = styled_default("div")({
  overflowX: "hidden",
  width: DIALOG_WIDTH,
  maxHeight: VIEW_HEIGHT,
  display: "flex",
  flexDirection: "column",
  margin: "0 auto"
});
var PickerView_default = PickerView;

// node_modules/@mui/lab/CalendarPicker/CalendarPicker.js
var import_jsx_runtime80 = __toESM(require_jsx_runtime());
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
var _span2;
var _excluded36 = ["autoFocus", "onViewChange", "date", "disableFuture", "disablePast", "defaultCalendarMonth", "loading", "maxDate", "minDate", "onChange", "onMonthChange", "reduceAnimations", "renderLoading", "shouldDisableDate", "shouldDisableYear", "view", "views", "openTo", "className"];
function getCalendarPickerUtilityClass(slot) {
  return generateUtilityClass("MuiCalendarPicker", slot);
}
var calendarPickerClasses = generateUtilityClasses("MuiCalendarPicker", ["root", "viewTransitionContainer"]);
var useUtilityClasses19 = (ownerState) => {
  const {
    classes: classes8
  } = ownerState;
  const slots = {
    root: ["root"],
    viewTransitionContainer: ["viewTransitionContainer"]
  };
  return composeClasses(slots, getCalendarPickerUtilityClass, classes8);
};
var CalendarPickerRoot = styled_default(PickerView_default, {
  name: "MuiCalendarPicker",
  slot: "Root",
  overridesResolver: (props, styles2) => styles2.root
})({
  display: "flex",
  flexDirection: "column"
});
var CalendarPickerViewTransitionContainer = styled_default(PickersFadeTransitionGroup_default, {
  name: "MuiCalendarPicker",
  slot: "ViewTransitionContainer",
  overridesResolver: (props, styles2) => styles2.viewTransitionContainer
})({
  overflowY: "auto"
});
var defaultReduceAnimations = typeof navigator !== "undefined" && /(android)/i.test(navigator.userAgent);
var CalendarPicker = React83.forwardRef(function CalendarPicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiCalendarPicker"
  });
  const {
    autoFocus,
    onViewChange,
    date,
    disableFuture = false,
    disablePast = false,
    defaultCalendarMonth,
    loading = false,
    maxDate: maxDateProp,
    minDate: minDateProp,
    onChange,
    onMonthChange,
    reduceAnimations = defaultReduceAnimations,
    renderLoading = () => _span2 || (_span2 = (0, import_jsx_runtime80.jsx)("span", {
      children: "..."
    })),
    shouldDisableDate,
    shouldDisableYear,
    view,
    views = ["year", "day"],
    openTo = "day",
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;
  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;
  const {
    openView,
    setOpenView
  } = useViews({
    view,
    views,
    openTo,
    onChange,
    onViewChange
  });
  const {
    calendarState,
    changeFocusedDay,
    changeMonth,
    isDateDisabled,
    handleChangeMonth,
    onMonthSwitchingAnimationEnd
  } = useCalendarState({
    date,
    defaultCalendarMonth,
    reduceAnimations,
    onMonthChange,
    minDate,
    maxDate,
    shouldDisableDate,
    disablePast,
    disableFuture
  });
  React83.useEffect(() => {
    if (date && isDateDisabled(date)) {
      const closestEnabledDate = findClosestEnabledDate({
        utils,
        date,
        minDate,
        maxDate,
        disablePast,
        disableFuture,
        shouldDisableDate: isDateDisabled
      });
      onChange(closestEnabledDate, "partial");
    }
  }, []);
  React83.useEffect(() => {
    if (date) {
      changeMonth(date);
    }
  }, [date]);
  const ownerState = props;
  const classes8 = useUtilityClasses19(ownerState);
  const monthPickerProps = {
    className,
    date,
    disabled: other.disabled,
    disablePast,
    disableFuture,
    onChange,
    minDate,
    maxDate,
    onMonthChange,
    readOnly: other.readOnly
  };
  return (0, import_jsx_runtime81.jsxs)(CalendarPickerRoot, {
    ref,
    className: clsx_m_default(classes8.root, className),
    ownerState,
    children: [(0, import_jsx_runtime80.jsx)(PickersCalendarHeader_default, _extends({}, other, {
      views,
      openView,
      currentMonth: calendarState.currentMonth,
      onViewChange: setOpenView,
      onMonthChange: (newMonth, direction) => handleChangeMonth({
        newMonth,
        direction
      }),
      minDate,
      maxDate,
      disablePast,
      disableFuture,
      reduceAnimations
    })), (0, import_jsx_runtime80.jsx)(CalendarPickerViewTransitionContainer, {
      reduceAnimations,
      className: classes8.viewTransitionContainer,
      transKey: openView,
      ownerState,
      children: (0, import_jsx_runtime81.jsxs)("div", {
        children: [openView === "year" && (0, import_jsx_runtime80.jsx)(YearPicker_default, _extends({}, other, {
          autoFocus,
          date,
          onChange,
          minDate,
          maxDate,
          disableFuture,
          disablePast,
          isDateDisabled,
          shouldDisableYear,
          onFocusedDayChange: changeFocusedDay
        })), openView === "month" && (0, import_jsx_runtime80.jsx)(MonthPicker_default, _extends({}, monthPickerProps)), openView === "day" && (0, import_jsx_runtime80.jsx)(PickersCalendar_default, _extends({}, other, calendarState, {
          autoFocus,
          onMonthSwitchingAnimationEnd,
          onFocusedDayChange: changeFocusedDay,
          reduceAnimations,
          date,
          onChange,
          isDateDisabled,
          loading,
          renderLoading
        }))]
      })
    })]
  });
});
true ? CalendarPicker.propTypes = {
  autoFocus: import_prop_types30.default.bool,
  classes: import_prop_types30.default.object,
  className: import_prop_types30.default.string,
  date: import_prop_types30.default.any,
  defaultCalendarMonth: import_prop_types30.default.any,
  disabled: import_prop_types30.default.bool,
  disableFuture: import_prop_types30.default.bool,
  disablePast: import_prop_types30.default.bool,
  loading: import_prop_types30.default.bool,
  maxDate: import_prop_types30.default.any,
  minDate: import_prop_types30.default.any,
  onChange: import_prop_types30.default.func.isRequired,
  onMonthChange: import_prop_types30.default.func,
  onViewChange: import_prop_types30.default.func,
  openTo: import_prop_types30.default.oneOf(["day", "month", "year"]),
  readOnly: import_prop_types30.default.bool,
  reduceAnimations: import_prop_types30.default.bool,
  renderLoading: import_prop_types30.default.func,
  shouldDisableDate: import_prop_types30.default.func,
  shouldDisableYear: import_prop_types30.default.func,
  view: import_prop_types30.default.oneOf(["day", "month", "year"]),
  views: import_prop_types30.default.arrayOf(import_prop_types30.default.oneOf(["day", "month", "year"]).isRequired)
} : void 0;

// node_modules/@mui/lab/internal/pickers/KeyboardDateInput.js
init_extends();
init_objectWithoutPropertiesLoose();
var React85 = __toESM(require_react());
var import_prop_types31 = __toESM(require_prop_types());

// node_modules/@mui/lab/internal/pickers/hooks/useMaskedInput.js
init_extends();
var React84 = __toESM(require_react());

// node_modules/rifm/dist/rifm.esm.js
var import_react4 = __toESM(require_react());
var useRifm = (props) => {
  const [, refresh] = (0, import_react4.useReducer)((c) => c + 1, 0);
  const valueRef = (0, import_react4.useRef)(null);
  const {
    replace,
    append
  } = props;
  const userValue = replace ? replace(props.format(props.value)) : props.format(props.value);
  const isDeleleteButtonDownRef = (0, import_react4.useRef)(false);
  const onChange = (evt) => {
    if (true) {
      if (evt.target.type === "number") {
        console.error("Rifm does not support input type=number, use type=tel instead.");
        return;
      }
      if (evt.target.type === "date") {
        console.error("Rifm does not support input type=date.");
        return;
      }
    }
    const eventValue = evt.target.value;
    valueRef.current = [
      eventValue,
      evt.target,
      eventValue.length > userValue.length,
      isDeleleteButtonDownRef.current,
      userValue === props.format(eventValue)
    ];
    if (true) {
      const formattedEventValue = props.format(eventValue);
      if (eventValue !== formattedEventValue && eventValue.toLowerCase() === formattedEventValue.toLowerCase()) {
        console.warn("Case enforcement does not work with format. Please use replace={value => value.toLowerCase()} instead");
      }
    }
    refresh();
  };
  if (typeof window !== "undefined") {
    (0, import_react4.useLayoutEffect)(() => {
      if (valueRef.current == null)
        return;
      let [
        eventValue,
        input,
        isSizeIncreaseOperation,
        isDeleleteButtonDown,
        isNoOperation
      ] = valueRef.current;
      valueRef.current = null;
      const deleteWasNoOp = isDeleleteButtonDown && isNoOperation;
      const valueAfterSelectionStart = eventValue.slice(input.selectionStart);
      const acceptedCharIndexAfterDelete = valueAfterSelectionStart.search(props.accept || /\d/g);
      const charsToSkipAfterDelete = acceptedCharIndexAfterDelete !== -1 ? acceptedCharIndexAfterDelete : 0;
      const clean = (str) => (str.match(props.accept || /\d/g) || []).join("");
      const valueBeforeSelectionStart = clean(eventValue.substr(0, input.selectionStart));
      const getCursorPosition = (val) => {
        let start = 0;
        let cleanPos = 0;
        for (let i = 0; i !== valueBeforeSelectionStart.length; ++i) {
          let newPos = val.indexOf(valueBeforeSelectionStart[i], start) + 1;
          let newCleanPos = clean(val).indexOf(valueBeforeSelectionStart[i], cleanPos) + 1;
          if (newCleanPos - cleanPos > 1) {
            newPos = start;
            newCleanPos = cleanPos;
          }
          cleanPos = Math.max(newCleanPos, cleanPos);
          start = Math.max(start, newPos);
        }
        return start;
      };
      if (props.mask === true && isSizeIncreaseOperation && !isNoOperation) {
        let start = getCursorPosition(eventValue);
        const c = clean(eventValue.substr(start))[0];
        start = eventValue.indexOf(c, start);
        eventValue = `${eventValue.substr(0, start)}${eventValue.substr(start + 1)}`;
      }
      let formattedValue = props.format(eventValue);
      if (append != null && input.selectionStart === eventValue.length && !isNoOperation) {
        if (isSizeIncreaseOperation) {
          formattedValue = append(formattedValue);
        } else {
          if (clean(formattedValue.slice(-1)) === "") {
            formattedValue = formattedValue.slice(0, -1);
          }
        }
      }
      const replacedValue = replace ? replace(formattedValue) : formattedValue;
      if (userValue === replacedValue) {
        refresh();
      } else {
        props.onChange(replacedValue);
      }
      return () => {
        let start = getCursorPosition(formattedValue);
        if (props.mask != null && (isSizeIncreaseOperation || isDeleleteButtonDown && !deleteWasNoOp)) {
          while (formattedValue[start] && clean(formattedValue[start]) === "") {
            start += 1;
          }
        }
        input.selectionStart = input.selectionEnd = start + (deleteWasNoOp ? 1 + charsToSkipAfterDelete : 0);
      };
    });
  }
  (0, import_react4.useEffect)(() => {
    const handleKeyDown2 = (evt) => {
      if (evt.code === "Delete") {
        isDeleleteButtonDownRef.current = true;
      }
    };
    const handleKeyUp = (evt) => {
      if (evt.code === "Delete") {
        isDeleleteButtonDownRef.current = false;
      }
    };
    document.addEventListener("keydown", handleKeyDown2);
    document.addEventListener("keyup", handleKeyUp);
    return () => {
      document.removeEventListener("keydown", handleKeyDown2);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, []);
  return {
    value: valueRef.current != null ? valueRef.current[0] : userValue,
    onChange
  };
};

// node_modules/@mui/lab/internal/pickers/text-field-helper.js
function getTextFieldAriaText(rawValue, utils) {
  return rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue), "fullDate")}` : "Choose date";
}
var getDisplayDate = (utils, value, inputFormat) => {
  const date = utils.date(value);
  const isEmpty = value === null;
  if (isEmpty) {
    return "";
  }
  return utils.isValid(date) ? utils.formatByString(date, inputFormat) : "";
};
var MASK_USER_INPUT_SYMBOL = "_";
var staticDateWith2DigitTokens = "2019-11-21T22:30:00.000";
var staticDateWith1DigitTokens = "2019-01-01T09:00:00.000";
function checkMaskIsValidForCurrentFormat(mask, format, acceptRegex, utils) {
  const formattedDateWith1Digit = utils.formatByString(utils.date(staticDateWith1DigitTokens), format);
  const inferredFormatPatternWith1Digits = formattedDateWith1Digit.replace(acceptRegex, MASK_USER_INPUT_SYMBOL);
  const inferredFormatPatternWith2Digits = utils.formatByString(utils.date(staticDateWith2DigitTokens), format).replace(acceptRegex, "_");
  const isMaskValid = inferredFormatPatternWith2Digits === mask && inferredFormatPatternWith1Digits === mask;
  if (!isMaskValid && utils.lib !== "luxon" && true) {
    console.warn(`The mask "${mask}" you passed is not valid for the format used ${format}. Falling down to uncontrolled not-masked input.`);
  }
  return isMaskValid;
}
var maskedDateFormatter = (mask, acceptRegexp) => (value) => {
  return value.split("").map((char, i) => {
    acceptRegexp.lastIndex = 0;
    if (i > mask.length - 1) {
      return "";
    }
    const maskChar = mask[i];
    const nextMaskChar = mask[i + 1];
    const acceptedChar = acceptRegexp.test(char) ? char : "";
    const formattedChar = maskChar === MASK_USER_INPUT_SYMBOL ? acceptedChar : maskChar + acceptedChar;
    if (i === value.length - 1 && nextMaskChar && nextMaskChar !== MASK_USER_INPUT_SYMBOL) {
      return formattedChar ? formattedChar + nextMaskChar : "";
    }
    return formattedChar;
  }).join("");
};

// node_modules/@mui/lab/internal/pickers/hooks/useMaskedInput.js
function useMaskedInput({
  acceptRegex = /[\d]/gi,
  disabled,
  disableMaskedInput,
  ignoreInvalidInputs,
  inputFormat,
  inputProps,
  label,
  mask,
  onChange,
  rawValue,
  readOnly,
  rifmFormatter,
  TextFieldProps,
  validationError
}) {
  const utils = useUtils();
  const [isFocused, setIsFocused] = React84.useState(false);
  const formatHelperText = utils.getFormatHelperText(inputFormat);
  const shouldUseMaskedInput = React84.useMemo(() => {
    if (!mask || disableMaskedInput) {
      return false;
    }
    return checkMaskIsValidForCurrentFormat(mask, inputFormat, acceptRegex, utils);
  }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils]);
  const formatter = React84.useMemo(() => shouldUseMaskedInput && mask ? maskedDateFormatter(mask, acceptRegex) : (st) => st, [acceptRegex, mask, shouldUseMaskedInput]);
  const currentInputValue = getDisplayDate(utils, rawValue, inputFormat);
  const [innerInputValue, setInnerInputValue] = React84.useState(currentInputValue);
  const previousInputValueRef = React84.useRef(currentInputValue);
  React84.useEffect(() => {
    previousInputValueRef.current = currentInputValue;
  }, [currentInputValue]);
  const notTyping = !isFocused;
  const valueChanged = previousInputValueRef.current !== currentInputValue;
  if (notTyping && valueChanged && (rawValue === null || utils.isValid(rawValue))) {
    if (currentInputValue !== innerInputValue) {
      setInnerInputValue(currentInputValue);
    }
  }
  const handleChange = (text) => {
    const finalString = text === "" || text === mask ? "" : text;
    setInnerInputValue(finalString);
    const date = finalString === null ? null : utils.parse(finalString, inputFormat);
    if (ignoreInvalidInputs && !utils.isValid(date)) {
      return;
    }
    onChange(date, finalString || void 0);
  };
  const rifmProps = useRifm({
    value: innerInputValue,
    onChange: handleChange,
    format: rifmFormatter || formatter
  });
  const inputStateArgs = shouldUseMaskedInput ? rifmProps : {
    value: innerInputValue,
    onChange: (event) => {
      handleChange(event.currentTarget.value);
    }
  };
  return _extends({
    label,
    disabled,
    error: validationError,
    inputProps: _extends({}, inputStateArgs, {
      disabled,
      placeholder: formatHelperText,
      readOnly,
      type: shouldUseMaskedInput ? "tel" : "text"
    }, inputProps, {
      onFocus: createDelegatedEventHandler(() => {
        setIsFocused(true);
      }, inputProps == null ? void 0 : inputProps.onFocus),
      onBlur: createDelegatedEventHandler(() => {
        setIsFocused(false);
      }, inputProps == null ? void 0 : inputProps.onBlur)
    })
  }, TextFieldProps);
}

// node_modules/@mui/lab/internal/pickers/KeyboardDateInput.js
var import_jsx_runtime82 = __toESM(require_jsx_runtime());
var _excluded37 = ["components", "disableOpenPicker", "getOpenDialogAriaText", "InputAdornmentProps", "InputProps", "inputRef", "openPicker", "OpenPickerButtonProps", "renderInput"];
var KeyboardDateInput = React85.forwardRef(function KeyboardDateInput2(props, ref) {
  const {
    components = {},
    disableOpenPicker,
    getOpenDialogAriaText = getTextFieldAriaText,
    InputAdornmentProps,
    InputProps,
    inputRef,
    openPicker,
    OpenPickerButtonProps,
    renderInput
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
  const utils = useUtils();
  const textFieldProps = useMaskedInput(other);
  const adornmentPosition = (InputAdornmentProps == null ? void 0 : InputAdornmentProps.position) || "end";
  const OpenPickerIcon = components.OpenPickerIcon || Calendar_default;
  return renderInput(_extends({
    ref,
    inputRef
  }, textFieldProps, {
    InputProps: _extends({}, InputProps, {
      [`${adornmentPosition}Adornment`]: disableOpenPicker ? void 0 : (0, import_jsx_runtime82.jsx)(InputAdornment_default, _extends({
        position: adornmentPosition
      }, InputAdornmentProps, {
        children: (0, import_jsx_runtime82.jsx)(IconButton_default, _extends({
          edge: adornmentPosition,
          disabled: other.disabled || other.readOnly,
          "aria-label": getOpenDialogAriaText(other.rawValue, utils)
        }, OpenPickerButtonProps, {
          onClick: openPicker,
          children: (0, import_jsx_runtime82.jsx)(OpenPickerIcon, {})
        }))
      }))
    })
  }));
});
true ? KeyboardDateInput.propTypes = {
  acceptRegex: import_prop_types31.default.instanceOf(RegExp),
  getOpenDialogAriaText: import_prop_types31.default.func,
  mask: import_prop_types31.default.string,
  OpenPickerButtonProps: import_prop_types31.default.object,
  renderInput: import_prop_types31.default.func.isRequired,
  rifmFormatter: import_prop_types31.default.func
} : void 0;

// node_modules/@mui/lab/internal/pickers/hooks/useIsLandscape.js
var React86 = __toESM(require_react());
init_esm();

// node_modules/@mui/lab/internal/pickers/Picker/Picker.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
var import_jsx_runtime84 = __toESM(require_jsx_runtime());
var MobileKeyboardInputView = styled_default("div")({
  padding: "16px 24px"
});
var PickerRoot = styled_default("div")(({
  ownerState
}) => _extends({
  display: "flex",
  flexDirection: "column"
}, ownerState.isLandscape && {
  flexDirection: "row"
}));

// node_modules/@mui/lab/DateRangePicker/DateRangePickerInput.js
init_extends();
init_objectWithoutPropertiesLoose();
var React88 = __toESM(require_react());
var import_jsx_runtime85 = __toESM(require_jsx_runtime());
var _excluded38 = ["currentlySelectingRangeEnd", "disableOpenPicker", "endText", "onBlur", "onChange", "open", "openPicker", "rawValue", "rawValue", "readOnly", "renderInput", "setCurrentlySelectingRangeEnd", "startText", "TextFieldProps", "validationError"];
var DateRangePickerInputRoot = styled_default("div")(({
  theme
}) => ({
  display: "flex",
  alignItems: "baseline",
  [theme.breakpoints.down("xs")]: {
    flexDirection: "column",
    alignItems: "center"
  }
}));
var DateRangePickerInput = React88.forwardRef(function DateRangePickerInput2(props, ref) {
  const {
    currentlySelectingRangeEnd,
    disableOpenPicker,
    endText,
    onBlur,
    onChange,
    open,
    openPicker,
    rawValue: [start, end],
    readOnly,
    renderInput,
    setCurrentlySelectingRangeEnd,
    startText,
    TextFieldProps,
    validationError: [startValidationError, endValidationError]
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
  const utils = useUtils();
  const startRef = React88.useRef(null);
  const endRef = React88.useRef(null);
  const wrapperVariant = React88.useContext(WrapperVariantContext);
  React88.useEffect(() => {
    if (!open) {
      return;
    }
    if (currentlySelectingRangeEnd === "start") {
      var _startRef$current;
      (_startRef$current = startRef.current) == null ? void 0 : _startRef$current.focus();
    } else if (currentlySelectingRangeEnd === "end") {
      var _endRef$current;
      (_endRef$current = endRef.current) == null ? void 0 : _endRef$current.focus();
    }
  }, [currentlySelectingRangeEnd, open]);
  const lazyHandleChangeCallback = React88.useCallback((...args) => executeInTheNextEventLoopTick(() => onChange(...args)), [onChange]);
  const handleStartChange = (date, inputString) => {
    lazyHandleChangeCallback([date, utils.date(end)], inputString);
  };
  const handleEndChange = (date, inputString) => {
    lazyHandleChangeCallback([utils.date(start), date], inputString);
  };
  const openRangeStartSelection = () => {
    if (setCurrentlySelectingRangeEnd) {
      setCurrentlySelectingRangeEnd("start");
    }
    if (!readOnly && !disableOpenPicker) {
      openPicker();
    }
  };
  const openRangeEndSelection = () => {
    if (setCurrentlySelectingRangeEnd) {
      setCurrentlySelectingRangeEnd("end");
    }
    if (!readOnly && !disableOpenPicker) {
      openPicker();
    }
  };
  const openOnFocus = wrapperVariant === "desktop";
  const startInputProps = useMaskedInput(_extends({}, other, {
    readOnly,
    rawValue: start,
    onChange: handleStartChange,
    label: startText,
    validationError: startValidationError !== null,
    TextFieldProps: _extends({}, TextFieldProps, {
      ref: startRef,
      focused: open && currentlySelectingRangeEnd === "start"
    }),
    inputProps: {
      onClick: !openOnFocus ? openRangeStartSelection : void 0,
      onFocus: openOnFocus ? openRangeStartSelection : void 0
    }
  }));
  const endInputProps = useMaskedInput(_extends({}, other, {
    readOnly,
    label: endText,
    rawValue: end,
    onChange: handleEndChange,
    validationError: endValidationError !== null,
    TextFieldProps: _extends({}, TextFieldProps, {
      ref: endRef,
      focused: open && currentlySelectingRangeEnd === "end"
    }),
    inputProps: {
      onClick: !openOnFocus ? openRangeEndSelection : void 0,
      onFocus: openOnFocus ? openRangeEndSelection : void 0
    }
  }));
  return (0, import_jsx_runtime85.jsx)(DateRangePickerInputRoot, {
    onBlur,
    ref,
    children: renderInput(startInputProps, endInputProps)
  });
});
var DateRangePickerInput_default = DateRangePickerInput;

// node_modules/@mui/lab/DateRangePicker/DateRangePickerViewDesktop.js
init_extends();
init_objectWithoutPropertiesLoose();
var React89 = __toESM(require_react());
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
var import_react5 = __toESM(require_react());
var import_jsx_runtime87 = __toESM(require_jsx_runtime());
var _excluded39 = ["calendars", "changeMonth", "components", "componentsProps", "currentlySelectingRangeEnd", "currentMonth", "date", "disableFuture", "disablePast", "leftArrowButtonText", "maxDate", "minDate", "onChange", "renderDay", "rightArrowButtonText"];
var DateRangePickerViewDesktopRoot = styled_default("div")({
  display: "flex",
  flexDirection: "row"
});
var DateRangePickerViewDesktopContainer = styled_default("div")(({
  theme
}) => ({
  "&:not(:last-of-type)": {
    borderRight: `2px solid ${theme.palette.divider}`
  }
}));
var DateRangePickerViewDesktopCalendar = styled_default(PickersCalendar_default)({
  minWidth: 312,
  minHeight: 288
});
var DateRangePickerViewDesktopArrowSwitcher = styled_default(PickersArrowSwitcher_default)({
  padding: "16px 16px 8px 16px",
  display: "flex",
  alignItems: "center",
  justifyContent: "space-between"
});
function getCalendarsArray(calendars) {
  switch (calendars) {
    case 1:
      return [0];
    case 2:
      return [0, 0];
    case 3:
      return [0, 0, 0];
    default:
      return new Array(calendars).fill(0);
  }
}
function DateRangePickerViewDesktop(props) {
  const {
    calendars,
    changeMonth,
    components,
    componentsProps,
    currentlySelectingRangeEnd,
    currentMonth,
    date,
    disableFuture,
    disablePast,
    leftArrowButtonText = "Previous month",
    maxDate: maxDateProp,
    minDate: minDateProp,
    onChange,
    renderDay = (_, dateRangeProps) => (0, import_jsx_runtime86.jsx)(DateRangePickerDay_default, _extends({}, dateRangeProps)),
    rightArrowButtonText = "Next month"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;
  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;
  const [rangePreviewDay, setRangePreviewDay] = React89.useState(null);
  const isNextMonthDisabled = useNextMonthDisabled(currentMonth, {
    disableFuture,
    maxDate
  });
  const isPreviousMonthDisabled = usePreviousMonthDisabled(currentMonth, {
    disablePast,
    minDate
  });
  const previewingRange = calculateRangePreview({
    utils,
    range: date,
    newDate: rangePreviewDay,
    currentlySelectingRangeEnd
  });
  const handleDayChange = React89.useCallback((day) => {
    setRangePreviewDay(null);
    onChange(day);
  }, [onChange]);
  const handlePreviewDayChange = (newPreviewRequest) => {
    if (!isWithinRange(utils, newPreviewRequest, date)) {
      setRangePreviewDay(newPreviewRequest);
    } else {
      setRangePreviewDay(null);
    }
  };
  const CalendarTransitionProps = React89.useMemo(() => ({
    onMouseLeave: () => setRangePreviewDay(null)
  }), []);
  const selectNextMonth = React89.useCallback(() => {
    changeMonth(utils.getNextMonth(currentMonth));
  }, [changeMonth, currentMonth, utils]);
  const selectPreviousMonth = React89.useCallback(() => {
    changeMonth(utils.getPreviousMonth(currentMonth));
  }, [changeMonth, currentMonth, utils]);
  return (0, import_jsx_runtime86.jsx)(DateRangePickerViewDesktopRoot, {
    children: getCalendarsArray(calendars).map((_, index) => {
      const monthOnIteration = utils.setMonth(currentMonth, utils.getMonth(currentMonth) + index);
      return (0, import_jsx_runtime87.jsxs)(DateRangePickerViewDesktopContainer, {
        children: [(0, import_jsx_runtime86.jsx)(DateRangePickerViewDesktopArrowSwitcher, {
          onLeftClick: selectPreviousMonth,
          onRightClick: selectNextMonth,
          isLeftHidden: index !== 0,
          isRightHidden: index !== calendars - 1,
          isLeftDisabled: isPreviousMonthDisabled,
          isRightDisabled: isNextMonthDisabled,
          leftArrowButtonText,
          components,
          componentsProps,
          rightArrowButtonText,
          children: utils.format(monthOnIteration, "monthAndYear")
        }), (0, import_react5.createElement)(DateRangePickerViewDesktopCalendar, _extends({}, other, {
          key: index,
          date,
          onFocusedDayChange: doNothing,
          onChange: handleDayChange,
          currentMonth: monthOnIteration,
          TransitionProps: CalendarTransitionProps,
          renderDay: (day, __, DayProps) => renderDay(day, _extends({
            isPreviewing: isWithinRange(utils, day, previewingRange),
            isStartOfPreviewing: isStartOfRange(utils, day, previewingRange),
            isEndOfPreviewing: isEndOfRange(utils, day, previewingRange),
            isHighlighting: isWithinRange(utils, day, date),
            isStartOfHighlighting: isStartOfRange(utils, day, date),
            isEndOfHighlighting: isEndOfRange(utils, day, date),
            onMouseEnter: () => handlePreviewDayChange(day)
          }, DayProps))
        }))]
      }, index);
    })
  });
}
var DateRangePickerViewDesktop_default = DateRangePickerViewDesktop;

// node_modules/@mui/lab/DateRangePicker/DateRangePickerView.js
var import_jsx_runtime88 = __toESM(require_jsx_runtime());
var import_jsx_runtime89 = __toESM(require_jsx_runtime());
var _excluded40 = ["calendars", "className", "currentlySelectingRangeEnd", "date", "DateInputProps", "defaultCalendarMonth", "disableAutoMonthSwitching", "disableFuture", "disableHighlightToday", "disablePast", "endText", "isMobileKeyboardViewOpen", "maxDate", "minDate", "onDateChange", "onMonthChange", "open", "reduceAnimations", "setCurrentlySelectingRangeEnd", "shouldDisableDate", "showToolbar", "startText", "toggleMobileKeyboardView", "toolbarFormat", "toolbarTitle"];
function DateRangePickerView(props) {
  const {
    calendars,
    className,
    currentlySelectingRangeEnd,
    date,
    DateInputProps,
    defaultCalendarMonth,
    disableAutoMonthSwitching = false,
    disableFuture,
    disableHighlightToday,
    disablePast,
    endText,
    isMobileKeyboardViewOpen,
    maxDate,
    minDate,
    onDateChange,
    onMonthChange,
    open,
    reduceAnimations = defaultReduceAnimations,
    setCurrentlySelectingRangeEnd,
    shouldDisableDate,
    showToolbar,
    startText,
    toggleMobileKeyboardView,
    toolbarFormat,
    toolbarTitle
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
  const utils = useUtils();
  const wrapperVariant = React90.useContext(WrapperVariantContext);
  const [start, end] = date;
  const {
    changeMonth,
    calendarState,
    isDateDisabled,
    onMonthSwitchingAnimationEnd,
    changeFocusedDay
  } = useCalendarState({
    date: start || end,
    defaultCalendarMonth,
    disableFuture,
    disablePast,
    disableSwitchToMonthOnDayFocus: true,
    maxDate,
    minDate,
    onMonthChange,
    reduceAnimations,
    shouldDisableDate
  });
  const toShowToolbar = showToolbar != null ? showToolbar : wrapperVariant !== "desktop";
  const scrollToDayIfNeeded = (day) => {
    if (!day || !utils.isValid(day) || isDateDisabled(day)) {
      return;
    }
    const currentlySelectedDate = currentlySelectingRangeEnd === "start" ? start : end;
    if (currentlySelectedDate === null) {
      return;
    }
    const displayingMonthRange = wrapperVariant === "mobile" ? 0 : calendars - 1;
    const currentMonthNumber = utils.getMonth(calendarState.currentMonth);
    const requestedMonthNumber = utils.getMonth(day);
    if (!utils.isSameYear(calendarState.currentMonth, day) || requestedMonthNumber < currentMonthNumber || requestedMonthNumber > currentMonthNumber + displayingMonthRange) {
      const newMonth = currentlySelectingRangeEnd === "start" ? currentlySelectedDate : utils.addMonths(currentlySelectedDate, -displayingMonthRange);
      changeMonth(newMonth);
    }
  };
  React90.useEffect(() => {
    if (disableAutoMonthSwitching || !open) {
      return;
    }
    scrollToDayIfNeeded(currentlySelectingRangeEnd === "start" ? start : end);
  }, [currentlySelectingRangeEnd, date]);
  const handleChange = React90.useCallback((newDate) => {
    const {
      nextSelection,
      newRange
    } = calculateRangeChange({
      newDate,
      utils,
      range: date,
      currentlySelectingRangeEnd
    });
    setCurrentlySelectingRangeEnd(nextSelection);
    const isFullRangeSelected = currentlySelectingRangeEnd === "end" && isRangeValid(utils, newRange);
    onDateChange(newRange, wrapperVariant, isFullRangeSelected ? "finish" : "partial");
  }, [currentlySelectingRangeEnd, date, onDateChange, setCurrentlySelectingRangeEnd, utils, wrapperVariant]);
  const renderView = () => {
    const sharedCalendarProps = _extends({
      date,
      isDateDisabled,
      changeFocusedDay,
      onChange: handleChange,
      reduceAnimations,
      disableHighlightToday,
      onMonthSwitchingAnimationEnd,
      changeMonth,
      currentlySelectingRangeEnd,
      disableFuture,
      disablePast,
      minDate,
      maxDate
    }, calendarState, other);
    switch (wrapperVariant) {
      case "desktop": {
        return (0, import_jsx_runtime88.jsx)(DateRangePickerViewDesktop_default, _extends({
          calendars
        }, sharedCalendarProps));
      }
      default: {
        return (0, import_jsx_runtime88.jsx)(DateRangePickerViewMobile, _extends({}, sharedCalendarProps));
      }
    }
  };
  return (0, import_jsx_runtime89.jsxs)("div", {
    className,
    children: [toShowToolbar && (0, import_jsx_runtime88.jsx)(DateRangePickerToolbar_default, {
      date,
      isMobileKeyboardViewOpen,
      toggleMobileKeyboardView,
      currentlySelectingRangeEnd,
      setCurrentlySelectingRangeEnd,
      startText,
      endText,
      toolbarTitle,
      toolbarFormat
    }), isMobileKeyboardViewOpen ? (0, import_jsx_runtime88.jsx)(MobileKeyboardInputView, {
      children: (0, import_jsx_runtime88.jsx)(DateRangePickerInput_default, _extends({
        disableOpenPicker: true,
        ignoreInvalidInputs: true
      }, DateInputProps))
    }) : renderView()]
  });
}
true ? DateRangePickerView.propTypes = {
  calendars: import_prop_types32.default.oneOf([1, 2, 3]),
  disableAutoMonthSwitching: import_prop_types32.default.bool
} : void 0;

// node_modules/@mui/lab/DateRangePicker/DateRangePicker.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime());
var _excluded41 = ["calendars", "value", "onChange", "mask", "startText", "endText", "inputFormat", "minDate", "maxDate"];
var KeyboardDateInputComponent = DateRangePickerInput_default;
var PureDateInputComponent = DateRangePickerInput_default;
var rangePickerValueManager = {
  emptyValue: [null, null],
  parseInput: parseRangeInputValue,
  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])
};
var DateRangePicker = React91.forwardRef(function DateRangePicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDateRangePicker"
  });
  const {
    calendars = 2,
    value,
    onChange,
    mask = "__/__/____",
    startText = "Start",
    endText = "End",
    inputFormat: passedInputFormat,
    minDate: minDateProp,
    maxDate: maxDateProp
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const minDate = minDateProp != null ? minDateProp : defaultDates.minDate;
  const maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;
  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React91.useState("start");
  const pickerStateProps = _extends({}, other, {
    value,
    onChange
  });
  const restProps = _extends({}, other, {
    minDate,
    maxDate
  });
  const {
    pickerProps,
    inputProps,
    wrapperProps
  } = usePickerState(pickerStateProps, rangePickerValueManager);
  const validationError = useDateRangeValidation(props);
  const DateInputProps = _extends({}, inputProps, restProps, {
    currentlySelectingRangeEnd,
    inputFormat: passedInputFormat || utils.formats.keyboardDate,
    setCurrentlySelectingRangeEnd,
    startText,
    endText,
    mask,
    validationError,
    ref
  });
  return (0, import_jsx_runtime90.jsx)(ResponsiveTooltipWrapper, _extends({}, restProps, wrapperProps, {
    DateInputProps,
    KeyboardDateInputComponent,
    PureDateInputComponent,
    children: (0, import_jsx_runtime90.jsx)(DateRangePickerView, _extends({
      open: wrapperProps.open,
      DateInputProps,
      calendars,
      currentlySelectingRangeEnd,
      setCurrentlySelectingRangeEnd,
      startText,
      endText
    }, pickerProps, restProps))
  }));
});
true ? DateRangePicker.propTypes = {
  acceptRegex: import_prop_types33.default.instanceOf(RegExp),
  allowSameDateSelection: import_prop_types33.default.bool,
  autoFocus: import_prop_types33.default.bool,
  calendars: import_prop_types33.default.oneOf([1, 2, 3]),
  cancelText: import_prop_types33.default.node,
  children: import_prop_types33.default.node,
  className: import_prop_types33.default.string,
  clearable: import_prop_types33.default.bool,
  clearText: import_prop_types33.default.node,
  components: import_prop_types33.default.shape({
    LeftArrowButton: import_prop_types33.default.elementType,
    LeftArrowIcon: import_prop_types33.default.elementType,
    OpenPickerIcon: import_prop_types33.default.elementType,
    RightArrowButton: import_prop_types33.default.elementType,
    RightArrowIcon: import_prop_types33.default.elementType,
    SwitchViewButton: import_prop_types33.default.elementType,
    SwitchViewIcon: import_prop_types33.default.elementType
  }),
  componentsProps: import_prop_types33.default.shape({
    leftArrowButton: import_prop_types33.default.object,
    rightArrowButton: import_prop_types33.default.object,
    switchViewButton: import_prop_types33.default.object
  }),
  defaultCalendarMonth: import_prop_types33.default.any,
  desktopModeMediaQuery: import_prop_types33.default.string,
  DialogProps: import_prop_types33.default.object,
  disableAutoMonthSwitching: import_prop_types33.default.bool,
  disableCloseOnSelect: import_prop_types33.default.bool,
  disabled: import_prop_types33.default.bool,
  disableFuture: import_prop_types33.default.bool,
  disableHighlightToday: import_prop_types33.default.bool,
  disableMaskedInput: import_prop_types33.default.bool,
  disableOpenPicker: import_prop_types33.default.bool,
  disablePast: import_prop_types33.default.bool,
  endText: import_prop_types33.default.node,
  getOpenDialogAriaText: import_prop_types33.default.func,
  getViewSwitchingButtonText: import_prop_types33.default.func,
  ignoreInvalidInputs: import_prop_types33.default.bool,
  InputAdornmentProps: import_prop_types33.default.object,
  inputFormat: import_prop_types33.default.string,
  InputProps: import_prop_types33.default.object,
  inputRef: import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.shape({
    current: import_prop_types33.default.object
  })]),
  key: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]),
  label: import_prop_types33.default.node,
  leftArrowButtonText: import_prop_types33.default.string,
  loading: import_prop_types33.default.bool,
  mask: import_prop_types33.default.string,
  maxDate: import_prop_types33.default.any,
  minDate: import_prop_types33.default.any,
  okText: import_prop_types33.default.node,
  onAccept: import_prop_types33.default.func,
  onChange: import_prop_types33.default.func.isRequired,
  onClose: import_prop_types33.default.func,
  onError: import_prop_types33.default.func,
  onMonthChange: import_prop_types33.default.func,
  onOpen: import_prop_types33.default.func,
  onViewChange: import_prop_types33.default.func,
  open: import_prop_types33.default.bool,
  OpenPickerButtonProps: import_prop_types33.default.object,
  orientation: import_prop_types33.default.oneOf(["landscape", "portrait"]),
  PaperProps: import_prop_types33.default.object,
  PopperProps: import_prop_types33.default.object,
  readOnly: import_prop_types33.default.bool,
  reduceAnimations: import_prop_types33.default.bool,
  renderDay: import_prop_types33.default.func,
  renderInput: import_prop_types33.default.func.isRequired,
  renderLoading: import_prop_types33.default.func,
  rifmFormatter: import_prop_types33.default.func,
  rightArrowButtonText: import_prop_types33.default.string,
  shouldDisableDate: import_prop_types33.default.func,
  shouldDisableYear: import_prop_types33.default.func,
  showDaysOutsideCurrentMonth: import_prop_types33.default.bool,
  showTodayButton: import_prop_types33.default.bool,
  showToolbar: import_prop_types33.default.bool,
  startText: import_prop_types33.default.node,
  todayText: import_prop_types33.default.node,
  ToolbarComponent: import_prop_types33.default.elementType,
  toolbarFormat: import_prop_types33.default.string,
  toolbarPlaceholder: import_prop_types33.default.node,
  toolbarTitle: import_prop_types33.default.node,
  TransitionComponent: import_prop_types33.default.elementType,
  value: import_prop_types33.default.arrayOf(import_prop_types33.default.oneOfType([import_prop_types33.default.any, import_prop_types33.default.instanceOf(Date), import_prop_types33.default.number, import_prop_types33.default.string])).isRequired
} : void 0;
var DateRangePicker_default = DateRangePicker;

// dep:@mui_lab_DateRangePicker
var mui_lab_DateRangePicker_default = DateRangePicker_default;
export {
  mui_lab_DateRangePicker_default as default
};
/** @license MUI v5.0.0-alpha.74
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=@mui_lab_DateRangePicker.js.map
